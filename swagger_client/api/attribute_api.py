# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AttributeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attribute_add(self, type, name, **kwargs):  # noqa: E501
        """attribute_add  # noqa: E501

        Add new attribute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_add(type, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Defines attribute's type (required)
        :param str name: Defines attributes's name (required)
        :param str code: Entity code
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param bool visible: Set visibility status
        :param bool required: Defines if the option is required
        :param int position: Attribute`s position
        :param str attribute_group_id: Filter by attribute_group_id
        :param str is_global: Attribute saving scope
        :param bool is_searchable: Use attribute in Quick Search
        :param str is_filterable: Use In Layered Navigation
        :param bool is_comparable: Comparable on Front-end
        :param bool is_html_allowed_on_front: Allow HTML Tags on Frontend
        :param bool is_filterable_in_search: Use In Search Results Layered Navigation
        :param bool is_configurable: Use To Create Configurable Product
        :param bool is_visible_in_advanced_search: Use in Advanced Search
        :param bool is_used_for_promo_rules: Use for Promo Rule Conditions
        :param bool used_in_product_listing: Used in Product Listing
        :param bool used_for_sort_by: Used for Sorting in Product Listing
        :param str apply_to: Types of products which can have this attribute
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_add_with_http_info(type, name, **kwargs)  # noqa: E501
        else:
            (data) = self.attribute_add_with_http_info(type, name, **kwargs)  # noqa: E501
            return data

    def attribute_add_with_http_info(self, type, name, **kwargs):  # noqa: E501
        """attribute_add  # noqa: E501

        Add new attribute  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_add_with_http_info(type, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Defines attribute's type (required)
        :param str name: Defines attributes's name (required)
        :param str code: Entity code
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param bool visible: Set visibility status
        :param bool required: Defines if the option is required
        :param int position: Attribute`s position
        :param str attribute_group_id: Filter by attribute_group_id
        :param str is_global: Attribute saving scope
        :param bool is_searchable: Use attribute in Quick Search
        :param str is_filterable: Use In Layered Navigation
        :param bool is_comparable: Comparable on Front-end
        :param bool is_html_allowed_on_front: Allow HTML Tags on Frontend
        :param bool is_filterable_in_search: Use In Search Results Layered Navigation
        :param bool is_configurable: Use To Create Configurable Product
        :param bool is_visible_in_advanced_search: Use in Advanced Search
        :param bool is_used_for_promo_rules: Use for Promo Rule Conditions
        :param bool used_in_product_listing: Used in Product Listing
        :param bool used_for_sort_by: Used for Sorting in Product Listing
        :param str apply_to: Types of products which can have this attribute
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'name', 'code', 'store_id', 'lang_id', 'visible', 'required', 'position', 'attribute_group_id', 'is_global', 'is_searchable', 'is_filterable', 'is_comparable', 'is_html_allowed_on_front', 'is_filterable_in_search', 'is_configurable', 'is_visible_in_advanced_search', 'is_used_for_promo_rules', 'used_in_product_listing', 'used_for_sort_by', 'apply_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `attribute_add`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `attribute_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'visible' in params:
            query_params.append(('visible', params['visible']))  # noqa: E501
        if 'required' in params:
            query_params.append(('required', params['required']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'attribute_group_id' in params:
            query_params.append(('attribute_group_id', params['attribute_group_id']))  # noqa: E501
        if 'is_global' in params:
            query_params.append(('is_global', params['is_global']))  # noqa: E501
        if 'is_searchable' in params:
            query_params.append(('is_searchable', params['is_searchable']))  # noqa: E501
        if 'is_filterable' in params:
            query_params.append(('is_filterable', params['is_filterable']))  # noqa: E501
        if 'is_comparable' in params:
            query_params.append(('is_comparable', params['is_comparable']))  # noqa: E501
        if 'is_html_allowed_on_front' in params:
            query_params.append(('is_html_allowed_on_front', params['is_html_allowed_on_front']))  # noqa: E501
        if 'is_filterable_in_search' in params:
            query_params.append(('is_filterable_in_search', params['is_filterable_in_search']))  # noqa: E501
        if 'is_configurable' in params:
            query_params.append(('is_configurable', params['is_configurable']))  # noqa: E501
        if 'is_visible_in_advanced_search' in params:
            query_params.append(('is_visible_in_advanced_search', params['is_visible_in_advanced_search']))  # noqa: E501
        if 'is_used_for_promo_rules' in params:
            query_params.append(('is_used_for_promo_rules', params['is_used_for_promo_rules']))  # noqa: E501
        if 'used_in_product_listing' in params:
            query_params.append(('used_in_product_listing', params['used_in_product_listing']))  # noqa: E501
        if 'used_for_sort_by' in params:
            query_params.append(('used_for_sort_by', params['used_for_sort_by']))  # noqa: E501
        if 'apply_to' in params:
            query_params.append(('apply_to', params['apply_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_assign_group(self, id, group_id, **kwargs):  # noqa: E501
        """attribute_assign_group  # noqa: E501

        Assign attribute to the group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_assign_group(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str group_id: Attribute group_id (required)
        :param str attribute_set_id: Attribute set id
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_assign_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.attribute_assign_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
            return data

    def attribute_assign_group_with_http_info(self, id, group_id, **kwargs):  # noqa: E501
        """attribute_assign_group  # noqa: E501

        Assign attribute to the group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_assign_group_with_http_info(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str group_id: Attribute group_id (required)
        :param str attribute_set_id: Attribute set id
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_id', 'attribute_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_assign_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `attribute_assign_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `attribute_assign_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'attribute_set_id' in params:
            query_params.append(('attribute_set_id', params['attribute_set_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.assign.group.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_assign_set(self, id, attribute_set_id, **kwargs):  # noqa: E501
        """attribute_assign_set  # noqa: E501

        Assign attribute to the attribute set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_assign_set(id, attribute_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str attribute_set_id: Attribute set id (required)
        :param str group_id: Attribute group_id
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_assign_set_with_http_info(id, attribute_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.attribute_assign_set_with_http_info(id, attribute_set_id, **kwargs)  # noqa: E501
            return data

    def attribute_assign_set_with_http_info(self, id, attribute_set_id, **kwargs):  # noqa: E501
        """attribute_assign_set  # noqa: E501

        Assign attribute to the attribute set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_assign_set_with_http_info(id, attribute_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str attribute_set_id: Attribute set id (required)
        :param str group_id: Attribute group_id
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attribute_set_id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_assign_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `attribute_assign_set`")  # noqa: E501
        # verify the required parameter 'attribute_set_id' is set
        if ('attribute_set_id' not in params or
                params['attribute_set_id'] is None):
            raise ValueError("Missing the required parameter `attribute_set_id` when calling `attribute_assign_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'attribute_set_id' in params:
            query_params.append(('attribute_set_id', params['attribute_set_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.assign.set.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_attributeset_list(self, **kwargs):  # noqa: E501
        """attribute_attributeset_list  # noqa: E501

        Get attribute_set list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_attributeset_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_attributeset_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.attribute_attributeset_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def attribute_attributeset_list_with_http_info(self, **kwargs):  # noqa: E501
        """attribute_attributeset_list  # noqa: E501

        Get attribute_set list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_attributeset_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_attributeset_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.attributeset.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20067',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_count(self, **kwargs):  # noqa: E501
        """attribute_count  # noqa: E501

        Get attributes count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Defines attribute's type
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param bool visible: Filter items by visibility status
        :param bool required: Defines if the option is required
        :param bool system: True if attribute is system
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.attribute_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def attribute_count_with_http_info(self, **kwargs):  # noqa: E501
        """attribute_count  # noqa: E501

        Get attributes count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Defines attribute's type
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param bool visible: Filter items by visibility status
        :param bool required: Defines if the option is required
        :param bool system: True if attribute is system
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'store_id', 'lang_id', 'visible', 'required', 'system']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'visible' in params:
            query_params.append(('visible', params['visible']))  # noqa: E501
        if 'required' in params:
            query_params.append(('required', params['required']))  # noqa: E501
        if 'system' in params:
            query_params.append(('system', params['system']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.count.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20063',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_delete(self, id, **kwargs):  # noqa: E501
        """attribute_delete  # noqa: E501

        Delete attribute from store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.attribute_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def attribute_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """attribute_delete  # noqa: E501

        Delete attribute from store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `attribute_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_group_list(self, **kwargs):  # noqa: E501
        """attribute_group_list  # noqa: E501

        Get attribute group list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_group_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str lang_id: Language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str attribute_set_id: Attribute set id
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_group_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.attribute_group_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def attribute_group_list_with_http_info(self, **kwargs):  # noqa: E501
        """attribute_group_list  # noqa: E501

        Get attribute group list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_group_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str lang_id: Language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str attribute_set_id: Attribute set id
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'lang_id', 'params', 'exclude', 'attribute_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_group_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'attribute_set_id' in params:
            query_params.append(('attribute_set_id', params['attribute_set_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.group.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20067',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_info(self, id, **kwargs):  # noqa: E501
        """attribute_info  # noqa: E501

        Get attribute info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_info_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.attribute_info_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def attribute_info_with_http_info(self, id, **kwargs):  # noqa: E501
        """attribute_info  # noqa: E501

        Get attribute info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_info_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'store_id', 'lang_id', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `attribute_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.info.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_list(self, **kwargs):  # noqa: E501
        """attribute_list  # noqa: E501

        Get attributes list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str type: Defines attribute's type
        :param str attribute_ids: Filter attributes by ids
        :param str store_id: Store Id
        :param str lang_id: Retrieves attributes on specified language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param bool visible: Filter items by visibility status
        :param bool required: Defines if the option is required
        :param bool system: True if attribute is system
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.attribute_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def attribute_list_with_http_info(self, **kwargs):  # noqa: E501
        """attribute_list  # noqa: E501

        Get attributes list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str type: Defines attribute's type
        :param str attribute_ids: Filter attributes by ids
        :param str store_id: Store Id
        :param str lang_id: Retrieves attributes on specified language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param bool visible: Filter items by visibility status
        :param bool required: Defines if the option is required
        :param bool system: True if attribute is system
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'type', 'attribute_ids', 'store_id', 'lang_id', 'params', 'exclude', 'visible', 'required', 'system']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'attribute_ids' in params:
            query_params.append(('attribute_ids', params['attribute_ids']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'visible' in params:
            query_params.append(('visible', params['visible']))  # noqa: E501
        if 'required' in params:
            query_params.append(('required', params['required']))  # noqa: E501
        if 'system' in params:
            query_params.append(('system', params['system']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20061',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_type_list(self, **kwargs):  # noqa: E501
        """attribute_type_list  # noqa: E501

        Get list of supported attributes types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_type_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_type_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.attribute_type_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def attribute_type_list_with_http_info(self, **kwargs):  # noqa: E501
        """attribute_type_list  # noqa: E501

        Get list of supported attributes types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_type_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_type_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.type.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20064',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_unassign_group(self, id, group_id, **kwargs):  # noqa: E501
        """attribute_unassign_group  # noqa: E501

        Unassign attribute from group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_unassign_group(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str group_id: Customer group_id (required)
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_unassign_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.attribute_unassign_group_with_http_info(id, group_id, **kwargs)  # noqa: E501
            return data

    def attribute_unassign_group_with_http_info(self, id, group_id, **kwargs):  # noqa: E501
        """attribute_unassign_group  # noqa: E501

        Unassign attribute from group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_unassign_group_with_http_info(id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str group_id: Customer group_id (required)
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_unassign_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `attribute_unassign_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `attribute_unassign_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.unassign.group.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20066',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_unassign_set(self, id, attribute_set_id, **kwargs):  # noqa: E501
        """attribute_unassign_set  # noqa: E501

        Unassign attribute from attribute set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_unassign_set(id, attribute_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str attribute_set_id: Attribute set id (required)
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_unassign_set_with_http_info(id, attribute_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.attribute_unassign_set_with_http_info(id, attribute_set_id, **kwargs)  # noqa: E501
            return data

    def attribute_unassign_set_with_http_info(self, id, attribute_set_id, **kwargs):  # noqa: E501
        """attribute_unassign_set  # noqa: E501

        Unassign attribute from attribute set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_unassign_set_with_http_info(id, attribute_set_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str attribute_set_id: Attribute set id (required)
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attribute_set_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_unassign_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `attribute_unassign_set`")  # noqa: E501
        # verify the required parameter 'attribute_set_id' is set
        if ('attribute_set_id' not in params or
                params['attribute_set_id'] is None):
            raise ValueError("Missing the required parameter `attribute_set_id` when calling `attribute_unassign_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'attribute_set_id' in params:
            query_params.append(('attribute_set_id', params['attribute_set_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.unassign.set.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20066',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attribute_update(self, id, name, **kwargs):  # noqa: E501
        """attribute_update  # noqa: E501

        Update attribute data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_update(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str name: Defines new attributes's name (required)
        :param str store_id: Store Id
        :param str lang_id: Language id
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attribute_update_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.attribute_update_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def attribute_update_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """attribute_update  # noqa: E501

        Update attribute data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attribute_update_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str name: Defines new attributes's name (required)
        :param str store_id: Store Id
        :param str lang_id: Language id
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'store_id', 'lang_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attribute_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `attribute_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `attribute_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/attribute.update.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
