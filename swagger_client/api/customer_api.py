# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CustomerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def customer_add(self, body, **kwargs):  # noqa: E501
        """customer_add  # noqa: E501

        Add customer into store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerAdd body: (required)
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def customer_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """customer_add  # noqa: E501

        Add customer into store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerAdd body: (required)
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `customer_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/customer.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20060',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_attribute_list(self, customer_id, **kwargs):  # noqa: E501
        """customer_attribute_list  # noqa: E501

        Get attributes for specific customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_attribute_list(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Retrieves orders specified by customer id (required)
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCustomerAttributeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_attribute_list_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_attribute_list_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def customer_attribute_list_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """customer_attribute_list  # noqa: E501

        Get attributes for specific customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_attribute_list_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Retrieves orders specified by customer id (required)
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCustomerAttributeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'count', 'page_cursor', 'store_id', 'lang_id', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_attribute_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `customer_attribute_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'customer_id' in params:
            query_params.append(('customer_id', params['customer_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/customer.attribute.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseCustomerAttributeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_count(self, **kwargs):  # noqa: E501
        """customer_count  # noqa: E501

        Get number of customers from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Customer group_id
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str store_id: Counts customer specified by store id
        :param str customer_list_id: The numeric ID of the customer list in Demandware.
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.customer_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def customer_count_with_http_info(self, **kwargs):  # noqa: E501
        """customer_count  # noqa: E501

        Get number of customers from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: Customer group_id
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str store_id: Counts customer specified by store id
        :param str customer_list_id: The numeric ID of the customer list in Demandware.
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'created_from', 'created_to', 'modified_from', 'modified_to', 'store_id', 'customer_list_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'customer_list_id' in params:
            query_params.append(('customer_list_id', params['customer_list_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/customer.count.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20057',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_find(self, find_value, **kwargs):  # noqa: E501
        """customer_find  # noqa: E501

        Find customers in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_find(find_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str find_value: Entity search that is specified by some value (required)
        :param str find_where: Entity search that is specified by the comma-separated unique fields
        :param str find_params: Entity search that is specified by comma-separated parameters
        :param str store_id: Store Id
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_find_with_http_info(find_value, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_find_with_http_info(find_value, **kwargs)  # noqa: E501
            return data

    def customer_find_with_http_info(self, find_value, **kwargs):  # noqa: E501
        """customer_find  # noqa: E501

        Find customers in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_find_with_http_info(find_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str find_value: Entity search that is specified by some value (required)
        :param str find_where: Entity search that is specified by the comma-separated unique fields
        :param str find_params: Entity search that is specified by comma-separated parameters
        :param str store_id: Store Id
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['find_value', 'find_where', 'find_params', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'find_value' is set
        if ('find_value' not in params or
                params['find_value'] is None):
            raise ValueError("Missing the required parameter `find_value` when calling `customer_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'find_value' in params:
            query_params.append(('find_value', params['find_value']))  # noqa: E501
        if 'find_where' in params:
            query_params.append(('find_where', params['find_where']))  # noqa: E501
        if 'find_params' in params:
            query_params.append(('find_params', params['find_params']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/customer.find.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_group_add(self, name, **kwargs):  # noqa: E501
        """customer_group_add  # noqa: E501

        Create customer group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_group_add(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Customer group name (required)
        :param str store_id: Store Id
        :param str stores_ids: Assign customer group to the stores that is specified by comma-separated stores' id
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_group_add_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_group_add_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def customer_group_add_with_http_info(self, name, **kwargs):  # noqa: E501
        """customer_group_add  # noqa: E501

        Create customer group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_group_add_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Customer group name (required)
        :param str store_id: Store Id
        :param str stores_ids: Assign customer group to the stores that is specified by comma-separated stores' id
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'store_id', 'stores_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_group_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `customer_group_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'stores_ids' in params:
            query_params.append(('stores_ids', params['stores_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/customer.group.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_group_list(self, **kwargs):  # noqa: E501
        """customer_group_list  # noqa: E501

        Get list of customers groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_group_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str group_ids: Groups that will be assigned to a customer
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCustomerGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_group_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.customer_group_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def customer_group_list_with_http_info(self, **kwargs):  # noqa: E501
        """customer_group_list  # noqa: E501

        Get list of customers groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_group_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str group_ids: Groups that will be assigned to a customer
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCustomerGroupList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_cursor', 'start', 'count', 'store_id', 'lang_id', 'group_ids', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_group_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'group_ids' in params:
            query_params.append(('group_ids', params['group_ids']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/customer.group.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseCustomerGroupList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_info(self, id, **kwargs):  # noqa: E501
        """customer_info  # noqa: E501

        Get customers' details from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Retrieves customer's info specified by customer id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves customer info specified by store id
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_info_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_info_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def customer_info_with_http_info(self, id, **kwargs):  # noqa: E501
        """customer_info  # noqa: E501

        Get customers' details from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_info_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Retrieves customer's info specified by customer id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves customer info specified by store id
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'params', 'exclude', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `customer_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/customer.info.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20058',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_list(self, **kwargs):  # noqa: E501
        """customer_list  # noqa: E501

        Get list of customers from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str group_id: Customer group_id
        :param str store_id: Retrieves customers specified by store id
        :param str customer_list_id: The numeric ID of the customer list in Demandware.
        :return: ModelResponseCustomerList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.customer_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def customer_list_with_http_info(self, **kwargs):  # noqa: E501
        """customer_list  # noqa: E501

        Get list of customers from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str group_id: Customer group_id
        :param str store_id: Retrieves customers specified by store id
        :param str customer_list_id: The numeric ID of the customer list in Demandware.
        :return: ModelResponseCustomerList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_cursor', 'start', 'count', 'created_from', 'created_to', 'modified_from', 'modified_to', 'params', 'exclude', 'group_id', 'store_id', 'customer_list_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'customer_list_id' in params:
            query_params.append(('customer_list_id', params['customer_list_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/customer.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseCustomerList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def customer_update(self, id, **kwargs):  # noqa: E501
        """customer_update  # noqa: E501

        Update information of customer in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str group_id: Customer group_id
        :param str group_ids: Groups that will be assigned to a customer
        :param str first_name: Defines customer's first name
        :param str last_name: Defines customer's last name
        :param bool news_letter_subscription: Defines whether the newsletter subscription is available for the user
        :param str tags: Customer tags
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.customer_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.customer_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def customer_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """customer_update  # noqa: E501

        Update information of customer in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.customer_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str group_id: Customer group_id
        :param str group_ids: Groups that will be assigned to a customer
        :param str first_name: Defines customer's first name
        :param str last_name: Defines customer's last name
        :param bool news_letter_subscription: Defines whether the newsletter subscription is available for the user
        :param str tags: Customer tags
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_id', 'group_ids', 'first_name', 'last_name', 'news_letter_subscription', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `customer_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('group_id', params['group_id']))  # noqa: E501
        if 'group_ids' in params:
            query_params.append(('group_ids', params['group_ids']))  # noqa: E501
        if 'first_name' in params:
            query_params.append(('first_name', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            query_params.append(('last_name', params['last_name']))  # noqa: E501
        if 'news_letter_subscription' in params:
            query_params.append(('news_letter_subscription', params['news_letter_subscription']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/customer.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
