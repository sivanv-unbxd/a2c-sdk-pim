# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_cart_add(self, body, **kwargs):  # noqa: E501
        """account_cart_add  # noqa: E501

        Add store to the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_cart_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCartAdd body: (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_cart_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_cart_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_cart_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """account_cart_add  # noqa: E501

        Add store to the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_cart_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountCartAdd body: (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_cart_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_cart_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/account.cart.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_cart_list(self, **kwargs):  # noqa: E501
        """account_cart_list  # noqa: E501

        Get list of carts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_cart_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str request_from_date: Retrieve entities from their creation date
        :param str request_to_date: Retrieve entities to their creation date
        :param str store_url: A web address of a store
        :param str store_key: Find store by store key
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_cart_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_cart_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_cart_list_with_http_info(self, **kwargs):  # noqa: E501
        """account_cart_list  # noqa: E501

        Get list of carts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_cart_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str request_from_date: Retrieve entities from their creation date
        :param str request_to_date: Retrieve entities to their creation date
        :param str store_url: A web address of a store
        :param str store_key: Find store by store key
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['params', 'exclude', 'request_from_date', 'request_to_date', 'store_url', 'store_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_cart_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'request_from_date' in params:
            query_params.append(('request_from_date', params['request_from_date']))  # noqa: E501
        if 'request_to_date' in params:
            query_params.append(('request_to_date', params['request_to_date']))  # noqa: E501
        if 'store_url' in params:
            query_params.append(('store_url', params['store_url']))  # noqa: E501
        if 'store_key' in params:
            query_params.append(('store_key', params['store_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/account.cart.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_config_update(self, **kwargs):  # noqa: E501
        """account_config_update  # noqa: E501

        Update configs in the API2Cart database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_config_update(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_store_key: Update store key
        :param str bridge_url: This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
        :param str store_root: Absolute path to the store root directory (used with \"bridge_url\" parameter)
        :param str db_tables_prefix: DB tables prefix
        :param str _3dcartapi_api_key: 3DCart API Key
        :param str amazon_sp_client_id: Amazon SP API app client id
        :param str amazon_sp_client_secret: Amazon SP API app client secret
        :param str amazon_sp_aws_user_key_id: Amazon AWS user access key ID
        :param str amazon_sp_aws_user_secret: Amazon AWS user secret access key
        :param str amazon_sp_aws_region: Amazon AWS Region
        :param str amazon_sp_aws_role_arn: Amazon AWS Role ARN
        :param str amazon_sp_refresh_token: Amazon SP API OAuth refresh token
        :param str amazon_sp_api_environment: Amazon SP API environment
        :param str amazon_access_token: MWS Auth Token. Access token authorizing the app to access resources on behalf of a user
        :param str amazon_seller_id: Amazon Seller ID (Merchant token)
        :param str amazon_marketplaces_ids: Amazon Marketplace IDs comma separated string
        :param str amazon_secret_key: Amazon Secret Key
        :param str amazon_access_key_id: Amazon Secret Key Id
        :param str aspdotnetstorefront_api_user: It's a AspDotNetStorefront account for which API is available
        :param str aspdotnetstorefront_api_pass: AspDotNetStorefront API Password
        :param str bigcommerceapi_admin_account: It's a BigCommerce account for which API is enabled
        :param str bigcommerceapi_api_path: BigCommerce API URL
        :param str bigcommerceapi_api_key: Bigcommerce API Key
        :param str bigcommerceapi_client_id: Client ID of the requesting app
        :param str bigcommerceapi_access_token: Access token authorizing the app to access resources on behalf of a user
        :param str bigcommerceapi_context: API Path section unique to the store
        :param str demandware_client_id: Demandware client id
        :param str demandware_api_password: Demandware api password
        :param str demandware_user_name: Demandware user name
        :param str demandware_user_password: Demandware user password
        :param str demandware_env_type: Demandware environment
        :param str ebay_client_id: Application ID (AppID).
        :param str ebay_client_secret: Shared Secret from eBay application
        :param str ebay_runame: The RuName value that eBay assigns to your application.
        :param str ebay_access_token: Used to authenticate API requests.
        :param str ebay_refresh_token: Used to renew the access token.
        :param str ebay_environment: eBay environment
        :param int ebay_site_id: eBay global ID
        :param str ecwid_acess_token: Access token authorizing the app to access resources on behalf of a user
        :param str ecwid_store_id: Store Id
        :param str etsy_keystring: Etsy keystring
        :param str etsy_shared_secret: Etsy shared secret
        :param str etsy_access_token: Access token authorizing the app to access resources on behalf of a user
        :param str etsy_token_secret: Secret token authorizing the app to access resources on behalf of a user
        :param str neto_api_key: Neto API Key
        :param str neto_api_username: Neto User Name
        :param str shopify_api_key: Shopify API Key
        :param str shopify_api_password: Shopify API Password
        :param str shopify_shared_secret: Shared secret
        :param str shopify_access_token: Access token authorizing the app to access resources on behalf of a user
        :param str shopware_api_key: Shopware api key
        :param str shopware_api_secret: Shopware client secret access key
        :param str volusion_login: It's a Volusion account for which API is enabled
        :param str volusion_password: Volusion API Password
        :param str walmart_client_id: Walmart client ID
        :param str walmart_client_secret: Walmart client secret
        :param str walmart_environment: Walmart environment
        :param str walmart_channel_type: Walmart WM_CONSUMER.CHANNEL.TYPE header
        :param str squarespace_api_key: Squarespace API Key
        :param str hybris_client_id: Omni Commerce Connector Client ID
        :param str hybris_client_secret: Omni Commerce Connector Client Secret
        :param str hybris_username: User Name
        :param str hybris_password: User password
        :param list[str] hybris_websites: Websites to stores mapping data
        :param str lightspeed_api_key: LightSpeed api key
        :param str lightspeed_api_secret: LightSpeed api secret
        :param str commercehq_api_key: CommerceHQ api key
        :param str commercehq_api_password: CommerceHQ api password
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_config_update_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_config_update_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_config_update_with_http_info(self, **kwargs):  # noqa: E501
        """account_config_update  # noqa: E501

        Update configs in the API2Cart database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_config_update_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_store_key: Update store key
        :param str bridge_url: This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
        :param str store_root: Absolute path to the store root directory (used with \"bridge_url\" parameter)
        :param str db_tables_prefix: DB tables prefix
        :param str _3dcartapi_api_key: 3DCart API Key
        :param str amazon_sp_client_id: Amazon SP API app client id
        :param str amazon_sp_client_secret: Amazon SP API app client secret
        :param str amazon_sp_aws_user_key_id: Amazon AWS user access key ID
        :param str amazon_sp_aws_user_secret: Amazon AWS user secret access key
        :param str amazon_sp_aws_region: Amazon AWS Region
        :param str amazon_sp_aws_role_arn: Amazon AWS Role ARN
        :param str amazon_sp_refresh_token: Amazon SP API OAuth refresh token
        :param str amazon_sp_api_environment: Amazon SP API environment
        :param str amazon_access_token: MWS Auth Token. Access token authorizing the app to access resources on behalf of a user
        :param str amazon_seller_id: Amazon Seller ID (Merchant token)
        :param str amazon_marketplaces_ids: Amazon Marketplace IDs comma separated string
        :param str amazon_secret_key: Amazon Secret Key
        :param str amazon_access_key_id: Amazon Secret Key Id
        :param str aspdotnetstorefront_api_user: It's a AspDotNetStorefront account for which API is available
        :param str aspdotnetstorefront_api_pass: AspDotNetStorefront API Password
        :param str bigcommerceapi_admin_account: It's a BigCommerce account for which API is enabled
        :param str bigcommerceapi_api_path: BigCommerce API URL
        :param str bigcommerceapi_api_key: Bigcommerce API Key
        :param str bigcommerceapi_client_id: Client ID of the requesting app
        :param str bigcommerceapi_access_token: Access token authorizing the app to access resources on behalf of a user
        :param str bigcommerceapi_context: API Path section unique to the store
        :param str demandware_client_id: Demandware client id
        :param str demandware_api_password: Demandware api password
        :param str demandware_user_name: Demandware user name
        :param str demandware_user_password: Demandware user password
        :param str demandware_env_type: Demandware environment
        :param str ebay_client_id: Application ID (AppID).
        :param str ebay_client_secret: Shared Secret from eBay application
        :param str ebay_runame: The RuName value that eBay assigns to your application.
        :param str ebay_access_token: Used to authenticate API requests.
        :param str ebay_refresh_token: Used to renew the access token.
        :param str ebay_environment: eBay environment
        :param int ebay_site_id: eBay global ID
        :param str ecwid_acess_token: Access token authorizing the app to access resources on behalf of a user
        :param str ecwid_store_id: Store Id
        :param str etsy_keystring: Etsy keystring
        :param str etsy_shared_secret: Etsy shared secret
        :param str etsy_access_token: Access token authorizing the app to access resources on behalf of a user
        :param str etsy_token_secret: Secret token authorizing the app to access resources on behalf of a user
        :param str neto_api_key: Neto API Key
        :param str neto_api_username: Neto User Name
        :param str shopify_api_key: Shopify API Key
        :param str shopify_api_password: Shopify API Password
        :param str shopify_shared_secret: Shared secret
        :param str shopify_access_token: Access token authorizing the app to access resources on behalf of a user
        :param str shopware_api_key: Shopware api key
        :param str shopware_api_secret: Shopware client secret access key
        :param str volusion_login: It's a Volusion account for which API is enabled
        :param str volusion_password: Volusion API Password
        :param str walmart_client_id: Walmart client ID
        :param str walmart_client_secret: Walmart client secret
        :param str walmart_environment: Walmart environment
        :param str walmart_channel_type: Walmart WM_CONSUMER.CHANNEL.TYPE header
        :param str squarespace_api_key: Squarespace API Key
        :param str hybris_client_id: Omni Commerce Connector Client ID
        :param str hybris_client_secret: Omni Commerce Connector Client Secret
        :param str hybris_username: User Name
        :param str hybris_password: User password
        :param list[str] hybris_websites: Websites to stores mapping data
        :param str lightspeed_api_key: LightSpeed api key
        :param str lightspeed_api_secret: LightSpeed api secret
        :param str commercehq_api_key: CommerceHQ api key
        :param str commercehq_api_password: CommerceHQ api password
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['new_store_key', 'bridge_url', 'store_root', 'db_tables_prefix', '_3dcartapi_api_key', 'amazon_sp_client_id', 'amazon_sp_client_secret', 'amazon_sp_aws_user_key_id', 'amazon_sp_aws_user_secret', 'amazon_sp_aws_region', 'amazon_sp_aws_role_arn', 'amazon_sp_refresh_token', 'amazon_sp_api_environment', 'amazon_access_token', 'amazon_seller_id', 'amazon_marketplaces_ids', 'amazon_secret_key', 'amazon_access_key_id', 'aspdotnetstorefront_api_user', 'aspdotnetstorefront_api_pass', 'bigcommerceapi_admin_account', 'bigcommerceapi_api_path', 'bigcommerceapi_api_key', 'bigcommerceapi_client_id', 'bigcommerceapi_access_token', 'bigcommerceapi_context', 'demandware_client_id', 'demandware_api_password', 'demandware_user_name', 'demandware_user_password', 'demandware_env_type', 'ebay_client_id', 'ebay_client_secret', 'ebay_runame', 'ebay_access_token', 'ebay_refresh_token', 'ebay_environment', 'ebay_site_id', 'ecwid_acess_token', 'ecwid_store_id', 'etsy_keystring', 'etsy_shared_secret', 'etsy_access_token', 'etsy_token_secret', 'neto_api_key', 'neto_api_username', 'shopify_api_key', 'shopify_api_password', 'shopify_shared_secret', 'shopify_access_token', 'shopware_api_key', 'shopware_api_secret', 'volusion_login', 'volusion_password', 'walmart_client_id', 'walmart_client_secret', 'walmart_environment', 'walmart_channel_type', 'squarespace_api_key', 'hybris_client_id', 'hybris_client_secret', 'hybris_username', 'hybris_password', 'hybris_websites', 'lightspeed_api_key', 'lightspeed_api_secret', 'commercehq_api_key', 'commercehq_api_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_config_update" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'new_store_key' in params:
            query_params.append(('new_store_key', params['new_store_key']))  # noqa: E501
        if 'bridge_url' in params:
            query_params.append(('bridge_url', params['bridge_url']))  # noqa: E501
        if 'store_root' in params:
            query_params.append(('store_root', params['store_root']))  # noqa: E501
        if 'db_tables_prefix' in params:
            query_params.append(('db_tables_prefix', params['db_tables_prefix']))  # noqa: E501
        if '_3dcartapi_api_key' in params:
            query_params.append(('3dcartapi_api_key', params['_3dcartapi_api_key']))  # noqa: E501
        if 'amazon_sp_client_id' in params:
            query_params.append(('amazon_sp_client_id', params['amazon_sp_client_id']))  # noqa: E501
        if 'amazon_sp_client_secret' in params:
            query_params.append(('amazon_sp_client_secret', params['amazon_sp_client_secret']))  # noqa: E501
        if 'amazon_sp_aws_user_key_id' in params:
            query_params.append(('amazon_sp_aws_user_key_id', params['amazon_sp_aws_user_key_id']))  # noqa: E501
        if 'amazon_sp_aws_user_secret' in params:
            query_params.append(('amazon_sp_aws_user_secret', params['amazon_sp_aws_user_secret']))  # noqa: E501
        if 'amazon_sp_aws_region' in params:
            query_params.append(('amazon_sp_aws_region', params['amazon_sp_aws_region']))  # noqa: E501
        if 'amazon_sp_aws_role_arn' in params:
            query_params.append(('amazon_sp_aws_role_arn', params['amazon_sp_aws_role_arn']))  # noqa: E501
        if 'amazon_sp_refresh_token' in params:
            query_params.append(('amazon_sp_refresh_token', params['amazon_sp_refresh_token']))  # noqa: E501
        if 'amazon_sp_api_environment' in params:
            query_params.append(('amazon_sp_api_environment', params['amazon_sp_api_environment']))  # noqa: E501
        if 'amazon_access_token' in params:
            query_params.append(('amazon_access_token', params['amazon_access_token']))  # noqa: E501
        if 'amazon_seller_id' in params:
            query_params.append(('amazon_seller_id', params['amazon_seller_id']))  # noqa: E501
        if 'amazon_marketplaces_ids' in params:
            query_params.append(('amazon_marketplaces_ids', params['amazon_marketplaces_ids']))  # noqa: E501
        if 'amazon_secret_key' in params:
            query_params.append(('amazon_secret_key', params['amazon_secret_key']))  # noqa: E501
        if 'amazon_access_key_id' in params:
            query_params.append(('amazon_access_key_id', params['amazon_access_key_id']))  # noqa: E501
        if 'aspdotnetstorefront_api_user' in params:
            query_params.append(('aspdotnetstorefront_api_user', params['aspdotnetstorefront_api_user']))  # noqa: E501
        if 'aspdotnetstorefront_api_pass' in params:
            query_params.append(('aspdotnetstorefront_api_pass', params['aspdotnetstorefront_api_pass']))  # noqa: E501
        if 'bigcommerceapi_admin_account' in params:
            query_params.append(('bigcommerceapi_admin_account', params['bigcommerceapi_admin_account']))  # noqa: E501
        if 'bigcommerceapi_api_path' in params:
            query_params.append(('bigcommerceapi_api_path', params['bigcommerceapi_api_path']))  # noqa: E501
        if 'bigcommerceapi_api_key' in params:
            query_params.append(('bigcommerceapi_api_key', params['bigcommerceapi_api_key']))  # noqa: E501
        if 'bigcommerceapi_client_id' in params:
            query_params.append(('bigcommerceapi_client_id', params['bigcommerceapi_client_id']))  # noqa: E501
        if 'bigcommerceapi_access_token' in params:
            query_params.append(('bigcommerceapi_access_token', params['bigcommerceapi_access_token']))  # noqa: E501
        if 'bigcommerceapi_context' in params:
            query_params.append(('bigcommerceapi_context', params['bigcommerceapi_context']))  # noqa: E501
        if 'demandware_client_id' in params:
            query_params.append(('demandware_client_id', params['demandware_client_id']))  # noqa: E501
        if 'demandware_api_password' in params:
            query_params.append(('demandware_api_password', params['demandware_api_password']))  # noqa: E501
        if 'demandware_user_name' in params:
            query_params.append(('demandware_user_name', params['demandware_user_name']))  # noqa: E501
        if 'demandware_user_password' in params:
            query_params.append(('demandware_user_password', params['demandware_user_password']))  # noqa: E501
        if 'demandware_env_type' in params:
            query_params.append(('demandware_env_type', params['demandware_env_type']))  # noqa: E501
        if 'ebay_client_id' in params:
            query_params.append(('ebay_client_id', params['ebay_client_id']))  # noqa: E501
        if 'ebay_client_secret' in params:
            query_params.append(('ebay_client_secret', params['ebay_client_secret']))  # noqa: E501
        if 'ebay_runame' in params:
            query_params.append(('ebay_runame', params['ebay_runame']))  # noqa: E501
        if 'ebay_access_token' in params:
            query_params.append(('ebay_access_token', params['ebay_access_token']))  # noqa: E501
        if 'ebay_refresh_token' in params:
            query_params.append(('ebay_refresh_token', params['ebay_refresh_token']))  # noqa: E501
        if 'ebay_environment' in params:
            query_params.append(('ebay_environment', params['ebay_environment']))  # noqa: E501
        if 'ebay_site_id' in params:
            query_params.append(('ebay_site_id', params['ebay_site_id']))  # noqa: E501
        if 'ecwid_acess_token' in params:
            query_params.append(('ecwid_acess_token', params['ecwid_acess_token']))  # noqa: E501
        if 'ecwid_store_id' in params:
            query_params.append(('ecwid_store_id', params['ecwid_store_id']))  # noqa: E501
        if 'etsy_keystring' in params:
            query_params.append(('etsy_keystring', params['etsy_keystring']))  # noqa: E501
        if 'etsy_shared_secret' in params:
            query_params.append(('etsy_shared_secret', params['etsy_shared_secret']))  # noqa: E501
        if 'etsy_access_token' in params:
            query_params.append(('etsy_access_token', params['etsy_access_token']))  # noqa: E501
        if 'etsy_token_secret' in params:
            query_params.append(('etsy_token_secret', params['etsy_token_secret']))  # noqa: E501
        if 'neto_api_key' in params:
            query_params.append(('neto_api_key', params['neto_api_key']))  # noqa: E501
        if 'neto_api_username' in params:
            query_params.append(('neto_api_username', params['neto_api_username']))  # noqa: E501
        if 'shopify_api_key' in params:
            query_params.append(('shopify_api_key', params['shopify_api_key']))  # noqa: E501
        if 'shopify_api_password' in params:
            query_params.append(('shopify_api_password', params['shopify_api_password']))  # noqa: E501
        if 'shopify_shared_secret' in params:
            query_params.append(('shopify_shared_secret', params['shopify_shared_secret']))  # noqa: E501
        if 'shopify_access_token' in params:
            query_params.append(('shopify_access_token', params['shopify_access_token']))  # noqa: E501
        if 'shopware_api_key' in params:
            query_params.append(('shopware_api_key', params['shopware_api_key']))  # noqa: E501
        if 'shopware_api_secret' in params:
            query_params.append(('shopware_api_secret', params['shopware_api_secret']))  # noqa: E501
        if 'volusion_login' in params:
            query_params.append(('volusion_login', params['volusion_login']))  # noqa: E501
        if 'volusion_password' in params:
            query_params.append(('volusion_password', params['volusion_password']))  # noqa: E501
        if 'walmart_client_id' in params:
            query_params.append(('walmart_client_id', params['walmart_client_id']))  # noqa: E501
        if 'walmart_client_secret' in params:
            query_params.append(('walmart_client_secret', params['walmart_client_secret']))  # noqa: E501
        if 'walmart_environment' in params:
            query_params.append(('walmart_environment', params['walmart_environment']))  # noqa: E501
        if 'walmart_channel_type' in params:
            query_params.append(('walmart_channel_type', params['walmart_channel_type']))  # noqa: E501
        if 'squarespace_api_key' in params:
            query_params.append(('squarespace_api_key', params['squarespace_api_key']))  # noqa: E501
        if 'hybris_client_id' in params:
            query_params.append(('hybris_client_id', params['hybris_client_id']))  # noqa: E501
        if 'hybris_client_secret' in params:
            query_params.append(('hybris_client_secret', params['hybris_client_secret']))  # noqa: E501
        if 'hybris_username' in params:
            query_params.append(('hybris_username', params['hybris_username']))  # noqa: E501
        if 'hybris_password' in params:
            query_params.append(('hybris_password', params['hybris_password']))  # noqa: E501
        if 'hybris_websites' in params:
            query_params.append(('hybris_websites', params['hybris_websites']))  # noqa: E501
            collection_formats['hybris_websites'] = 'csv'  # noqa: E501
        if 'lightspeed_api_key' in params:
            query_params.append(('lightspeed_api_key', params['lightspeed_api_key']))  # noqa: E501
        if 'lightspeed_api_secret' in params:
            query_params.append(('lightspeed_api_secret', params['lightspeed_api_secret']))  # noqa: E501
        if 'commercehq_api_key' in params:
            query_params.append(('commercehq_api_key', params['commercehq_api_key']))  # noqa: E501
        if 'commercehq_api_password' in params:
            query_params.append(('commercehq_api_password', params['commercehq_api_password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/account.config.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_failed_webhooks(self, **kwargs):  # noqa: E501
        """account_failed_webhooks  # noqa: E501

        List webhooks that was not delivered to the callback.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_failed_webhooks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param int start: This parameter sets the number from which you want to get entities
        :param str ids: List of сomma-separated webhook ids
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_failed_webhooks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_failed_webhooks_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_failed_webhooks_with_http_info(self, **kwargs):  # noqa: E501
        """account_failed_webhooks  # noqa: E501

        List webhooks that was not delivered to the callback.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_failed_webhooks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param int start: This parameter sets the number from which you want to get entities
        :param str ids: List of сomma-separated webhook ids
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'start', 'ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_failed_webhooks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/account.failed_webhooks.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_supported_platforms(self, **kwargs):  # noqa: E501
        """account_supported_platforms  # noqa: E501

        Get list of supported platforms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_supported_platforms(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_supported_platforms_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_supported_platforms_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_supported_platforms_with_http_info(self, **kwargs):  # noqa: E501
        """account_supported_platforms  # noqa: E501

        Get list of supported platforms  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_supported_platforms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_supported_platforms" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/account.supported_platforms.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
