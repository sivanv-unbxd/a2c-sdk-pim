# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CartApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bridge_download(self, **kwargs):  # noqa: E501
        """bridge_download  # noqa: E501

        Download bridge for store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridge_download(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool whitelabel: Identifies if there is a necessity to download whitelabel bridge.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bridge_download_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bridge_download_with_http_info(**kwargs)  # noqa: E501
            return data

    def bridge_download_with_http_info(self, **kwargs):  # noqa: E501
        """bridge_download  # noqa: E501

        Download bridge for store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bridge_download_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool whitelabel: Identifies if there is a necessity to download whitelabel bridge.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['whitelabel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridge_download" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'whitelabel' in params:
            query_params.append(('whitelabel', params['whitelabel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/zip'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/bridge.download.file', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_bridge(self, **kwargs):  # noqa: E501
        """cart_bridge  # noqa: E501

        Get bridge key and store key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_bridge(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_bridge_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_bridge_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_bridge_with_http_info(self, **kwargs):  # noqa: E501
        """cart_bridge  # noqa: E501

        Get bridge key and store key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_bridge_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_bridge" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.bridge.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_catalog_price_rules_count(self, **kwargs):  # noqa: E501
        """cart_catalog_price_rules_count  # noqa: E501

        Get count of cart catalog price rules discounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_catalog_price_rules_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_catalog_price_rules_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_catalog_price_rules_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_catalog_price_rules_count_with_http_info(self, **kwargs):  # noqa: E501
        """cart_catalog_price_rules_count  # noqa: E501

        Get count of cart catalog price rules discounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_catalog_price_rules_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_catalog_price_rules_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.catalog_price_rules.count.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_catalog_price_rules_list(self, **kwargs):  # noqa: E501
        """cart_catalog_price_rules_list  # noqa: E501

        Get cart catalog price rules discounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_catalog_price_rules_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str ids: Retrieves  catalog_price_rules by ids
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartCatalogPriceRulesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_catalog_price_rules_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_catalog_price_rules_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_catalog_price_rules_list_with_http_info(self, **kwargs):  # noqa: E501
        """cart_catalog_price_rules_list  # noqa: E501

        Get cart catalog price rules discounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_catalog_price_rules_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str ids: Retrieves  catalog_price_rules by ids
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartCatalogPriceRulesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_cursor', 'start', 'count', 'ids', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_catalog_price_rules_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.catalog_price_rules.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseCartCatalogPriceRulesList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_clear_cache(self, cache_type, **kwargs):  # noqa: E501
        """cart_clear_cache  # noqa: E501

        Clear cache on store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_clear_cache(cache_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cache_type: Defines which cache should be cleared. (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_clear_cache_with_http_info(cache_type, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_clear_cache_with_http_info(cache_type, **kwargs)  # noqa: E501
            return data

    def cart_clear_cache_with_http_info(self, cache_type, **kwargs):  # noqa: E501
        """cart_clear_cache  # noqa: E501

        Clear cache on store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_clear_cache_with_http_info(cache_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cache_type: Defines which cache should be cleared. (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cache_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_clear_cache" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cache_type' is set
        if ('cache_type' not in params or
                params['cache_type'] is None):
            raise ValueError("Missing the required parameter `cache_type` when calling `cart_clear_cache`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cache_type' in params:
            query_params.append(('cache_type', params['cache_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.clear_cache.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_config(self, **kwargs):  # noqa: E501
        """cart_config  # noqa: E501

        Get list of cart configs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_config_with_http_info(self, **kwargs):  # noqa: E501
        """cart_config  # noqa: E501

        Get list of cart configs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.config.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_config_update(self, body, **kwargs):  # noqa: E501
        """cart_config_update  # noqa: E501

        Use this API method to update custom data in client database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_config_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CartConfigUpdate body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_config_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_config_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cart_config_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """cart_config_update  # noqa: E501

        Use this API method to update custom data in client database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_config_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CartConfigUpdate body: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_config_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.config.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_coupon_add(self, body, **kwargs):  # noqa: E501
        """cart_coupon_add  # noqa: E501

        Create new coupon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CartCouponAdd body: (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_coupon_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_coupon_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cart_coupon_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """cart_coupon_add  # noqa: E501

        Create new coupon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CartCouponAdd body: (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_coupon_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cart_coupon_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.coupon.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_coupon_condition_add(self, coupon_id, entity, key, operator, value, **kwargs):  # noqa: E501
        """cart_coupon_condition_add  # noqa: E501

        Create new coupon condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_condition_add(coupon_id, entity, key, operator, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coupon_id: Coupon Id (required)
        :param str entity: Defines condition entity type (required)
        :param str key: Defines condition entity attribute key (required)
        :param str operator: Defines condition operator (required)
        :param str value: Defines condition value, can be comma separated according to the operator. (required)
        :param str store_id: Store Id
        :param str target: Defines condition operator
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_coupon_condition_add_with_http_info(coupon_id, entity, key, operator, value, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_coupon_condition_add_with_http_info(coupon_id, entity, key, operator, value, **kwargs)  # noqa: E501
            return data

    def cart_coupon_condition_add_with_http_info(self, coupon_id, entity, key, operator, value, **kwargs):  # noqa: E501
        """cart_coupon_condition_add  # noqa: E501

        Create new coupon condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_condition_add_with_http_info(coupon_id, entity, key, operator, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coupon_id: Coupon Id (required)
        :param str entity: Defines condition entity type (required)
        :param str key: Defines condition entity attribute key (required)
        :param str operator: Defines condition operator (required)
        :param str value: Defines condition value, can be comma separated according to the operator. (required)
        :param str store_id: Store Id
        :param str target: Defines condition operator
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coupon_id', 'entity', 'key', 'operator', 'value', 'store_id', 'target']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_coupon_condition_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coupon_id' is set
        if ('coupon_id' not in params or
                params['coupon_id'] is None):
            raise ValueError("Missing the required parameter `coupon_id` when calling `cart_coupon_condition_add`")  # noqa: E501
        # verify the required parameter 'entity' is set
        if ('entity' not in params or
                params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `cart_coupon_condition_add`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `cart_coupon_condition_add`")  # noqa: E501
        # verify the required parameter 'operator' is set
        if ('operator' not in params or
                params['operator'] is None):
            raise ValueError("Missing the required parameter `operator` when calling `cart_coupon_condition_add`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `cart_coupon_condition_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'coupon_id' in params:
            query_params.append(('coupon_id', params['coupon_id']))  # noqa: E501
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501
        if 'entity' in params:
            query_params.append(('entity', params['entity']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'operator' in params:
            query_params.append(('operator', params['operator']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.coupon.condition.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_coupon_count(self, **kwargs):  # noqa: E501
        """cart_coupon_count  # noqa: E501

        Get cart coupons count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: Store Id
        :param str date_start_from: Filter entity by date_start (greater or equal)
        :param str date_start_to: Filter entity by date_start (less or equal)
        :param str date_end_from: Filter entity by date_end (greater or equal)
        :param str date_end_to: Filter entity by date_end (less or equal)
        :param bool avail: Defines category's visibility status
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_coupon_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_coupon_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_coupon_count_with_http_info(self, **kwargs):  # noqa: E501
        """cart_coupon_count  # noqa: E501

        Get cart coupons count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: Store Id
        :param str date_start_from: Filter entity by date_start (greater or equal)
        :param str date_start_to: Filter entity by date_start (less or equal)
        :param str date_end_from: Filter entity by date_end (greater or equal)
        :param str date_end_to: Filter entity by date_end (less or equal)
        :param bool avail: Defines category's visibility status
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id', 'date_start_from', 'date_start_to', 'date_end_from', 'date_end_to', 'avail']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_coupon_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'date_start_from' in params:
            query_params.append(('date_start_from', params['date_start_from']))  # noqa: E501
        if 'date_start_to' in params:
            query_params.append(('date_start_to', params['date_start_to']))  # noqa: E501
        if 'date_end_from' in params:
            query_params.append(('date_end_from', params['date_end_from']))  # noqa: E501
        if 'date_end_to' in params:
            query_params.append(('date_end_to', params['date_end_to']))  # noqa: E501
        if 'avail' in params:
            query_params.append(('avail', params['avail']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.coupon.count.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_coupon_delete(self, id, **kwargs):  # noqa: E501
        """cart_coupon_delete  # noqa: E501

        Delete coupon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_coupon_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_coupon_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cart_coupon_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """cart_coupon_delete  # noqa: E501

        Delete coupon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_coupon_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cart_coupon_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.coupon.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_coupon_list(self, **kwargs):  # noqa: E501
        """cart_coupon_list  # noqa: E501

        Get cart coupon discounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str coupons_ids: Filter coupons by ids
        :param str store_id: Filter coupons by store id
        :param str date_start_from: Filter entity by date_start (greater or equal)
        :param str date_start_to: Filter entity by date_start (less or equal)
        :param str date_end_from: Filter entity by date_end (greater or equal)
        :param str date_end_to: Filter entity by date_end (less or equal)
        :param bool avail: Filter coupons by avail status
        :param str lang_id: Language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartCouponList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_coupon_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_coupon_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_coupon_list_with_http_info(self, **kwargs):  # noqa: E501
        """cart_coupon_list  # noqa: E501

        Get cart coupon discounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_coupon_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str coupons_ids: Filter coupons by ids
        :param str store_id: Filter coupons by store id
        :param str date_start_from: Filter entity by date_start (greater or equal)
        :param str date_start_to: Filter entity by date_start (less or equal)
        :param str date_end_from: Filter entity by date_end (greater or equal)
        :param str date_end_to: Filter entity by date_end (less or equal)
        :param bool avail: Filter coupons by avail status
        :param str lang_id: Language id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartCouponList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_cursor', 'start', 'count', 'coupons_ids', 'store_id', 'date_start_from', 'date_start_to', 'date_end_from', 'date_end_to', 'avail', 'lang_id', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_coupon_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'coupons_ids' in params:
            query_params.append(('coupons_ids', params['coupons_ids']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'date_start_from' in params:
            query_params.append(('date_start_from', params['date_start_from']))  # noqa: E501
        if 'date_start_to' in params:
            query_params.append(('date_start_to', params['date_start_to']))  # noqa: E501
        if 'date_end_from' in params:
            query_params.append(('date_end_from', params['date_end_from']))  # noqa: E501
        if 'date_end_to' in params:
            query_params.append(('date_end_to', params['date_end_to']))  # noqa: E501
        if 'avail' in params:
            query_params.append(('avail', params['avail']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.coupon.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseCartCouponList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_create(self, cart_id, store_url, store_id, **kwargs):  # noqa: E501
        """cart_create  # noqa: E501

        Add store to the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_create(cart_id, store_url, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cart_id: Store’s identifier which you can get from cart_list method (required)
        :param str store_url: A web address of a store that you would like to connect to API2Cart (required)
        :param str store_id: Store Id (required)
        :param str bridge_url: This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
        :param str store_root: Absolute path to the store root directory (used with \"bridge_url\" parameter)
        :param str store_key: Set this parameter if bridge is already uploaded to store
        :param str shared_secret: Shared secret
        :param bool validate_version: Specify if api2cart should validate cart version
        :param bool verify: Enables or disables cart's verification
        :param str db_tables_prefix: DB tables prefix
        :param str ftp_host: FTP connection host
        :param str ftp_user: FTP User
        :param str ftp_password: FTP Password
        :param int ftp_port: FTP Port
        :param str ftp_store_dir: FTP Store dir
        :param str api_key_3dcart: 3DCart API Key
        :param str admin_account: It's a BigCommerce account for which API is enabled
        :param str api_path: BigCommerce API URL
        :param str api_key: Bigcommerce API Key
        :param str client_id: Client ID of the requesting app
        :param str access_token: Access token authorizing the app to access resources on behalf of a user
        :param str context: API Path section unique to the store
        :param str access_token2: Access token authorizing the app to access resources on behalf of a user
        :param str api_key_shopify: Shopify API Key
        :param str api_password: Shopify API Password
        :param str access_token_shopify: Access token authorizing the app to access resources on behalf of a user
        :param str api_key2: Neto API Key
        :param str api_username: Neto User Name
        :param str encrypted_password: Volusion API Password
        :param str login: It's a Volusion account for which API is enabled
        :param str api_user_adnsf: It's a AspDotNetStorefront account for which API is available
        :param str api_pass: AspDotNetStorefront API Password
        :param str access_key_scelite: Shopping Cart Elite Access Key
        :param str api_key_scelite: Shopping Cart Elite API Key
        :param str api_secret_key_scelite: Shopping Cart Elite API Secret Key
        :param str private_key: 3DCart Application Private Key
        :param str app_token: 3DCart Token from Application
        :param str etsy_keystring: Etsy keystring
        :param str etsy_shared_secret: Etsy shared secret
        :param str token_secret: Secret token authorizing the app to access resources on behalf of a user
        :param str ebay_client_id: Application ID (AppID).
        :param str ebay_client_secret: Shared Secret from eBay application
        :param str ebay_runame: The RuName value that eBay assigns to your application.
        :param str ebay_access_token: Used to authenticate API requests.
        :param str ebay_refresh_token: Used to renew the access token.
        :param str ebay_environment: eBay environment
        :param int ebay_site_id: eBay global ID
        :param str dw_client_id: Demandware client id
        :param str dw_api_pass: Demandware api password
        :param str demandware_user_name: Demandware user name
        :param str demandware_user_password: Demandware user password
        :param str seller_id: Seller Id
        :param str amazon_secret_key: Amazon Secret Key
        :param str amazon_access_key_id: Amazon Secret Key Id
        :param str marketplaces_ids: Comma separated marketplaces ids
        :param str environment: 
        :param str hybris_client_id: Omni Commerce Connector Client ID
        :param str hybris_client_secret: Omni Commerce Connector Client Secret
        :param str hybris_username: User Name
        :param str hybris_password: User password
        :param list[str] hybris_websites: Websites to stores mapping data
        :param str walmart_client_id: Walmart client ID
        :param str walmart_client_secret: Walmart client secret
        :param str walmart_environment: Walmart environment
        :param str walmart_channel_type: Walmart WM_CONSUMER.CHANNEL.TYPE header
        :param str lightspeed_api_key: LightSpeed api key
        :param str lightspeed_api_secret: LightSpeed api secret
        :param str shopware_api_key: Shopware api key
        :param str shopware_api_secret: Shopware client secret access key
        :param str commercehq_api_key: CommerceHQ api key
        :param str commercehq_api_password: CommerceHQ api password
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_create_with_http_info(cart_id, store_url, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_create_with_http_info(cart_id, store_url, store_id, **kwargs)  # noqa: E501
            return data

    def cart_create_with_http_info(self, cart_id, store_url, store_id, **kwargs):  # noqa: E501
        """cart_create  # noqa: E501

        Add store to the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_create_with_http_info(cart_id, store_url, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cart_id: Store’s identifier which you can get from cart_list method (required)
        :param str store_url: A web address of a store that you would like to connect to API2Cart (required)
        :param str store_id: Store Id (required)
        :param str bridge_url: This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
        :param str store_root: Absolute path to the store root directory (used with \"bridge_url\" parameter)
        :param str store_key: Set this parameter if bridge is already uploaded to store
        :param str shared_secret: Shared secret
        :param bool validate_version: Specify if api2cart should validate cart version
        :param bool verify: Enables or disables cart's verification
        :param str db_tables_prefix: DB tables prefix
        :param str ftp_host: FTP connection host
        :param str ftp_user: FTP User
        :param str ftp_password: FTP Password
        :param int ftp_port: FTP Port
        :param str ftp_store_dir: FTP Store dir
        :param str api_key_3dcart: 3DCart API Key
        :param str admin_account: It's a BigCommerce account for which API is enabled
        :param str api_path: BigCommerce API URL
        :param str api_key: Bigcommerce API Key
        :param str client_id: Client ID of the requesting app
        :param str access_token: Access token authorizing the app to access resources on behalf of a user
        :param str context: API Path section unique to the store
        :param str access_token2: Access token authorizing the app to access resources on behalf of a user
        :param str api_key_shopify: Shopify API Key
        :param str api_password: Shopify API Password
        :param str access_token_shopify: Access token authorizing the app to access resources on behalf of a user
        :param str api_key2: Neto API Key
        :param str api_username: Neto User Name
        :param str encrypted_password: Volusion API Password
        :param str login: It's a Volusion account for which API is enabled
        :param str api_user_adnsf: It's a AspDotNetStorefront account for which API is available
        :param str api_pass: AspDotNetStorefront API Password
        :param str access_key_scelite: Shopping Cart Elite Access Key
        :param str api_key_scelite: Shopping Cart Elite API Key
        :param str api_secret_key_scelite: Shopping Cart Elite API Secret Key
        :param str private_key: 3DCart Application Private Key
        :param str app_token: 3DCart Token from Application
        :param str etsy_keystring: Etsy keystring
        :param str etsy_shared_secret: Etsy shared secret
        :param str token_secret: Secret token authorizing the app to access resources on behalf of a user
        :param str ebay_client_id: Application ID (AppID).
        :param str ebay_client_secret: Shared Secret from eBay application
        :param str ebay_runame: The RuName value that eBay assigns to your application.
        :param str ebay_access_token: Used to authenticate API requests.
        :param str ebay_refresh_token: Used to renew the access token.
        :param str ebay_environment: eBay environment
        :param int ebay_site_id: eBay global ID
        :param str dw_client_id: Demandware client id
        :param str dw_api_pass: Demandware api password
        :param str demandware_user_name: Demandware user name
        :param str demandware_user_password: Demandware user password
        :param str seller_id: Seller Id
        :param str amazon_secret_key: Amazon Secret Key
        :param str amazon_access_key_id: Amazon Secret Key Id
        :param str marketplaces_ids: Comma separated marketplaces ids
        :param str environment: 
        :param str hybris_client_id: Omni Commerce Connector Client ID
        :param str hybris_client_secret: Omni Commerce Connector Client Secret
        :param str hybris_username: User Name
        :param str hybris_password: User password
        :param list[str] hybris_websites: Websites to stores mapping data
        :param str walmart_client_id: Walmart client ID
        :param str walmart_client_secret: Walmart client secret
        :param str walmart_environment: Walmart environment
        :param str walmart_channel_type: Walmart WM_CONSUMER.CHANNEL.TYPE header
        :param str lightspeed_api_key: LightSpeed api key
        :param str lightspeed_api_secret: LightSpeed api secret
        :param str shopware_api_key: Shopware api key
        :param str shopware_api_secret: Shopware client secret access key
        :param str commercehq_api_key: CommerceHQ api key
        :param str commercehq_api_password: CommerceHQ api password
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cart_id', 'store_url', 'store_id', 'bridge_url', 'store_root', 'store_key', 'shared_secret', 'validate_version', 'verify', 'db_tables_prefix', 'ftp_host', 'ftp_user', 'ftp_password', 'ftp_port', 'ftp_store_dir', 'api_key_3dcart', 'admin_account', 'api_path', 'api_key', 'client_id', 'access_token', 'context', 'access_token2', 'api_key_shopify', 'api_password', 'access_token_shopify', 'api_key2', 'api_username', 'encrypted_password', 'login', 'api_user_adnsf', 'api_pass', 'access_key_scelite', 'api_key_scelite', 'api_secret_key_scelite', 'private_key', 'app_token', 'etsy_keystring', 'etsy_shared_secret', 'token_secret', 'ebay_client_id', 'ebay_client_secret', 'ebay_runame', 'ebay_access_token', 'ebay_refresh_token', 'ebay_environment', 'ebay_site_id', 'dw_client_id', 'dw_api_pass', 'demandware_user_name', 'demandware_user_password', 'seller_id', 'amazon_secret_key', 'amazon_access_key_id', 'marketplaces_ids', 'environment', 'hybris_client_id', 'hybris_client_secret', 'hybris_username', 'hybris_password', 'hybris_websites', 'walmart_client_id', 'walmart_client_secret', 'walmart_environment', 'walmart_channel_type', 'lightspeed_api_key', 'lightspeed_api_secret', 'shopware_api_key', 'shopware_api_secret', 'commercehq_api_key', 'commercehq_api_password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cart_id' is set
        if ('cart_id' not in params or
                params['cart_id'] is None):
            raise ValueError("Missing the required parameter `cart_id` when calling `cart_create`")  # noqa: E501
        # verify the required parameter 'store_url' is set
        if ('store_url' not in params or
                params['store_url'] is None):
            raise ValueError("Missing the required parameter `store_url` when calling `cart_create`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `cart_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cart_id' in params:
            query_params.append(('cart_id', params['cart_id']))  # noqa: E501
        if 'store_url' in params:
            query_params.append(('store_url', params['store_url']))  # noqa: E501
        if 'bridge_url' in params:
            query_params.append(('bridge_url', params['bridge_url']))  # noqa: E501
        if 'store_root' in params:
            query_params.append(('store_root', params['store_root']))  # noqa: E501
        if 'store_key' in params:
            query_params.append(('store_key', params['store_key']))  # noqa: E501
        if 'shared_secret' in params:
            query_params.append(('shared_secret', params['shared_secret']))  # noqa: E501
        if 'validate_version' in params:
            query_params.append(('validate_version', params['validate_version']))  # noqa: E501
        if 'verify' in params:
            query_params.append(('verify', params['verify']))  # noqa: E501
        if 'db_tables_prefix' in params:
            query_params.append(('db_tables_prefix', params['db_tables_prefix']))  # noqa: E501
        if 'ftp_host' in params:
            query_params.append(('ftp_host', params['ftp_host']))  # noqa: E501
        if 'ftp_user' in params:
            query_params.append(('ftp_user', params['ftp_user']))  # noqa: E501
        if 'ftp_password' in params:
            query_params.append(('ftp_password', params['ftp_password']))  # noqa: E501
        if 'ftp_port' in params:
            query_params.append(('ftp_port', params['ftp_port']))  # noqa: E501
        if 'ftp_store_dir' in params:
            query_params.append(('ftp_store_dir', params['ftp_store_dir']))  # noqa: E501
        if 'api_key_3dcart' in params:
            query_params.append(('apiKey_3dcart', params['api_key_3dcart']))  # noqa: E501
        if 'admin_account' in params:
            query_params.append(('AdminAccount', params['admin_account']))  # noqa: E501
        if 'api_path' in params:
            query_params.append(('ApiPath', params['api_path']))  # noqa: E501
        if 'api_key' in params:
            query_params.append(('ApiKey', params['api_key']))  # noqa: E501
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))  # noqa: E501
        if 'access_token' in params:
            query_params.append(('accessToken', params['access_token']))  # noqa: E501
        if 'context' in params:
            query_params.append(('context', params['context']))  # noqa: E501
        if 'access_token2' in params:
            query_params.append(('access_token', params['access_token2']))  # noqa: E501
        if 'api_key_shopify' in params:
            query_params.append(('apiKey_shopify', params['api_key_shopify']))  # noqa: E501
        if 'api_password' in params:
            query_params.append(('apiPassword', params['api_password']))  # noqa: E501
        if 'access_token_shopify' in params:
            query_params.append(('accessToken_shopify', params['access_token_shopify']))  # noqa: E501
        if 'api_key2' in params:
            query_params.append(('apiKey', params['api_key2']))  # noqa: E501
        if 'api_username' in params:
            query_params.append(('apiUsername', params['api_username']))  # noqa: E501
        if 'encrypted_password' in params:
            query_params.append(('EncryptedPassword', params['encrypted_password']))  # noqa: E501
        if 'login' in params:
            query_params.append(('Login', params['login']))  # noqa: E501
        if 'api_user_adnsf' in params:
            query_params.append(('apiUser_adnsf', params['api_user_adnsf']))  # noqa: E501
        if 'api_pass' in params:
            query_params.append(('apiPass', params['api_pass']))  # noqa: E501
        if 'access_key_scelite' in params:
            query_params.append(('accessKey_scelite', params['access_key_scelite']))  # noqa: E501
        if 'api_key_scelite' in params:
            query_params.append(('apiKey_scelite', params['api_key_scelite']))  # noqa: E501
        if 'api_secret_key_scelite' in params:
            query_params.append(('apiSecretKey_scelite', params['api_secret_key_scelite']))  # noqa: E501
        if 'private_key' in params:
            query_params.append(('privateKey', params['private_key']))  # noqa: E501
        if 'app_token' in params:
            query_params.append(('appToken', params['app_token']))  # noqa: E501
        if 'etsy_keystring' in params:
            query_params.append(('etsy_keystring', params['etsy_keystring']))  # noqa: E501
        if 'etsy_shared_secret' in params:
            query_params.append(('etsy_shared_secret', params['etsy_shared_secret']))  # noqa: E501
        if 'token_secret' in params:
            query_params.append(('tokenSecret', params['token_secret']))  # noqa: E501
        if 'ebay_client_id' in params:
            query_params.append(('ebay_client_id', params['ebay_client_id']))  # noqa: E501
        if 'ebay_client_secret' in params:
            query_params.append(('ebay_client_secret', params['ebay_client_secret']))  # noqa: E501
        if 'ebay_runame' in params:
            query_params.append(('ebay_runame', params['ebay_runame']))  # noqa: E501
        if 'ebay_access_token' in params:
            query_params.append(('ebay_access_token', params['ebay_access_token']))  # noqa: E501
        if 'ebay_refresh_token' in params:
            query_params.append(('ebay_refresh_token', params['ebay_refresh_token']))  # noqa: E501
        if 'ebay_environment' in params:
            query_params.append(('ebay_environment', params['ebay_environment']))  # noqa: E501
        if 'ebay_site_id' in params:
            query_params.append(('ebay_site_id', params['ebay_site_id']))  # noqa: E501
        if 'dw_client_id' in params:
            query_params.append(('dw_client_id', params['dw_client_id']))  # noqa: E501
        if 'dw_api_pass' in params:
            query_params.append(('dw_api_pass', params['dw_api_pass']))  # noqa: E501
        if 'demandware_user_name' in params:
            query_params.append(('demandware_user_name', params['demandware_user_name']))  # noqa: E501
        if 'demandware_user_password' in params:
            query_params.append(('demandware_user_password', params['demandware_user_password']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'seller_id' in params:
            query_params.append(('seller_id', params['seller_id']))  # noqa: E501
        if 'amazon_secret_key' in params:
            query_params.append(('amazon_secret_key', params['amazon_secret_key']))  # noqa: E501
        if 'amazon_access_key_id' in params:
            query_params.append(('amazon_access_key_id', params['amazon_access_key_id']))  # noqa: E501
        if 'marketplaces_ids' in params:
            query_params.append(('marketplaces_ids', params['marketplaces_ids']))  # noqa: E501
        if 'environment' in params:
            query_params.append(('environment', params['environment']))  # noqa: E501
        if 'hybris_client_id' in params:
            query_params.append(('hybris_client_id', params['hybris_client_id']))  # noqa: E501
        if 'hybris_client_secret' in params:
            query_params.append(('hybris_client_secret', params['hybris_client_secret']))  # noqa: E501
        if 'hybris_username' in params:
            query_params.append(('hybris_username', params['hybris_username']))  # noqa: E501
        if 'hybris_password' in params:
            query_params.append(('hybris_password', params['hybris_password']))  # noqa: E501
        if 'hybris_websites' in params:
            query_params.append(('hybris_websites', params['hybris_websites']))  # noqa: E501
            collection_formats['hybris_websites'] = 'csv'  # noqa: E501
        if 'walmart_client_id' in params:
            query_params.append(('walmart_client_id', params['walmart_client_id']))  # noqa: E501
        if 'walmart_client_secret' in params:
            query_params.append(('walmart_client_secret', params['walmart_client_secret']))  # noqa: E501
        if 'walmart_environment' in params:
            query_params.append(('walmart_environment', params['walmart_environment']))  # noqa: E501
        if 'walmart_channel_type' in params:
            query_params.append(('walmart_channel_type', params['walmart_channel_type']))  # noqa: E501
        if 'lightspeed_api_key' in params:
            query_params.append(('lightspeed_api_key', params['lightspeed_api_key']))  # noqa: E501
        if 'lightspeed_api_secret' in params:
            query_params.append(('lightspeed_api_secret', params['lightspeed_api_secret']))  # noqa: E501
        if 'shopware_api_key' in params:
            query_params.append(('shopware_api_key', params['shopware_api_key']))  # noqa: E501
        if 'shopware_api_secret' in params:
            query_params.append(('shopware_api_secret', params['shopware_api_secret']))  # noqa: E501
        if 'commercehq_api_key' in params:
            query_params.append(('commercehq_api_key', params['commercehq_api_key']))  # noqa: E501
        if 'commercehq_api_password' in params:
            query_params.append(('commercehq_api_password', params['commercehq_api_password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.create.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_delete(self, **kwargs):  # noqa: E501
        """cart_delete  # noqa: E501

        Remove store from API2Cart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool delete_bridge: Identifies if there is a necessity to delete bridge
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_delete_with_http_info(self, **kwargs):  # noqa: E501
        """cart_delete  # noqa: E501

        Remove store from API2Cart  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool delete_bridge: Identifies if there is a necessity to delete bridge
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_bridge']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'delete_bridge' in params:
            query_params.append(('delete_bridge', params['delete_bridge']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_disconnect(self, **kwargs):  # noqa: E501
        """cart_disconnect  # noqa: E501

        Disconnect with the store and clear store session data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_disconnect(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool delete_bridge: Identifies if there is a necessity to delete bridge
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_disconnect_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_disconnect_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_disconnect_with_http_info(self, **kwargs):  # noqa: E501
        """cart_disconnect  # noqa: E501

        Disconnect with the store and clear store session data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_disconnect_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool delete_bridge: Identifies if there is a necessity to delete bridge
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_bridge']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_disconnect" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'delete_bridge' in params:
            query_params.append(('delete_bridge', params['delete_bridge']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.disconnect.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_giftcard_add(self, amount, **kwargs):  # noqa: E501
        """cart_giftcard_add  # noqa: E501

        Create new gift card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_giftcard_add(amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float amount: Defines the gift card amount value. (required)
        :param str code: Gift card code
        :param str owner_email: Gift card owner email
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_giftcard_add_with_http_info(amount, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_giftcard_add_with_http_info(amount, **kwargs)  # noqa: E501
            return data

    def cart_giftcard_add_with_http_info(self, amount, **kwargs):  # noqa: E501
        """cart_giftcard_add  # noqa: E501

        Create new gift card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_giftcard_add_with_http_info(amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float amount: Defines the gift card amount value. (required)
        :param str code: Gift card code
        :param str owner_email: Gift card owner email
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amount', 'code', 'owner_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_giftcard_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `cart_giftcard_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'owner_email' in params:
            query_params.append(('owner_email', params['owner_email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.giftcard.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_giftcard_count(self, **kwargs):  # noqa: E501
        """cart_giftcard_count  # noqa: E501

        Get gift cards count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_giftcard_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: Store Id
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_giftcard_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_giftcard_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_giftcard_count_with_http_info(self, **kwargs):  # noqa: E501
        """cart_giftcard_count  # noqa: E501

        Get gift cards count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_giftcard_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: Store Id
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_giftcard_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.giftcard.count.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_giftcard_list(self, **kwargs):  # noqa: E501
        """cart_giftcard_list  # noqa: E501

        Get gift cards list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_giftcard_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str store_id: Store Id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartGiftCardList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_giftcard_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_giftcard_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_giftcard_list_with_http_info(self, **kwargs):  # noqa: E501
        """cart_giftcard_list  # noqa: E501

        Get gift cards list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_giftcard_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str store_id: Store Id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartGiftCardList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_cursor', 'start', 'count', 'store_id', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_giftcard_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.giftcard.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseCartGiftCardList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_info(self, **kwargs):  # noqa: E501
        """cart_info  # noqa: E501

        Get cart information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Store Id
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_info_with_http_info(self, **kwargs):  # noqa: E501
        """cart_info  # noqa: E501

        Get cart information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Store Id
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['params', 'exclude', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.info.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_list(self, **kwargs):  # noqa: E501
        """cart_list  # noqa: E501

        Get list of supported carts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_list_with_http_info(self, **kwargs):  # noqa: E501
        """cart_list  # noqa: E501

        Get list of supported carts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_meta_data_list(self, entity_id, **kwargs):  # noqa: E501
        """cart_meta_data_list  # noqa: E501

        Get entity meta data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_meta_data_list(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity Id (required)
        :param str entity: Entity
        :param str store_id: Store Id
        :param str key: Key
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartMetaDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_meta_data_list_with_http_info(entity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_meta_data_list_with_http_info(entity_id, **kwargs)  # noqa: E501
            return data

    def cart_meta_data_list_with_http_info(self, entity_id, **kwargs):  # noqa: E501
        """cart_meta_data_list  # noqa: E501

        Get entity meta data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_meta_data_list_with_http_info(entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity Id (required)
        :param str entity: Entity
        :param str store_id: Store Id
        :param str key: Key
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartMetaDataList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'entity', 'store_id', 'key', 'count', 'page_cursor', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_meta_data_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `cart_meta_data_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entity_id', params['entity_id']))  # noqa: E501
        if 'entity' in params:
            query_params.append(('entity', params['entity']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.meta_data.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseCartMetaDataList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_meta_data_set(self, entity_id, key, value, **kwargs):  # noqa: E501
        """cart_meta_data_set  # noqa: E501

        Set meta data for a specific entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_meta_data_set(entity_id, key, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity Id (required)
        :param str key: Key (required)
        :param str value: Value (required)
        :param str entity: Entity
        :param str store_id: Store Id
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_meta_data_set_with_http_info(entity_id, key, value, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_meta_data_set_with_http_info(entity_id, key, value, **kwargs)  # noqa: E501
            return data

    def cart_meta_data_set_with_http_info(self, entity_id, key, value, **kwargs):  # noqa: E501
        """cart_meta_data_set  # noqa: E501

        Set meta data for a specific entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_meta_data_set_with_http_info(entity_id, key, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity Id (required)
        :param str key: Key (required)
        :param str value: Value (required)
        :param str entity: Entity
        :param str store_id: Store Id
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'key', 'value', 'entity', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_meta_data_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `cart_meta_data_set`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `cart_meta_data_set`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `cart_meta_data_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entity_id', params['entity_id']))  # noqa: E501
        if 'entity' in params:
            query_params.append(('entity', params['entity']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.meta_data.set.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_meta_data_unset(self, entity_id, key, **kwargs):  # noqa: E501
        """cart_meta_data_unset  # noqa: E501

        Unset meta data for a specific entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_meta_data_unset(entity_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity Id (required)
        :param str key: Key (required)
        :param str entity: Entity
        :param str store_id: Store Id
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_meta_data_unset_with_http_info(entity_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_meta_data_unset_with_http_info(entity_id, key, **kwargs)  # noqa: E501
            return data

    def cart_meta_data_unset_with_http_info(self, entity_id, key, **kwargs):  # noqa: E501
        """cart_meta_data_unset  # noqa: E501

        Unset meta data for a specific entity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_meta_data_unset_with_http_info(entity_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_id: Entity Id (required)
        :param str key: Key (required)
        :param str entity: Entity
        :param str store_id: Store Id
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_id', 'key', 'entity', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_meta_data_unset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `cart_meta_data_unset`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `cart_meta_data_unset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entity_id', params['entity_id']))  # noqa: E501
        if 'entity' in params:
            query_params.append(('entity', params['entity']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.meta_data.unset.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_methods(self, **kwargs):  # noqa: E501
        """cart_methods  # noqa: E501

        Get list of cart methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_methods(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_methods_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_methods_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_methods_with_http_info(self, **kwargs):  # noqa: E501
        """cart_methods  # noqa: E501

        Get list of cart methods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_methods_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_methods" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.methods.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_plugin_list(self, **kwargs):  # noqa: E501
        """cart_plugin_list  # noqa: E501

        Get list of installed plugins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_plugin_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_key: Set this parameter if bridge is already uploaded to store
        :param str store_id: Store Id
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_plugin_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_plugin_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_plugin_list_with_http_info(self, **kwargs):  # noqa: E501
        """cart_plugin_list  # noqa: E501

        Get list of installed plugins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_plugin_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_key: Set this parameter if bridge is already uploaded to store
        :param str store_id: Store Id
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_key', 'store_id', 'start', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_plugin_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_key' in params:
            query_params.append(('store_key', params['store_key']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.plugin.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_script_add(self, **kwargs):  # noqa: E501
        """cart_script_add  # noqa: E501

        Add new script to the storefront  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_script_add(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The user-friendly script name
        :param str description: The user-friendly description
        :param str html: An html string containing exactly one `script` tag.
        :param str src: The URL of the remote script
        :param str load_method: The load method to use for the script
        :param str scope: The page or pages on the online store where the script should be included
        :param str store_id: Store Id
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_script_add_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_script_add_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_script_add_with_http_info(self, **kwargs):  # noqa: E501
        """cart_script_add  # noqa: E501

        Add new script to the storefront  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_script_add_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The user-friendly script name
        :param str description: The user-friendly description
        :param str html: An html string containing exactly one `script` tag.
        :param str src: The URL of the remote script
        :param str load_method: The load method to use for the script
        :param str scope: The page or pages on the online store where the script should be included
        :param str store_id: Store Id
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'html', 'src', 'load_method', 'scope', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_script_add" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'html' in params:
            query_params.append(('html', params['html']))  # noqa: E501
        if 'src' in params:
            query_params.append(('src', params['src']))  # noqa: E501
        if 'load_method' in params:
            query_params.append(('load_method', params['load_method']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.script.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_script_delete(self, id, **kwargs):  # noqa: E501
        """cart_script_delete  # noqa: E501

        Remove script from the storefront  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_script_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_script_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_script_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cart_script_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """cart_script_delete  # noqa: E501

        Remove script from the storefront  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_script_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_script_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cart_script_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.script.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_script_list(self, **kwargs):  # noqa: E501
        """cart_script_list  # noqa: E501

        Get scripts installed to the storefront  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_script_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str script_ids: Retrieves only scripts with specific ids
        :param str store_id: Store Id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartScriptList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_script_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_script_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_script_list_with_http_info(self, **kwargs):  # noqa: E501
        """cart_script_list  # noqa: E501

        Get scripts installed to the storefront  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_script_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str script_ids: Retrieves only scripts with specific ids
        :param str store_id: Store Id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseCartScriptList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_cursor', 'start', 'count', 'created_from', 'created_to', 'modified_from', 'modified_to', 'script_ids', 'store_id', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_script_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'script_ids' in params:
            query_params.append(('script_ids', params['script_ids']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.script.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseCartScriptList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_shipping_zones_list(self, **kwargs):  # noqa: E501
        """cart_shipping_zones_list  # noqa: E501

        Get list of shipping zones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_shipping_zones_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: Store Id
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_shipping_zones_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_shipping_zones_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_shipping_zones_list_with_http_info(self, **kwargs):  # noqa: E501
        """cart_shipping_zones_list  # noqa: E501

        Get list of shipping zones  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_shipping_zones_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: Store Id
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_shipping_zones_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.shipping_zones.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_validate(self, **kwargs):  # noqa: E501
        """cart_validate  # noqa: E501

        Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_validate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool validate_version: Specify if api2cart should validate cart version
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_validate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cart_validate_with_http_info(**kwargs)  # noqa: E501
            return data

    def cart_validate_with_http_info(self, **kwargs):  # noqa: E501
        """cart_validate  # noqa: E501

        Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_validate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool validate_version: Specify if api2cart should validate cart version
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['validate_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_validate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate_version' in params:
            query_params.append(('validate_version', params['validate_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/cart.validate.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
