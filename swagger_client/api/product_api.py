# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProductApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def product_add(self, body, **kwargs):  # noqa: E501
        """product_add  # noqa: E501

        Add new product to store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductAdd body: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.product_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def product_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """product_add  # noqa: E501

        Add new product to store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductAdd body: (required)
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_attribute_list(self, product_id, **kwargs):  # noqa: E501
        """product_attribute_list  # noqa: E501

        Get list of attributes and values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_attribute_list(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Retrieves attributes specified by product id (required)
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str variant_id: Defines product's variants specified by variant id
        :param str attribute_id: Retrieves info for specified attribute_id
        :param str attribute_group_id: Filter by attribute_group_id
        :param str set_name: Retrieves attributes specified by set_name in Magento
        :param str lang_id: Retrieves attributes specified by language id
        :param str store_id: Retrieves attributes specified by store id
        :param str sort_by: Set field to sort by
        :param str sort_direction: Set sorting direction
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseProductAttributeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_attribute_list_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_attribute_list_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def product_attribute_list_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """product_attribute_list  # noqa: E501

        Get list of attributes and values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_attribute_list_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Retrieves attributes specified by product id (required)
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str variant_id: Defines product's variants specified by variant id
        :param str attribute_id: Retrieves info for specified attribute_id
        :param str attribute_group_id: Filter by attribute_group_id
        :param str set_name: Retrieves attributes specified by set_name in Magento
        :param str lang_id: Retrieves attributes specified by language id
        :param str store_id: Retrieves attributes specified by store id
        :param str sort_by: Set field to sort by
        :param str sort_direction: Set sorting direction
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseProductAttributeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'page_cursor', 'start', 'count', 'variant_id', 'attribute_id', 'attribute_group_id', 'set_name', 'lang_id', 'store_id', 'sort_by', 'sort_direction', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_attribute_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_attribute_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'variant_id' in params:
            query_params.append(('variant_id', params['variant_id']))  # noqa: E501
        if 'attribute_id' in params:
            query_params.append(('attribute_id', params['attribute_id']))  # noqa: E501
        if 'attribute_group_id' in params:
            query_params.append(('attribute_group_id', params['attribute_group_id']))  # noqa: E501
        if 'set_name' in params:
            query_params.append(('set_name', params['set_name']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sort_direction', params['sort_direction']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.attribute.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseProductAttributeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_attribute_value_set(self, product_id, **kwargs):  # noqa: E501
        """product_attribute_value_set  # noqa: E501

        Set attribute value to product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_attribute_value_set(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the attribute should be added (required)
        :param str attribute_id: Filter by attribute_id
        :param str attribute_group_id: Filter by attribute_group_id
        :param str attribute_name: Define attribute name
        :param str value: Define attribute value
        :param int value_id: Define attribute value id
        :param str lang_id: Language id
        :param str store_id: Store Id
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_attribute_value_set_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_attribute_value_set_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def product_attribute_value_set_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """product_attribute_value_set  # noqa: E501

        Set attribute value to product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_attribute_value_set_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the attribute should be added (required)
        :param str attribute_id: Filter by attribute_id
        :param str attribute_group_id: Filter by attribute_group_id
        :param str attribute_name: Define attribute name
        :param str value: Define attribute value
        :param int value_id: Define attribute value id
        :param str lang_id: Language id
        :param str store_id: Store Id
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'attribute_id', 'attribute_group_id', 'attribute_name', 'value', 'value_id', 'lang_id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_attribute_value_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_attribute_value_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'attribute_id' in params:
            query_params.append(('attribute_id', params['attribute_id']))  # noqa: E501
        if 'attribute_group_id' in params:
            query_params.append(('attribute_group_id', params['attribute_group_id']))  # noqa: E501
        if 'attribute_name' in params:
            query_params.append(('attribute_name', params['attribute_name']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'value_id' in params:
            query_params.append(('value_id', params['value_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.attribute.value.set.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20068',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_attribute_value_unset(self, product_id, attribute_id, **kwargs):  # noqa: E501
        """product_attribute_value_unset  # noqa: E501

        Removes attribute value for a product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_attribute_value_unset(product_id, attribute_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Product id (required)
        :param str attribute_id: Attribute Id (required)
        :param str store_id: Store Id
        :param bool include_default: Boolean, whether or not to unset default value of the attribute, if applicable
        :param bool reindex: Is reindex required
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_attribute_value_unset_with_http_info(product_id, attribute_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_attribute_value_unset_with_http_info(product_id, attribute_id, **kwargs)  # noqa: E501
            return data

    def product_attribute_value_unset_with_http_info(self, product_id, attribute_id, **kwargs):  # noqa: E501
        """product_attribute_value_unset  # noqa: E501

        Removes attribute value for a product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_attribute_value_unset_with_http_info(product_id, attribute_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Product id (required)
        :param str attribute_id: Attribute Id (required)
        :param str store_id: Store Id
        :param bool include_default: Boolean, whether or not to unset default value of the attribute, if applicable
        :param bool reindex: Is reindex required
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'attribute_id', 'store_id', 'include_default', 'reindex', 'clear_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_attribute_value_unset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_attribute_value_unset`")  # noqa: E501
        # verify the required parameter 'attribute_id' is set
        if ('attribute_id' not in params or
                params['attribute_id'] is None):
            raise ValueError("Missing the required parameter `attribute_id` when calling `product_attribute_value_unset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'attribute_id' in params:
            query_params.append(('attribute_id', params['attribute_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'include_default' in params:
            query_params.append(('include_default', params['include_default']))  # noqa: E501
        if 'reindex' in params:
            query_params.append(('reindex', params['reindex']))  # noqa: E501
        if 'clear_cache' in params:
            query_params.append(('clear_cache', params['clear_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.attribute.value.unset.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20069',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_brand_list(self, **kwargs):  # noqa: E501
        """product_brand_list  # noqa: E501

        Get list of brands from your store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_brand_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str brand_ids: Retrieves brands specified by brand ids
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_brand_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_brand_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_brand_list_with_http_info(self, **kwargs):  # noqa: E501
        """product_brand_list  # noqa: E501

        Get list of brands from your store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_brand_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str brand_ids: Retrieves brands specified by brand ids
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'params', 'brand_ids', 'exclude', 'store_id', 'lang_id', 'created_from', 'created_to', 'modified_from', 'modified_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_brand_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'brand_ids' in params:
            query_params.append(('brand_ids', params['brand_ids']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.brand.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20083',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_child_item_find(self, find_value, **kwargs):  # noqa: E501
        """product_child_item_find  # noqa: E501

        Search product child item (bundled item or configurable product variant) in store catalog.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_child_item_find(find_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str find_value: Entity search that is specified by some value (required)
        :param str find_where: Entity search that is specified by the comma-separated unique fields
        :param str find_params: Entity search that is specified by comma-separated parameters
        :param str store_id: Store Id
        :return: InlineResponse20078
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_child_item_find_with_http_info(find_value, **kwargs)  # noqa: E501
        else:
            (data) = self.product_child_item_find_with_http_info(find_value, **kwargs)  # noqa: E501
            return data

    def product_child_item_find_with_http_info(self, find_value, **kwargs):  # noqa: E501
        """product_child_item_find  # noqa: E501

        Search product child item (bundled item or configurable product variant) in store catalog.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_child_item_find_with_http_info(find_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str find_value: Entity search that is specified by some value (required)
        :param str find_where: Entity search that is specified by the comma-separated unique fields
        :param str find_params: Entity search that is specified by comma-separated parameters
        :param str store_id: Store Id
        :return: InlineResponse20078
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['find_value', 'find_where', 'find_params', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_child_item_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'find_value' is set
        if ('find_value' not in params or
                params['find_value'] is None):
            raise ValueError("Missing the required parameter `find_value` when calling `product_child_item_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'find_value' in params:
            query_params.append(('find_value', params['find_value']))  # noqa: E501
        if 'find_where' in params:
            query_params.append(('find_where', params['find_where']))  # noqa: E501
        if 'find_params' in params:
            query_params.append(('find_params', params['find_params']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.child_item.find.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20078',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_child_item_info(self, product_id, id, **kwargs):  # noqa: E501
        """product_child_item_info  # noqa: E501

        Get child for specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_child_item_info(product_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Filter by parent product id (required)
        :param str id: Entity id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Store Id
        :param str lang_id: Language id
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_child_item_info_with_http_info(product_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_child_item_info_with_http_info(product_id, id, **kwargs)  # noqa: E501
            return data

    def product_child_item_info_with_http_info(self, product_id, id, **kwargs):  # noqa: E501
        """product_child_item_info  # noqa: E501

        Get child for specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_child_item_info_with_http_info(product_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Filter by parent product id (required)
        :param str id: Entity id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Store Id
        :param str lang_id: Language id
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'id', 'params', 'exclude', 'store_id', 'lang_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_child_item_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_child_item_info`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_child_item_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.child_item.info.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_child_item_list(self, **kwargs):  # noqa: E501
        """product_child_item_list  # noqa: E501

        Get child items list of specific product(s).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_child_item_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str product_id: Filter by parent product id
        :param str product_ids: Filter by parent product ids
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str currency_id: Currency Id
        :param bool avail_sale: Specifies the set of available/not available products for sale
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :return: ModelResponseProductChildItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_child_item_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_child_item_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_child_item_list_with_http_info(self, **kwargs):  # noqa: E501
        """product_child_item_list  # noqa: E501

        Get child items list of specific product(s).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_child_item_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str product_id: Filter by parent product id
        :param str product_ids: Filter by parent product ids
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param str currency_id: Currency Id
        :param bool avail_sale: Specifies the set of available/not available products for sale
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :return: ModelResponseProductChildItemList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_cursor', 'start', 'count', 'params', 'exclude', 'created_from', 'created_to', 'modified_from', 'modified_to', 'product_id', 'product_ids', 'store_id', 'lang_id', 'currency_id', 'avail_sale', 'report_request_id', 'disable_report_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_child_item_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'product_ids' in params:
            query_params.append(('product_ids', params['product_ids']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'currency_id' in params:
            query_params.append(('currency_id', params['currency_id']))  # noqa: E501
        if 'avail_sale' in params:
            query_params.append(('avail_sale', params['avail_sale']))  # noqa: E501
        if 'report_request_id' in params:
            query_params.append(('report_request_id', params['report_request_id']))  # noqa: E501
        if 'disable_report_cache' in params:
            query_params.append(('disable_report_cache', params['disable_report_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.child_item.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseProductChildItemList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_count(self, **kwargs):  # noqa: E501
        """product_count  # noqa: E501

        Count products in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: Counts products specified by category id
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param bool avail_view: Specifies the set of visible/invisible products
        :param bool avail_sale: Specifies the set of available/not available products for sale
        :param str store_id: Counts products specified by store id
        :param str lang_id: Counts products specified by language id
        :param str product_ids: Counts products specified by product ids
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :param str brand_name: Retrieves brands specified by brand name
        :param list[str] product_attributes: Defines product attributes
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_count_with_http_info(self, **kwargs):  # noqa: E501
        """product_count  # noqa: E501

        Count products in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: Counts products specified by category id
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param bool avail_view: Specifies the set of visible/invisible products
        :param bool avail_sale: Specifies the set of available/not available products for sale
        :param str store_id: Counts products specified by store id
        :param str lang_id: Counts products specified by language id
        :param str product_ids: Counts products specified by product ids
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :param str brand_name: Retrieves brands specified by brand name
        :param list[str] product_attributes: Defines product attributes
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'created_from', 'created_to', 'modified_from', 'modified_to', 'avail_view', 'avail_sale', 'store_id', 'lang_id', 'product_ids', 'report_request_id', 'disable_report_cache', 'brand_name', 'product_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category_id' in params:
            query_params.append(('category_id', params['category_id']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'avail_view' in params:
            query_params.append(('avail_view', params['avail_view']))  # noqa: E501
        if 'avail_sale' in params:
            query_params.append(('avail_sale', params['avail_sale']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'product_ids' in params:
            query_params.append(('product_ids', params['product_ids']))  # noqa: E501
        if 'report_request_id' in params:
            query_params.append(('report_request_id', params['report_request_id']))  # noqa: E501
        if 'disable_report_cache' in params:
            query_params.append(('disable_report_cache', params['disable_report_cache']))  # noqa: E501
        if 'brand_name' in params:
            query_params.append(('brand_name', params['brand_name']))  # noqa: E501
        if 'product_attributes' in params:
            query_params.append(('product_attributes', params['product_attributes']))  # noqa: E501
            collection_formats['product_attributes'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.count.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_currency_add(self, iso3, rate, **kwargs):  # noqa: E501
        """product_currency_add  # noqa: E501

        Add currency and/or set default in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_currency_add(iso3, rate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iso3: Specifies standardized currency code (required)
        :param float rate: Defines the numerical identifier against to the major currency (required)
        :param str name: Defines currency's name
        :param bool avail: Specifies whether the currency is available
        :param str symbol_left: Defines the symbol that is located before the currency
        :param str symbol_right: Defines the symbol that is located after the currency
        :param bool default: Specifies currency's default meaning
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_currency_add_with_http_info(iso3, rate, **kwargs)  # noqa: E501
        else:
            (data) = self.product_currency_add_with_http_info(iso3, rate, **kwargs)  # noqa: E501
            return data

    def product_currency_add_with_http_info(self, iso3, rate, **kwargs):  # noqa: E501
        """product_currency_add  # noqa: E501

        Add currency and/or set default in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_currency_add_with_http_info(iso3, rate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iso3: Specifies standardized currency code (required)
        :param float rate: Defines the numerical identifier against to the major currency (required)
        :param str name: Defines currency's name
        :param bool avail: Specifies whether the currency is available
        :param str symbol_left: Defines the symbol that is located before the currency
        :param str symbol_right: Defines the symbol that is located after the currency
        :param bool default: Specifies currency's default meaning
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iso3', 'rate', 'name', 'avail', 'symbol_left', 'symbol_right', 'default']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_currency_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iso3' is set
        if ('iso3' not in params or
                params['iso3'] is None):
            raise ValueError("Missing the required parameter `iso3` when calling `product_currency_add`")  # noqa: E501
        # verify the required parameter 'rate' is set
        if ('rate' not in params or
                params['rate'] is None):
            raise ValueError("Missing the required parameter `rate` when calling `product_currency_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'iso3' in params:
            query_params.append(('iso3', params['iso3']))  # noqa: E501
        if 'rate' in params:
            query_params.append(('rate', params['rate']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'avail' in params:
            query_params.append(('avail', params['avail']))  # noqa: E501
        if 'symbol_left' in params:
            query_params.append(('symbol_left', params['symbol_left']))  # noqa: E501
        if 'symbol_right' in params:
            query_params.append(('symbol_right', params['symbol_right']))  # noqa: E501
        if 'default' in params:
            query_params.append(('default', params['default']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.currency.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20084',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_currency_list(self, **kwargs):  # noqa: E501
        """product_currency_list  # noqa: E501

        Get list of currencies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_currency_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param bool default: Specifies the set of default/not default currencies
        :param bool avail: Specifies the set of available/not available currencies
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_currency_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_currency_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_currency_list_with_http_info(self, **kwargs):  # noqa: E501
        """product_currency_list  # noqa: E501

        Get list of currencies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_currency_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param bool default: Specifies the set of default/not default currencies
        :param bool avail: Specifies the set of available/not available currencies
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'params', 'exclude', 'default', 'avail']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_currency_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'default' in params:
            query_params.append(('default', params['default']))  # noqa: E501
        if 'avail' in params:
            query_params.append(('avail', params['avail']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.currency.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_delete(self, id, **kwargs):  # noqa: E501
        """product_delete  # noqa: E501

        Product delete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Product id that will be removed (required)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """product_delete  # noqa: E501

        Product delete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Product id that will be removed (required)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_fields(self, **kwargs):  # noqa: E501
        """product_fields  # noqa: E501

        Retrieve all available fields for product item in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_fields(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_fields_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_fields_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_fields_with_http_info(self, **kwargs):  # noqa: E501
        """product_fields  # noqa: E501

        Retrieve all available fields for product item in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_fields_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_fields" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.fields.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_find(self, find_value, **kwargs):  # noqa: E501
        """product_find  # noqa: E501

        Search product in store catalog. \"Apple\" is specified here by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_find(find_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str find_value: Entity search that is specified by some value (required)
        :param str find_where: Entity search that is specified by the comma-separated unique fields
        :param str find_params: Entity search that is specified by comma-separated parameters
        :param str find_what: Parameter's value specifies the entity that has to be found
        :param str lang_id: Search products specified by language id
        :param str store_id: Store Id
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_find_with_http_info(find_value, **kwargs)  # noqa: E501
        else:
            (data) = self.product_find_with_http_info(find_value, **kwargs)  # noqa: E501
            return data

    def product_find_with_http_info(self, find_value, **kwargs):  # noqa: E501
        """product_find  # noqa: E501

        Search product in store catalog. \"Apple\" is specified here by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_find_with_http_info(find_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str find_value: Entity search that is specified by some value (required)
        :param str find_where: Entity search that is specified by the comma-separated unique fields
        :param str find_params: Entity search that is specified by comma-separated parameters
        :param str find_what: Parameter's value specifies the entity that has to be found
        :param str lang_id: Search products specified by language id
        :param str store_id: Store Id
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['find_value', 'find_where', 'find_params', 'find_what', 'lang_id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'find_value' is set
        if ('find_value' not in params or
                params['find_value'] is None):
            raise ValueError("Missing the required parameter `find_value` when calling `product_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'find_value' in params:
            query_params.append(('find_value', params['find_value']))  # noqa: E501
        if 'find_where' in params:
            query_params.append(('find_where', params['find_where']))  # noqa: E501
        if 'find_params' in params:
            query_params.append(('find_params', params['find_params']))  # noqa: E501
        if 'find_what' in params:
            query_params.append(('find_what', params['find_what']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.find.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20034',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_image_add(self, product_id, image_name, type, **kwargs):  # noqa: E501
        """product_image_add  # noqa: E501

        Add image to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_image_add(product_id, image_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the image should be added (required)
        :param str image_name: Defines image's name (required)
        :param str type: Defines image's types that are specified by comma-separated list (required)
        :param str url: Defines URL of the image that has to be added
        :param str label: Defines alternative text that has to be attached to the picture
        :param str mime: Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
        :param int position: Defines image’s position in the list
        :param str content: Content(body) encoded in base64 of image file
        :param int product_variant_id: Defines product's variants specified by variant id
        :param str variant_ids: Defines product's variants ids
        :param str store_id: Store Id
        :param str lang_id: Add product image on specified language id
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_image_add_with_http_info(product_id, image_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.product_image_add_with_http_info(product_id, image_name, type, **kwargs)  # noqa: E501
            return data

    def product_image_add_with_http_info(self, product_id, image_name, type, **kwargs):  # noqa: E501
        """product_image_add  # noqa: E501

        Add image to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_image_add_with_http_info(product_id, image_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the image should be added (required)
        :param str image_name: Defines image's name (required)
        :param str type: Defines image's types that are specified by comma-separated list (required)
        :param str url: Defines URL of the image that has to be added
        :param str label: Defines alternative text that has to be attached to the picture
        :param str mime: Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
        :param int position: Defines image’s position in the list
        :param str content: Content(body) encoded in base64 of image file
        :param int product_variant_id: Defines product's variants specified by variant id
        :param str variant_ids: Defines product's variants ids
        :param str store_id: Store Id
        :param str lang_id: Add product image on specified language id
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'image_name', 'type', 'url', 'label', 'mime', 'position', 'content', 'product_variant_id', 'variant_ids', 'store_id', 'lang_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_image_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_image_add`")  # noqa: E501
        # verify the required parameter 'image_name' is set
        if ('image_name' not in params or
                params['image_name'] is None):
            raise ValueError("Missing the required parameter `image_name` when calling `product_image_add`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `product_image_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'image_name' in params:
            query_params.append(('image_name', params['image_name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'label' in params:
            query_params.append(('label', params['label']))  # noqa: E501
        if 'mime' in params:
            query_params.append(('mime', params['mime']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'content' in params:
            query_params.append(('content', params['content']))  # noqa: E501
        if 'product_variant_id' in params:
            query_params.append(('product_variant_id', params['product_variant_id']))  # noqa: E501
        if 'variant_ids' in params:
            query_params.append(('variant_ids', params['variant_ids']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.image.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_image_delete(self, product_id, id, **kwargs):  # noqa: E501
        """product_image_delete  # noqa: E501

        Delete image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_image_delete(product_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the image should be deleted (required)
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_image_delete_with_http_info(product_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_image_delete_with_http_info(product_id, id, **kwargs)  # noqa: E501
            return data

    def product_image_delete_with_http_info(self, product_id, id, **kwargs):  # noqa: E501
        """product_image_delete  # noqa: E501

        Delete image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_image_delete_with_http_info(product_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the image should be deleted (required)
        :param str id: Entity id (required)
        :param str store_id: Store Id
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_image_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_image_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_image_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.image.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_image_update(self, product_id, id, **kwargs):  # noqa: E501
        """product_image_update  # noqa: E501

        Update details of image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_image_update(product_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the image should be updated (required)
        :param str id: Defines image update specified by image id (required)
        :param str image_name: Defines image's name
        :param str type: Defines image's types that are specified by comma-separated list
        :param str label: Defines alternative text that has to be attached to the picture
        :param int position: Defines image’s position in the list
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param bool hidden: Define is hide image
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_image_update_with_http_info(product_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_image_update_with_http_info(product_id, id, **kwargs)  # noqa: E501
            return data

    def product_image_update_with_http_info(self, product_id, id, **kwargs):  # noqa: E501
        """product_image_update  # noqa: E501

        Update details of image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_image_update_with_http_info(product_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the image should be updated (required)
        :param str id: Defines image update specified by image id (required)
        :param str image_name: Defines image's name
        :param str type: Defines image's types that are specified by comma-separated list
        :param str label: Defines alternative text that has to be attached to the picture
        :param int position: Defines image’s position in the list
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param bool hidden: Define is hide image
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'id', 'image_name', 'type', 'label', 'position', 'store_id', 'lang_id', 'hidden']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_image_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_image_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_image_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'image_name' in params:
            query_params.append(('image_name', params['image_name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'label' in params:
            query_params.append(('label', params['label']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'hidden' in params:
            query_params.append(('hidden', params['hidden']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.image.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_info(self, id, **kwargs):  # noqa: E501
        """product_info  # noqa: E501

        Get product info about product ID *** or specify other product ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Retrieves product's info specified by product id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves product info specified by store id
        :param str lang_id: Retrieves product info specified by language id
        :param str currency_id: Currency Id
        :param str product_variant_params: Set this parameter in order to choose which product variants fields you want to retrieve
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_info_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_info_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_info_with_http_info(self, id, **kwargs):  # noqa: E501
        """product_info  # noqa: E501

        Get product info about product ID *** or specify other product ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_info_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Retrieves product's info specified by product id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves product info specified by store id
        :param str lang_id: Retrieves product info specified by language id
        :param str currency_id: Currency Id
        :param str product_variant_params: Set this parameter in order to choose which product variants fields you want to retrieve
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'params', 'exclude', 'store_id', 'lang_id', 'currency_id', 'product_variant_params', 'report_request_id', 'disable_report_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'currency_id' in params:
            query_params.append(('currency_id', params['currency_id']))  # noqa: E501
        if 'product_variant_params' in params:
            query_params.append(('product_variant_params', params['product_variant_params']))  # noqa: E501
        if 'report_request_id' in params:
            query_params.append(('report_request_id', params['report_request_id']))  # noqa: E501
        if 'disable_report_cache' in params:
            query_params.append(('disable_report_cache', params['disable_report_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.info.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_list(self, **kwargs):  # noqa: E501
        """product_list  # noqa: E501

        Get list of products from your store. Returns 10 products by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str category_id: Retrieves products specified by category id
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param bool avail_view: Specifies the set of visible/invisible products
        :param bool avail_sale: Specifies the set of available/not available products for sale
        :param str store_id: Retrieves products specified by store id
        :param str lang_id: Retrieves products specified by language id
        :param str currency_id: Currency Id
        :param str product_ids: Retrieves products specified by product ids
        :param str product_variant_params: Set this parameter in order to choose which product variants fields you want to retrieve
        :param int since_id: Retrieve entities starting from the specified id.
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :param str sort_by: Set field to sort by
        :param str sort_direction: Set sorting direction
        :param str sku: Filter by product's sku
        :param bool disable_cache: Disable cache for current request
        :param str brand_name: Retrieves brands specified by brand name
        :param list[str] product_attributes: Defines product attributes
        :return: ModelResponseProductList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_list_with_http_info(self, **kwargs):  # noqa: E501
        """product_list  # noqa: E501

        Get list of products from your store. Returns 10 products by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str page_cursor: Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str category_id: Retrieves products specified by category id
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param bool avail_view: Specifies the set of visible/invisible products
        :param bool avail_sale: Specifies the set of available/not available products for sale
        :param str store_id: Retrieves products specified by store id
        :param str lang_id: Retrieves products specified by language id
        :param str currency_id: Currency Id
        :param str product_ids: Retrieves products specified by product ids
        :param str product_variant_params: Set this parameter in order to choose which product variants fields you want to retrieve
        :param int since_id: Retrieve entities starting from the specified id.
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :param str sort_by: Set field to sort by
        :param str sort_direction: Set sorting direction
        :param str sku: Filter by product's sku
        :param bool disable_cache: Disable cache for current request
        :param str brand_name: Retrieves brands specified by brand name
        :param list[str] product_attributes: Defines product attributes
        :return: ModelResponseProductList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_cursor', 'start', 'count', 'params', 'exclude', 'category_id', 'created_from', 'created_to', 'modified_from', 'modified_to', 'avail_view', 'avail_sale', 'store_id', 'lang_id', 'currency_id', 'product_ids', 'product_variant_params', 'since_id', 'report_request_id', 'disable_report_cache', 'sort_by', 'sort_direction', 'sku', 'disable_cache', 'brand_name', 'product_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'category_id' in params:
            query_params.append(('category_id', params['category_id']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'avail_view' in params:
            query_params.append(('avail_view', params['avail_view']))  # noqa: E501
        if 'avail_sale' in params:
            query_params.append(('avail_sale', params['avail_sale']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'currency_id' in params:
            query_params.append(('currency_id', params['currency_id']))  # noqa: E501
        if 'product_ids' in params:
            query_params.append(('product_ids', params['product_ids']))  # noqa: E501
        if 'product_variant_params' in params:
            query_params.append(('product_variant_params', params['product_variant_params']))  # noqa: E501
        if 'since_id' in params:
            query_params.append(('since_id', params['since_id']))  # noqa: E501
        if 'report_request_id' in params:
            query_params.append(('report_request_id', params['report_request_id']))  # noqa: E501
        if 'disable_report_cache' in params:
            query_params.append(('disable_report_cache', params['disable_report_cache']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sort_direction', params['sort_direction']))  # noqa: E501
        if 'sku' in params:
            query_params.append(('sku', params['sku']))  # noqa: E501
        if 'disable_cache' in params:
            query_params.append(('disable_cache', params['disable_cache']))  # noqa: E501
        if 'brand_name' in params:
            query_params.append(('brand_name', params['brand_name']))  # noqa: E501
        if 'product_attributes' in params:
            query_params.append(('product_attributes', params['product_attributes']))  # noqa: E501
            collection_formats['product_attributes'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseProductList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_manufacturer_add(self, product_id, manufacturer, **kwargs):  # noqa: E501
        """product_manufacturer_add  # noqa: E501

        Add manufacturer to store and assign to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_manufacturer_add(product_id, manufacturer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines products specified by product id (required)
        :param str manufacturer: Defines product’s manufacturer's name (required)
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_manufacturer_add_with_http_info(product_id, manufacturer, **kwargs)  # noqa: E501
        else:
            (data) = self.product_manufacturer_add_with_http_info(product_id, manufacturer, **kwargs)  # noqa: E501
            return data

    def product_manufacturer_add_with_http_info(self, product_id, manufacturer, **kwargs):  # noqa: E501
        """product_manufacturer_add  # noqa: E501

        Add manufacturer to store and assign to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_manufacturer_add_with_http_info(product_id, manufacturer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines products specified by product id (required)
        :param str manufacturer: Defines product’s manufacturer's name (required)
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'manufacturer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_manufacturer_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_manufacturer_add`")  # noqa: E501
        # verify the required parameter 'manufacturer' is set
        if ('manufacturer' not in params or
                params['manufacturer'] is None):
            raise ValueError("Missing the required parameter `manufacturer` when calling `product_manufacturer_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'manufacturer' in params:
            query_params.append(('manufacturer', params['manufacturer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.manufacturer.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20082',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_option_add(self, name, type, **kwargs):  # noqa: E501
        """product_option_add  # noqa: E501

        Add product option from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_add(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Defines option's name (required)
        :param str type: Defines option's type that has to be added (required)
        :param str product_id: Defines product id where the option should be added
        :param str default_option_value: Defines default option value that has to be added
        :param str option_values: Defines option values that has to be added
        :param str description: Defines option's description
        :param bool avail: Defines whether the option is available
        :param int sort_order: Sort number in the list
        :param bool required: Defines if the option is required
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_option_add_with_http_info(name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.product_option_add_with_http_info(name, type, **kwargs)  # noqa: E501
            return data

    def product_option_add_with_http_info(self, name, type, **kwargs):  # noqa: E501
        """product_option_add  # noqa: E501

        Add product option from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_add_with_http_info(name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Defines option's name (required)
        :param str type: Defines option's type that has to be added (required)
        :param str product_id: Defines product id where the option should be added
        :param str default_option_value: Defines default option value that has to be added
        :param str option_values: Defines option values that has to be added
        :param str description: Defines option's description
        :param bool avail: Defines whether the option is available
        :param int sort_order: Sort number in the list
        :param bool required: Defines if the option is required
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'type', 'product_id', 'default_option_value', 'option_values', 'description', 'avail', 'sort_order', 'required', 'clear_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_option_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `product_option_add`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `product_option_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'default_option_value' in params:
            query_params.append(('default_option_value', params['default_option_value']))  # noqa: E501
        if 'option_values' in params:
            query_params.append(('option_values', params['option_values']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'avail' in params:
            query_params.append(('avail', params['avail']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'required' in params:
            query_params.append(('required', params['required']))  # noqa: E501
        if 'clear_cache' in params:
            query_params.append(('clear_cache', params['clear_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.option.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20070',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_option_assign(self, product_id, option_id, **kwargs):  # noqa: E501
        """product_option_assign  # noqa: E501

        Assign option from product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_assign(product_id, option_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the option should be assigned (required)
        :param int option_id: Defines option id which has to be assigned (required)
        :param bool required: Defines if the option is required
        :param int sort_order: Sort number in the list
        :param str option_values: Defines option values that has to be assigned
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_option_assign_with_http_info(product_id, option_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_option_assign_with_http_info(product_id, option_id, **kwargs)  # noqa: E501
            return data

    def product_option_assign_with_http_info(self, product_id, option_id, **kwargs):  # noqa: E501
        """product_option_assign  # noqa: E501

        Assign option from product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_assign_with_http_info(product_id, option_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the option should be assigned (required)
        :param int option_id: Defines option id which has to be assigned (required)
        :param bool required: Defines if the option is required
        :param int sort_order: Sort number in the list
        :param str option_values: Defines option values that has to be assigned
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'option_id', 'required', 'sort_order', 'option_values', 'clear_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_option_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_option_assign`")  # noqa: E501
        # verify the required parameter 'option_id' is set
        if ('option_id' not in params or
                params['option_id'] is None):
            raise ValueError("Missing the required parameter `option_id` when calling `product_option_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'option_id' in params:
            query_params.append(('option_id', params['option_id']))  # noqa: E501
        if 'required' in params:
            query_params.append(('required', params['required']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'option_values' in params:
            query_params.append(('option_values', params['option_values']))  # noqa: E501
        if 'clear_cache' in params:
            query_params.append(('clear_cache', params['clear_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.option.assign.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20072',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_option_list(self, **kwargs):  # noqa: E501
        """product_option_list  # noqa: E501

        Get list of options.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str product_id: Retrieves products' options specified by product id
        :param str lang_id: Language id
        :param str store_id: Store Id
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_option_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_option_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_option_list_with_http_info(self, **kwargs):  # noqa: E501
        """product_option_list  # noqa: E501

        Get list of options.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str product_id: Retrieves products' options specified by product id
        :param str lang_id: Language id
        :param str store_id: Store Id
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'params', 'exclude', 'product_id', 'lang_id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_option_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.option.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_option_value_add(self, product_id, option_id, option_value, **kwargs):  # noqa: E501
        """product_option_value_add  # noqa: E501

        Add product option item from option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_value_add(product_id, option_id, option_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the option value should be added (required)
        :param int option_id: Defines option id where the value has to be added (required)
        :param str option_value: Defines option value that has to be added (required)
        :param int sort_order: Sort number in the list
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_option_value_add_with_http_info(product_id, option_id, option_value, **kwargs)  # noqa: E501
        else:
            (data) = self.product_option_value_add_with_http_info(product_id, option_id, option_value, **kwargs)  # noqa: E501
            return data

    def product_option_value_add_with_http_info(self, product_id, option_id, option_value, **kwargs):  # noqa: E501
        """product_option_value_add  # noqa: E501

        Add product option item from option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_value_add_with_http_info(product_id, option_id, option_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the option value should be added (required)
        :param int option_id: Defines option id where the value has to be added (required)
        :param str option_value: Defines option value that has to be added (required)
        :param int sort_order: Sort number in the list
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'option_id', 'option_value', 'sort_order', 'clear_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_option_value_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_option_value_add`")  # noqa: E501
        # verify the required parameter 'option_id' is set
        if ('option_id' not in params or
                params['option_id'] is None):
            raise ValueError("Missing the required parameter `option_id` when calling `product_option_value_add`")  # noqa: E501
        # verify the required parameter 'option_value' is set
        if ('option_value' not in params or
                params['option_value'] is None):
            raise ValueError("Missing the required parameter `option_value` when calling `product_option_value_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'option_id' in params:
            query_params.append(('option_id', params['option_id']))  # noqa: E501
        if 'option_value' in params:
            query_params.append(('option_value', params['option_value']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'clear_cache' in params:
            query_params.append(('clear_cache', params['clear_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.option.value.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20073',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_option_value_assign(self, product_option_id, option_value_id, **kwargs):  # noqa: E501
        """product_option_value_assign  # noqa: E501

        Assign product option item from product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_value_assign(product_option_id, option_value_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_option_id: Defines product's option id where the value has to be assigned (required)
        :param int option_value_id: Defines value id that has to be assigned (required)
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_option_value_assign_with_http_info(product_option_id, option_value_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_option_value_assign_with_http_info(product_option_id, option_value_id, **kwargs)  # noqa: E501
            return data

    def product_option_value_assign_with_http_info(self, product_option_id, option_value_id, **kwargs):  # noqa: E501
        """product_option_value_assign  # noqa: E501

        Assign product option item from product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_value_assign_with_http_info(product_option_id, option_value_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_option_id: Defines product's option id where the value has to be assigned (required)
        :param int option_value_id: Defines value id that has to be assigned (required)
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_option_id', 'option_value_id', 'clear_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_option_value_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_option_id' is set
        if ('product_option_id' not in params or
                params['product_option_id'] is None):
            raise ValueError("Missing the required parameter `product_option_id` when calling `product_option_value_assign`")  # noqa: E501
        # verify the required parameter 'option_value_id' is set
        if ('option_value_id' not in params or
                params['option_value_id'] is None):
            raise ValueError("Missing the required parameter `option_value_id` when calling `product_option_value_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_option_id' in params:
            query_params.append(('product_option_id', params['product_option_id']))  # noqa: E501
        if 'option_value_id' in params:
            query_params.append(('option_value_id', params['option_value_id']))  # noqa: E501
        if 'clear_cache' in params:
            query_params.append(('clear_cache', params['clear_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.option.value.assign.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20074',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_option_value_update(self, product_id, option_id, option_value_id, option_value, **kwargs):  # noqa: E501
        """product_option_value_update  # noqa: E501

        Update product option item from option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_value_update(product_id, option_id, option_value_id, option_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the option value should be updated (required)
        :param int option_id: Defines option id where the value has to be updated (required)
        :param int option_value_id: Defines value id that has to be assigned (required)
        :param str option_value: Defines option value that has to be added (required)
        :param float price: Defines new product option price
        :param float quantity: Defines new products' options quantity
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_option_value_update_with_http_info(product_id, option_id, option_value_id, option_value, **kwargs)  # noqa: E501
        else:
            (data) = self.product_option_value_update_with_http_info(product_id, option_id, option_value_id, option_value, **kwargs)  # noqa: E501
            return data

    def product_option_value_update_with_http_info(self, product_id, option_id, option_value_id, option_value, **kwargs):  # noqa: E501
        """product_option_value_update  # noqa: E501

        Update product option item from option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_option_value_update_with_http_info(product_id, option_id, option_value_id, option_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the option value should be updated (required)
        :param int option_id: Defines option id where the value has to be updated (required)
        :param int option_value_id: Defines value id that has to be assigned (required)
        :param str option_value: Defines option value that has to be added (required)
        :param float price: Defines new product option price
        :param float quantity: Defines new products' options quantity
        :param bool clear_cache: Is cache clear required
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'option_id', 'option_value_id', 'option_value', 'price', 'quantity', 'clear_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_option_value_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_option_value_update`")  # noqa: E501
        # verify the required parameter 'option_id' is set
        if ('option_id' not in params or
                params['option_id'] is None):
            raise ValueError("Missing the required parameter `option_id` when calling `product_option_value_update`")  # noqa: E501
        # verify the required parameter 'option_value_id' is set
        if ('option_value_id' not in params or
                params['option_value_id'] is None):
            raise ValueError("Missing the required parameter `option_value_id` when calling `product_option_value_update`")  # noqa: E501
        # verify the required parameter 'option_value' is set
        if ('option_value' not in params or
                params['option_value'] is None):
            raise ValueError("Missing the required parameter `option_value` when calling `product_option_value_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'option_id' in params:
            query_params.append(('option_id', params['option_id']))  # noqa: E501
        if 'option_value_id' in params:
            query_params.append(('option_value_id', params['option_value_id']))  # noqa: E501
        if 'option_value' in params:
            query_params.append(('option_value', params['option_value']))  # noqa: E501
        if 'price' in params:
            query_params.append(('price', params['price']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'clear_cache' in params:
            query_params.append(('clear_cache', params['clear_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.option.value.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_price_add(self, body, **kwargs):  # noqa: E501
        """product_price_add  # noqa: E501

        Add some prices to the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_price_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductPriceAdd body: (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_price_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.product_price_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def product_price_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """product_price_add  # noqa: E501

        Add some prices to the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_price_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductPriceAdd body: (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_price_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_price_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.price.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_price_delete(self, product_id, **kwargs):  # noqa: E501
        """product_price_delete  # noqa: E501

        Delete some prices of the product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_price_delete(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines the product where the price has to be deleted (required)
        :param str group_prices: Defines product's group prices
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_price_delete_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_price_delete_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def product_price_delete_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """product_price_delete  # noqa: E501

        Delete some prices of the product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_price_delete_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines the product where the price has to be deleted (required)
        :param str group_prices: Defines product's group prices
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'group_prices']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_price_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_price_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'group_prices' in params:
            query_params.append(('group_prices', params['group_prices']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.price.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_price_update(self, body, **kwargs):  # noqa: E501
        """product_price_update  # noqa: E501

        Update some prices of the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_price_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductPriceUpdate body: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_price_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.product_price_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def product_price_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """product_price_update  # noqa: E501

        Update some prices of the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_price_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductPriceUpdate body: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_price_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_price_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.price.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_review_list(self, product_id, **kwargs):  # noqa: E501
        """product_review_list  # noqa: E501

        Get reviews of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_review_list(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Product id (required)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str ids: Retrieves reviews specified by ids
        :param str store_id: Store Id
        :param str status: Defines status
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_review_list_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_review_list_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def product_review_list_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """product_review_list  # noqa: E501

        Get reviews of a specific product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_review_list_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Product id (required)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str ids: Retrieves reviews specified by ids
        :param str store_id: Store Id
        :param str status: Defines status
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'start', 'count', 'ids', 'store_id', 'status', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_review_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_review_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.review.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20075',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_store_assign(self, product_id, store_id, **kwargs):  # noqa: E501
        """product_store_assign  # noqa: E501

        Assign product to store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_store_assign(product_id, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines id of the product which should be assigned to a store (required)
        :param str store_id: Defines id of the store product should be assigned to (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_store_assign_with_http_info(product_id, store_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_store_assign_with_http_info(product_id, store_id, **kwargs)  # noqa: E501
            return data

    def product_store_assign_with_http_info(self, product_id, store_id, **kwargs):  # noqa: E501
        """product_store_assign  # noqa: E501

        Assign product to store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_store_assign_with_http_info(product_id, store_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines id of the product which should be assigned to a store (required)
        :param str store_id: Defines id of the store product should be assigned to (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_store_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_store_assign`")  # noqa: E501
        # verify the required parameter 'store_id' is set
        if ('store_id' not in params or
                params['store_id'] is None):
            raise ValueError("Missing the required parameter `store_id` when calling `product_store_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.store.assign.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_tax_add(self, body, **kwargs):  # noqa: E501
        """product_tax_add  # noqa: E501

        Add tax class and tax rate to store and assign to product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_tax_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductTaxAdd body: (required)
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_tax_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.product_tax_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def product_tax_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """product_tax_add  # noqa: E501

        Add tax class and tax rate to store and assign to product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_tax_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductTaxAdd body: (required)
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_tax_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_tax_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.tax.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20081',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_update(self, id, **kwargs):  # noqa: E501
        """product_update  # noqa: E501

        Update price and quantity for a specific product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines product id that has to be updated (required)
        :param str model: Defines product model that has to be updated
        :param float old_price: Defines product's old price
        :param float price: Defines new product's price
        :param float special_price: Defines new product's special price
        :param str sprice_create: Defines the date of special price creation
        :param str sprice_expire: Defines the term of special price offer duration
        :param float cost_price: Defines new product's cost price
        :param float retail_price: Defines new product's retail price
        :param float quantity: Defines new product's quantity
        :param float weight: Weight
        :param float increase_quantity: Defines the incremental changes in product quantity
        :param float reduce_quantity: Defines the decrement changes in product quantity
        :param str warehouse_id: This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
        :param float reserve_quantity: This parameter allows to reserve/unreserve product quantity.
        :param bool manage_stock: Defines inventory tracking for product
        :param str backorder_status: Set backorder status
        :param str name: Defines product's name that has to be updated
        :param str sku: Defines new product's sku
        :param str visible: Set visibility status
        :param str manufacturer: Defines product's manufacturer
        :param str manufacturer_id: Defines product's manufacturer by manufacturer_id
        :param str categories_ids: Defines product add that is specified by comma-separated categories id
        :param str description: Defines new product's description
        :param str short_description: Defines short description
        :param str meta_title: Defines unique meta title for each entity
        :param str meta_keywords: Defines unique meta keywords for each entity
        :param str meta_description: Defines unique meta description of a entity
        :param str store_id: Defines store id where the product should be found
        :param str lang_id: Language id
        :param bool in_stock: Set stock status
        :param str status: Defines product's status
        :param str seo_url: Defines unique URL for SEO
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :param bool reindex: Is reindex required
        :param str tags: Product tags
        :param bool clear_cache: Is cache clear required
        :param str gtin: Global Trade Item Number. An GTIN is an identifier for trade items.
        :param bool taxable: Specifies whether a tax is charged
        :param str product_class: A categorization for the product
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """product_update  # noqa: E501

        Update price and quantity for a specific product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines product id that has to be updated (required)
        :param str model: Defines product model that has to be updated
        :param float old_price: Defines product's old price
        :param float price: Defines new product's price
        :param float special_price: Defines new product's special price
        :param str sprice_create: Defines the date of special price creation
        :param str sprice_expire: Defines the term of special price offer duration
        :param float cost_price: Defines new product's cost price
        :param float retail_price: Defines new product's retail price
        :param float quantity: Defines new product's quantity
        :param float weight: Weight
        :param float increase_quantity: Defines the incremental changes in product quantity
        :param float reduce_quantity: Defines the decrement changes in product quantity
        :param str warehouse_id: This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
        :param float reserve_quantity: This parameter allows to reserve/unreserve product quantity.
        :param bool manage_stock: Defines inventory tracking for product
        :param str backorder_status: Set backorder status
        :param str name: Defines product's name that has to be updated
        :param str sku: Defines new product's sku
        :param str visible: Set visibility status
        :param str manufacturer: Defines product's manufacturer
        :param str manufacturer_id: Defines product's manufacturer by manufacturer_id
        :param str categories_ids: Defines product add that is specified by comma-separated categories id
        :param str description: Defines new product's description
        :param str short_description: Defines short description
        :param str meta_title: Defines unique meta title for each entity
        :param str meta_keywords: Defines unique meta keywords for each entity
        :param str meta_description: Defines unique meta description of a entity
        :param str store_id: Defines store id where the product should be found
        :param str lang_id: Language id
        :param bool in_stock: Set stock status
        :param str status: Defines product's status
        :param str seo_url: Defines unique URL for SEO
        :param str report_request_id: Report request id
        :param bool disable_report_cache: Disable report cache for current request
        :param bool reindex: Is reindex required
        :param str tags: Product tags
        :param bool clear_cache: Is cache clear required
        :param str gtin: Global Trade Item Number. An GTIN is an identifier for trade items.
        :param bool taxable: Specifies whether a tax is charged
        :param str product_class: A categorization for the product
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model', 'old_price', 'price', 'special_price', 'sprice_create', 'sprice_expire', 'cost_price', 'retail_price', 'quantity', 'weight', 'increase_quantity', 'reduce_quantity', 'warehouse_id', 'reserve_quantity', 'manage_stock', 'backorder_status', 'name', 'sku', 'visible', 'manufacturer', 'manufacturer_id', 'categories_ids', 'description', 'short_description', 'meta_title', 'meta_keywords', 'meta_description', 'store_id', 'lang_id', 'in_stock', 'status', 'seo_url', 'report_request_id', 'disable_report_cache', 'reindex', 'tags', 'clear_cache', 'gtin', 'taxable', 'product_class']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'old_price' in params:
            query_params.append(('old_price', params['old_price']))  # noqa: E501
        if 'price' in params:
            query_params.append(('price', params['price']))  # noqa: E501
        if 'special_price' in params:
            query_params.append(('special_price', params['special_price']))  # noqa: E501
        if 'sprice_create' in params:
            query_params.append(('sprice_create', params['sprice_create']))  # noqa: E501
        if 'sprice_expire' in params:
            query_params.append(('sprice_expire', params['sprice_expire']))  # noqa: E501
        if 'cost_price' in params:
            query_params.append(('cost_price', params['cost_price']))  # noqa: E501
        if 'retail_price' in params:
            query_params.append(('retail_price', params['retail_price']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'weight' in params:
            query_params.append(('weight', params['weight']))  # noqa: E501
        if 'increase_quantity' in params:
            query_params.append(('increase_quantity', params['increase_quantity']))  # noqa: E501
        if 'reduce_quantity' in params:
            query_params.append(('reduce_quantity', params['reduce_quantity']))  # noqa: E501
        if 'warehouse_id' in params:
            query_params.append(('warehouse_id', params['warehouse_id']))  # noqa: E501
        if 'reserve_quantity' in params:
            query_params.append(('reserve_quantity', params['reserve_quantity']))  # noqa: E501
        if 'manage_stock' in params:
            query_params.append(('manage_stock', params['manage_stock']))  # noqa: E501
        if 'backorder_status' in params:
            query_params.append(('backorder_status', params['backorder_status']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'sku' in params:
            query_params.append(('sku', params['sku']))  # noqa: E501
        if 'visible' in params:
            query_params.append(('visible', params['visible']))  # noqa: E501
        if 'manufacturer' in params:
            query_params.append(('manufacturer', params['manufacturer']))  # noqa: E501
        if 'manufacturer_id' in params:
            query_params.append(('manufacturer_id', params['manufacturer_id']))  # noqa: E501
        if 'categories_ids' in params:
            query_params.append(('categories_ids', params['categories_ids']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'short_description' in params:
            query_params.append(('short_description', params['short_description']))  # noqa: E501
        if 'meta_title' in params:
            query_params.append(('meta_title', params['meta_title']))  # noqa: E501
        if 'meta_keywords' in params:
            query_params.append(('meta_keywords', params['meta_keywords']))  # noqa: E501
        if 'meta_description' in params:
            query_params.append(('meta_description', params['meta_description']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'in_stock' in params:
            query_params.append(('in_stock', params['in_stock']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'seo_url' in params:
            query_params.append(('seo_url', params['seo_url']))  # noqa: E501
        if 'report_request_id' in params:
            query_params.append(('report_request_id', params['report_request_id']))  # noqa: E501
        if 'disable_report_cache' in params:
            query_params.append(('disable_report_cache', params['disable_report_cache']))  # noqa: E501
        if 'reindex' in params:
            query_params.append(('reindex', params['reindex']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'clear_cache' in params:
            query_params.append(('clear_cache', params['clear_cache']))  # noqa: E501
        if 'gtin' in params:
            query_params.append(('gtin', params['gtin']))  # noqa: E501
        if 'taxable' in params:
            query_params.append(('taxable', params['taxable']))  # noqa: E501
        if 'product_class' in params:
            query_params.append(('product_class', params['product_class']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_add(self, body, **kwargs):  # noqa: E501
        """product_variant_add  # noqa: E501

        Add variant to product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductVariantAdd body: (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def product_variant_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """product_variant_add  # noqa: E501

        Add variant to product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductVariantAdd body: (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_variant_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20076',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_count(self, **kwargs):  # noqa: E501
        """product_variant_count  # noqa: E501

        Get count variants.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str category_id: Counts products’ variants specified by category id
        :param str product_id: Retrieves products' variants specified by product id
        :param str store_id: Retrieves variants specified by store id
        :return: InlineResponse20080
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_variant_count_with_http_info(self, **kwargs):  # noqa: E501
        """product_variant_count  # noqa: E501

        Get count variants.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str category_id: Counts products’ variants specified by category id
        :param str product_id: Retrieves products' variants specified by product id
        :param str store_id: Retrieves variants specified by store id
        :return: InlineResponse20080
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['created_from', 'created_to', 'modified_from', 'modified_to', 'category_id', 'product_id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'category_id' in params:
            query_params.append(('category_id', params['category_id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.count.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20080',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_delete(self, id, product_id, **kwargs):  # noqa: E501
        """product_variant_delete  # noqa: E501

        Delete variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_delete(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines variant removal, specified by variant id (required)
        :param str product_id: Defines product's id where the variant has to be deleted (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_delete_with_http_info(id, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_delete_with_http_info(id, product_id, **kwargs)  # noqa: E501
            return data

    def product_variant_delete_with_http_info(self, id, product_id, **kwargs):  # noqa: E501
        """product_variant_delete  # noqa: E501

        Delete variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_delete_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines variant removal, specified by variant id (required)
        :param str product_id: Defines product's id where the variant has to be deleted (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_variant_delete`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_variant_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_image_add(self, product_id, product_variant_id, image_name, type, **kwargs):  # noqa: E501
        """product_variant_image_add  # noqa: E501

        Add image to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_image_add(product_id, product_variant_id, image_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the variant image has to be added (required)
        :param int product_variant_id: Defines product's variants specified by variant id (required)
        :param str image_name: Defines image's name (required)
        :param str type: Defines image's types that are specified by comma-separated list (required)
        :param str url: Defines URL of the image that has to be added
        :param str content: Content(body) encoded in base64 of image file
        :param str label: Defines alternative text that has to be attached to the picture
        :param str mime: Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
        :param int position: Defines image’s position in the list
        :param str store_id: Store Id
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_image_add_with_http_info(product_id, product_variant_id, image_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_image_add_with_http_info(product_id, product_variant_id, image_name, type, **kwargs)  # noqa: E501
            return data

    def product_variant_image_add_with_http_info(self, product_id, product_variant_id, image_name, type, **kwargs):  # noqa: E501
        """product_variant_image_add  # noqa: E501

        Add image to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_image_add_with_http_info(product_id, product_variant_id, image_name, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines product id where the variant image has to be added (required)
        :param int product_variant_id: Defines product's variants specified by variant id (required)
        :param str image_name: Defines image's name (required)
        :param str type: Defines image's types that are specified by comma-separated list (required)
        :param str url: Defines URL of the image that has to be added
        :param str content: Content(body) encoded in base64 of image file
        :param str label: Defines alternative text that has to be attached to the picture
        :param str mime: Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
        :param int position: Defines image’s position in the list
        :param str store_id: Store Id
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'product_variant_id', 'image_name', 'type', 'url', 'content', 'label', 'mime', 'position', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_image_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_variant_image_add`")  # noqa: E501
        # verify the required parameter 'product_variant_id' is set
        if ('product_variant_id' not in params or
                params['product_variant_id'] is None):
            raise ValueError("Missing the required parameter `product_variant_id` when calling `product_variant_image_add`")  # noqa: E501
        # verify the required parameter 'image_name' is set
        if ('image_name' not in params or
                params['image_name'] is None):
            raise ValueError("Missing the required parameter `image_name` when calling `product_variant_image_add`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `product_variant_image_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'product_variant_id' in params:
            query_params.append(('product_variant_id', params['product_variant_id']))  # noqa: E501
        if 'image_name' in params:
            query_params.append(('image_name', params['image_name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'content' in params:
            query_params.append(('content', params['content']))  # noqa: E501
        if 'label' in params:
            query_params.append(('label', params['label']))  # noqa: E501
        if 'mime' in params:
            query_params.append(('mime', params['mime']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.image.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_info(self, id, **kwargs):  # noqa: E501
        """product_variant_info  # noqa: E501

        Get variant info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Retrieves variant's info specified by variant id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves variant info specified by store id
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_info_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_info_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_variant_info_with_http_info(self, id, **kwargs):  # noqa: E501
        """product_variant_info  # noqa: E501

        Get variant info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_info_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Retrieves variant's info specified by variant id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves variant info specified by store id
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'params', 'exclude', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_variant_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.info.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_list(self, **kwargs):  # noqa: E501
        """product_variant_list  # noqa: E501

        Get list variants.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str category_id: Retrieves products’ variants specified by category id
        :param str product_id: Retrieves products' variants specified by product id
        :param str store_id: Retrieves variants specified by store id
        :return: InlineResponse20079
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_variant_list_with_http_info(self, **kwargs):  # noqa: E501
        """product_variant_list  # noqa: E501

        Get list variants.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str modified_from: Retrieve entities from their modification date
        :param str modified_to: Retrieve entities to their modification date
        :param str category_id: Retrieves products’ variants specified by category id
        :param str product_id: Retrieves products' variants specified by product id
        :param str store_id: Retrieves variants specified by store id
        :return: InlineResponse20079
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'params', 'exclude', 'created_from', 'created_to', 'modified_from', 'modified_to', 'category_id', 'product_id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'category_id' in params:
            query_params.append(('category_id', params['category_id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20079',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_price_add(self, body, **kwargs):  # noqa: E501
        """product_variant_price_add  # noqa: E501

        Add some prices to the product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_price_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductVariantPriceAdd body: (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_price_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_price_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def product_variant_price_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """product_variant_price_add  # noqa: E501

        Add some prices to the product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_price_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductVariantPriceAdd body: (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_price_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_variant_price_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.price.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_price_delete(self, id, **kwargs):  # noqa: E501
        """product_variant_price_delete  # noqa: E501

        Delete some prices of the product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_price_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines the variant where the price has to be deleted (required)
        :param str group_prices: Defines variants's group prices
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_price_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_price_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def product_variant_price_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """product_variant_price_delete  # noqa: E501

        Delete some prices of the product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_price_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines the variant where the price has to be deleted (required)
        :param str group_prices: Defines variants's group prices
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'group_prices']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_price_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_variant_price_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'group_prices' in params:
            query_params.append(('group_prices', params['group_prices']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.price.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_price_update(self, body, **kwargs):  # noqa: E501
        """product_variant_price_update  # noqa: E501

        Update some prices of the product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_price_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductVariantPriceUpdate body: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_price_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_price_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def product_variant_price_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """product_variant_price_update  # noqa: E501

        Update some prices of the product variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_price_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductVariantPriceUpdate body: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_price_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_variant_price_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.price.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_variant_update(self, id, product_id, **kwargs):  # noqa: E501
        """product_variant_update  # noqa: E501

        Update variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_update(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines variant update specified by variant id (required)
        :param str product_id: Defines product's id where the variant has to be updated (required)
        :param str store_id: Defines store id where the variant should be found
        :param str warehouse_id: This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
        :param float reserve_quantity: This parameter allows to reserve/unreserve product variants quantity.
        :param float quantity: Defines new products' variants quantity
        :param float increase_quantity: Defines the incremental changes in product quantity
        :param float reduce_quantity: Defines the decrement changes in product quantity
        :param float price: Defines new product's variant price
        :param float special_price: Defines new product's variant special price
        :param float old_price: Defines product's old price
        :param float cost_price: Defines new product's cost price
        :param str sprice_create: Defines the date of special price creation
        :param str sprice_expire: Defines the term of special price offer duration
        :param bool manage_stock: Defines inventory tracking for product variant
        :param bool in_stock: Set stock status
        :param str name: Defines variant's name that has to be updated
        :param str description: Specifies variant's description
        :param str sku: Defines new product's variant sku
        :param str meta_title: Defines unique meta title for each entity
        :param str meta_description: Defines unique meta description of a entity
        :param str meta_keywords: Defines unique meta keywords for each entity
        :param str short_description: Defines short description
        :param str visible: Set visibility status
        :param str status: Defines product variant's status
        :param str backorder_status: Set backorder status
        :param float weight: Weight
        :param str barcode: A barcode is a unique code composed of numbers used as a product identifier.
        :param bool reindex: Is reindex required
        :param bool taxable: Specifies whether a tax is charged
        :param list[str] options: Defines variant's options list
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_variant_update_with_http_info(id, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_variant_update_with_http_info(id, product_id, **kwargs)  # noqa: E501
            return data

    def product_variant_update_with_http_info(self, id, product_id, **kwargs):  # noqa: E501
        """product_variant_update  # noqa: E501

        Update variant.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_variant_update_with_http_info(id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines variant update specified by variant id (required)
        :param str product_id: Defines product's id where the variant has to be updated (required)
        :param str store_id: Defines store id where the variant should be found
        :param str warehouse_id: This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
        :param float reserve_quantity: This parameter allows to reserve/unreserve product variants quantity.
        :param float quantity: Defines new products' variants quantity
        :param float increase_quantity: Defines the incremental changes in product quantity
        :param float reduce_quantity: Defines the decrement changes in product quantity
        :param float price: Defines new product's variant price
        :param float special_price: Defines new product's variant special price
        :param float old_price: Defines product's old price
        :param float cost_price: Defines new product's cost price
        :param str sprice_create: Defines the date of special price creation
        :param str sprice_expire: Defines the term of special price offer duration
        :param bool manage_stock: Defines inventory tracking for product variant
        :param bool in_stock: Set stock status
        :param str name: Defines variant's name that has to be updated
        :param str description: Specifies variant's description
        :param str sku: Defines new product's variant sku
        :param str meta_title: Defines unique meta title for each entity
        :param str meta_description: Defines unique meta description of a entity
        :param str meta_keywords: Defines unique meta keywords for each entity
        :param str short_description: Defines short description
        :param str visible: Set visibility status
        :param str status: Defines product variant's status
        :param str backorder_status: Set backorder status
        :param float weight: Weight
        :param str barcode: A barcode is a unique code composed of numbers used as a product identifier.
        :param bool reindex: Is reindex required
        :param bool taxable: Specifies whether a tax is charged
        :param list[str] options: Defines variant's options list
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'product_id', 'store_id', 'warehouse_id', 'reserve_quantity', 'quantity', 'increase_quantity', 'reduce_quantity', 'price', 'special_price', 'old_price', 'cost_price', 'sprice_create', 'sprice_expire', 'manage_stock', 'in_stock', 'name', 'description', 'sku', 'meta_title', 'meta_description', 'meta_keywords', 'short_description', 'visible', 'status', 'backorder_status', 'weight', 'barcode', 'reindex', 'taxable', 'options']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_variant_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `product_variant_update`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_variant_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'warehouse_id' in params:
            query_params.append(('warehouse_id', params['warehouse_id']))  # noqa: E501
        if 'reserve_quantity' in params:
            query_params.append(('reserve_quantity', params['reserve_quantity']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'increase_quantity' in params:
            query_params.append(('increase_quantity', params['increase_quantity']))  # noqa: E501
        if 'reduce_quantity' in params:
            query_params.append(('reduce_quantity', params['reduce_quantity']))  # noqa: E501
        if 'price' in params:
            query_params.append(('price', params['price']))  # noqa: E501
        if 'special_price' in params:
            query_params.append(('special_price', params['special_price']))  # noqa: E501
        if 'old_price' in params:
            query_params.append(('old_price', params['old_price']))  # noqa: E501
        if 'cost_price' in params:
            query_params.append(('cost_price', params['cost_price']))  # noqa: E501
        if 'sprice_create' in params:
            query_params.append(('sprice_create', params['sprice_create']))  # noqa: E501
        if 'sprice_expire' in params:
            query_params.append(('sprice_expire', params['sprice_expire']))  # noqa: E501
        if 'manage_stock' in params:
            query_params.append(('manage_stock', params['manage_stock']))  # noqa: E501
        if 'in_stock' in params:
            query_params.append(('in_stock', params['in_stock']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'sku' in params:
            query_params.append(('sku', params['sku']))  # noqa: E501
        if 'meta_title' in params:
            query_params.append(('meta_title', params['meta_title']))  # noqa: E501
        if 'meta_description' in params:
            query_params.append(('meta_description', params['meta_description']))  # noqa: E501
        if 'meta_keywords' in params:
            query_params.append(('meta_keywords', params['meta_keywords']))  # noqa: E501
        if 'short_description' in params:
            query_params.append(('short_description', params['short_description']))  # noqa: E501
        if 'visible' in params:
            query_params.append(('visible', params['visible']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'backorder_status' in params:
            query_params.append(('backorder_status', params['backorder_status']))  # noqa: E501
        if 'weight' in params:
            query_params.append(('weight', params['weight']))  # noqa: E501
        if 'barcode' in params:
            query_params.append(('barcode', params['barcode']))  # noqa: E501
        if 'reindex' in params:
            query_params.append(('reindex', params['reindex']))  # noqa: E501
        if 'taxable' in params:
            query_params.append(('taxable', params['taxable']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501
            collection_formats['options'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/product.variant.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
