# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OrderApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def order_abandoned_list(self, **kwargs):  # noqa: E501
        """order_abandoned_list  # noqa: E501

        Get list of orders that were left by customers before completing the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_abandoned_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Retrieves orders specified by customer id
        :param str customer_email: Retrieves orders specified by customer email
        :param str created_to: Retrieve entities to their creation date
        :param str created_from: Retrieve entities from their creation date
        :param str modified_to: Retrieve entities to their modification date
        :param str modified_from: Retrieve entities from their modification date
        :param bool skip_empty_email: Filter empty emails
        :param str store_id: Store Id
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param int start: This parameter sets the number from which you want to get entities
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseOrderAbandonedList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_abandoned_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_abandoned_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_abandoned_list_with_http_info(self, **kwargs):  # noqa: E501
        """order_abandoned_list  # noqa: E501

        Get list of orders that were left by customers before completing the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_abandoned_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Retrieves orders specified by customer id
        :param str customer_email: Retrieves orders specified by customer email
        :param str created_to: Retrieve entities to their creation date
        :param str created_from: Retrieve entities from their creation date
        :param str modified_to: Retrieve entities to their modification date
        :param str modified_from: Retrieve entities from their modification date
        :param bool skip_empty_email: Filter empty emails
        :param str store_id: Store Id
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param int start: This parameter sets the number from which you want to get entities
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :return: ModelResponseOrderAbandonedList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'customer_email', 'created_to', 'created_from', 'modified_to', 'modified_from', 'skip_empty_email', 'store_id', 'page_cursor', 'count', 'start', 'params', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_abandoned_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customer_id', params['customer_id']))  # noqa: E501
        if 'customer_email' in params:
            query_params.append(('customer_email', params['customer_email']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'skip_empty_email' in params:
            query_params.append(('skip_empty_email', params['skip_empty_email']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.abandoned.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseOrderAbandonedList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_add(self, body, **kwargs):  # noqa: E501
        """order_add  # noqa: E501

        Add a new order to the cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderAdd body: (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.order_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def order_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """order_add  # noqa: E501

        Add a new order to the cart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderAdd body: (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `order_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_count(self, **kwargs):  # noqa: E501
        """order_count  # noqa: E501

        Count orders in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Counts orders quantity specified by customer id
        :param str customer_email: Counts orders quantity specified by customer email
        :param str order_status: Counts orders quantity specified by order status
        :param list[str] order_status_ids: Retrieves orders specified by order statuses
        :param str created_to: Retrieve entities to their creation date
        :param str created_from: Retrieve entities from their creation date
        :param str modified_to: Retrieve entities to their modification date
        :param str modified_from: Retrieve entities from their modification date
        :param str store_id: Counts orders quantity specified by store id
        :param str ids: Counts orders specified by ids
        :param str order_ids: Counts orders specified by order ids
        :param str ebay_order_status: Counts orders quantity specified by order status
        :param str financial_status: Counts orders quantity specified by financial status
        :param str fulfillment_status: Create order with fulfillment status
        :param str shipping_method: Retrieve entities according to shipping method
        :param str delivery_method: Retrieves order with delivery method
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_count_with_http_info(self, **kwargs):  # noqa: E501
        """order_count  # noqa: E501

        Count orders in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Counts orders quantity specified by customer id
        :param str customer_email: Counts orders quantity specified by customer email
        :param str order_status: Counts orders quantity specified by order status
        :param list[str] order_status_ids: Retrieves orders specified by order statuses
        :param str created_to: Retrieve entities to their creation date
        :param str created_from: Retrieve entities from their creation date
        :param str modified_to: Retrieve entities to their modification date
        :param str modified_from: Retrieve entities from their modification date
        :param str store_id: Counts orders quantity specified by store id
        :param str ids: Counts orders specified by ids
        :param str order_ids: Counts orders specified by order ids
        :param str ebay_order_status: Counts orders quantity specified by order status
        :param str financial_status: Counts orders quantity specified by financial status
        :param str fulfillment_status: Create order with fulfillment status
        :param str shipping_method: Retrieve entities according to shipping method
        :param str delivery_method: Retrieves order with delivery method
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'customer_email', 'order_status', 'order_status_ids', 'created_to', 'created_from', 'modified_to', 'modified_from', 'store_id', 'ids', 'order_ids', 'ebay_order_status', 'financial_status', 'fulfillment_status', 'shipping_method', 'delivery_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customer_id', params['customer_id']))  # noqa: E501
        if 'customer_email' in params:
            query_params.append(('customer_email', params['customer_email']))  # noqa: E501
        if 'order_status' in params:
            query_params.append(('order_status', params['order_status']))  # noqa: E501
        if 'order_status_ids' in params:
            query_params.append(('order_status_ids', params['order_status_ids']))  # noqa: E501
            collection_formats['order_status_ids'] = 'csv'  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'order_ids' in params:
            query_params.append(('order_ids', params['order_ids']))  # noqa: E501
        if 'ebay_order_status' in params:
            query_params.append(('ebay_order_status', params['ebay_order_status']))  # noqa: E501
        if 'financial_status' in params:
            query_params.append(('financial_status', params['financial_status']))  # noqa: E501
        if 'fulfillment_status' in params:
            query_params.append(('fulfillment_status', params['fulfillment_status']))  # noqa: E501
        if 'shipping_method' in params:
            query_params.append(('shipping_method', params['shipping_method']))  # noqa: E501
        if 'delivery_method' in params:
            query_params.append(('delivery_method', params['delivery_method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.count.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_financial_status_list(self, **kwargs):  # noqa: E501
        """order_financial_status_list  # noqa: E501

        Retrieve list of financial statuses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_financial_status_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_financial_status_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_financial_status_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_financial_status_list_with_http_info(self, **kwargs):  # noqa: E501
        """order_financial_status_list  # noqa: E501

        Retrieve list of financial statuses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_financial_status_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_financial_status_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.financial_status.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_find(self, **kwargs):  # noqa: E501
        """order_find  # noqa: E501

        Find orders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_find(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Retrieves orders specified by customer id
        :param str customer_email: Retrieves orders specified by customer email
        :param str order_status: Retrieves orders specified by order status
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_to: Retrieve entities to their creation date
        :param str created_from: Retrieve entities from their creation date
        :param str modified_to: Retrieve entities to their modification date
        :param str modified_from: Retrieve entities from their modification date
        :param str financial_status: Retrieves orders specified by financial status
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_find_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_find_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_find_with_http_info(self, **kwargs):  # noqa: E501
        """order_find  # noqa: E501

        Find orders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_find_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Retrieves orders specified by customer id
        :param str customer_email: Retrieves orders specified by customer email
        :param str order_status: Retrieves orders specified by order status
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_to: Retrieve entities to their creation date
        :param str created_from: Retrieve entities from their creation date
        :param str modified_to: Retrieve entities to their modification date
        :param str modified_from: Retrieve entities from their modification date
        :param str financial_status: Retrieves orders specified by financial status
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'customer_email', 'order_status', 'start', 'count', 'params', 'exclude', 'created_to', 'created_from', 'modified_to', 'modified_from', 'financial_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_find" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customer_id', params['customer_id']))  # noqa: E501
        if 'customer_email' in params:
            query_params.append(('customer_email', params['customer_email']))  # noqa: E501
        if 'order_status' in params:
            query_params.append(('order_status', params['order_status']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'financial_status' in params:
            query_params.append(('financial_status', params['financial_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.find.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_fulfillment_status_list(self, **kwargs):  # noqa: E501
        """order_fulfillment_status_list  # noqa: E501

        Retrieve list of fulfillment statuses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_fulfillment_status_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_fulfillment_status_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_fulfillment_status_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_fulfillment_status_list_with_http_info(self, **kwargs):  # noqa: E501
        """order_fulfillment_status_list  # noqa: E501

        Retrieve list of fulfillment statuses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_fulfillment_status_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_fulfillment_status_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.fulfillment_status.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_info(self, **kwargs):  # noqa: E501
        """order_info  # noqa: E501

        Info about a specific order by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Retrieves order’s info specified by order id
        :param str id: Retrieves order info specified by id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Defines store id where the order should be found
        :param bool enable_cache: If the value is 'true' and order exist in our cache, we will return order.info response from cache
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_info_with_http_info(self, **kwargs):  # noqa: E501
        """order_info  # noqa: E501

        Info about a specific order by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Retrieves order’s info specified by order id
        :param str id: Retrieves order info specified by id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Defines store id where the order should be found
        :param bool enable_cache: If the value is 'true' and order exist in our cache, we will return order.info response from cache
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'id', 'params', 'exclude', 'store_id', 'enable_cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('order_id', params['order_id']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'enable_cache' in params:
            query_params.append(('enable_cache', params['enable_cache']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.info.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_list(self, **kwargs):  # noqa: E501
        """order_list  # noqa: E501

        Get list of orders from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Retrieves orders specified by customer id
        :param str customer_email: Retrieves orders specified by customer email
        :param str phone: Filter orders by customer's phone number
        :param str order_status: Retrieves orders specified by order status
        :param list[str] order_status_ids: Retrieves orders specified by order statuses
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str page_cursor: Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)
        :param str sort_by: Set field to sort by
        :param str sort_direction: Set sorting direction
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_to: Retrieve entities to their creation date
        :param str created_from: Retrieve entities from their creation date
        :param str modified_to: Retrieve entities to their modification date
        :param str modified_from: Retrieve entities from their modification date
        :param str store_id: Store Id
        :param str ids: Retrieves orders specified by ids
        :param str order_ids: Retrieves orders specified by order ids
        :param str ebay_order_status: Retrieves orders specified by order status
        :param str basket_id: Retrieves order’s info specified by basket id.
        :param str financial_status: Retrieves orders specified by financial status
        :param str fulfillment_status: Create order with fulfillment status
        :param str shipping_method: Retrieve entities according to shipping method
        :param str skip_order_ids: Skipped orders by ids
        :param int since_id: Retrieve entities starting from the specified id.
        :param bool is_deleted: Filter deleted orders
        :param str shipping_country_iso3: Retrieve entities according to shipping country
        :param bool enable_cache: If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
        :param str delivery_method: Retrieves order with delivery method
        :return: ModelResponseOrderList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_list_with_http_info(self, **kwargs):  # noqa: E501
        """order_list  # noqa: E501

        Get list of orders from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str customer_id: Retrieves orders specified by customer id
        :param str customer_email: Retrieves orders specified by customer email
        :param str phone: Filter orders by customer's phone number
        :param str order_status: Retrieves orders specified by order status
        :param list[str] order_status_ids: Retrieves orders specified by order statuses
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str page_cursor: Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)
        :param str sort_by: Set field to sort by
        :param str sort_direction: Set sorting direction
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_to: Retrieve entities to their creation date
        :param str created_from: Retrieve entities from their creation date
        :param str modified_to: Retrieve entities to their modification date
        :param str modified_from: Retrieve entities from their modification date
        :param str store_id: Store Id
        :param str ids: Retrieves orders specified by ids
        :param str order_ids: Retrieves orders specified by order ids
        :param str ebay_order_status: Retrieves orders specified by order status
        :param str basket_id: Retrieves order’s info specified by basket id.
        :param str financial_status: Retrieves orders specified by financial status
        :param str fulfillment_status: Create order with fulfillment status
        :param str shipping_method: Retrieve entities according to shipping method
        :param str skip_order_ids: Skipped orders by ids
        :param int since_id: Retrieve entities starting from the specified id.
        :param bool is_deleted: Filter deleted orders
        :param str shipping_country_iso3: Retrieve entities according to shipping country
        :param bool enable_cache: If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
        :param str delivery_method: Retrieves order with delivery method
        :return: ModelResponseOrderList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'customer_email', 'phone', 'order_status', 'order_status_ids', 'start', 'count', 'page_cursor', 'sort_by', 'sort_direction', 'params', 'exclude', 'created_to', 'created_from', 'modified_to', 'modified_from', 'store_id', 'ids', 'order_ids', 'ebay_order_status', 'basket_id', 'financial_status', 'fulfillment_status', 'shipping_method', 'skip_order_ids', 'since_id', 'is_deleted', 'shipping_country_iso3', 'enable_cache', 'delivery_method']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'customer_id' in params:
            query_params.append(('customer_id', params['customer_id']))  # noqa: E501
        if 'customer_email' in params:
            query_params.append(('customer_email', params['customer_email']))  # noqa: E501
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'order_status' in params:
            query_params.append(('order_status', params['order_status']))  # noqa: E501
        if 'order_status_ids' in params:
            query_params.append(('order_status_ids', params['order_status_ids']))  # noqa: E501
            collection_formats['order_status_ids'] = 'csv'  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sort_direction' in params:
            query_params.append(('sort_direction', params['sort_direction']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'modified_to' in params:
            query_params.append(('modified_to', params['modified_to']))  # noqa: E501
        if 'modified_from' in params:
            query_params.append(('modified_from', params['modified_from']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'order_ids' in params:
            query_params.append(('order_ids', params['order_ids']))  # noqa: E501
        if 'ebay_order_status' in params:
            query_params.append(('ebay_order_status', params['ebay_order_status']))  # noqa: E501
        if 'basket_id' in params:
            query_params.append(('basket_id', params['basket_id']))  # noqa: E501
        if 'financial_status' in params:
            query_params.append(('financial_status', params['financial_status']))  # noqa: E501
        if 'fulfillment_status' in params:
            query_params.append(('fulfillment_status', params['fulfillment_status']))  # noqa: E501
        if 'shipping_method' in params:
            query_params.append(('shipping_method', params['shipping_method']))  # noqa: E501
        if 'skip_order_ids' in params:
            query_params.append(('skip_order_ids', params['skip_order_ids']))  # noqa: E501
        if 'since_id' in params:
            query_params.append(('since_id', params['since_id']))  # noqa: E501
        if 'is_deleted' in params:
            query_params.append(('is_deleted', params['is_deleted']))  # noqa: E501
        if 'shipping_country_iso3' in params:
            query_params.append(('shipping_country_iso3', params['shipping_country_iso3']))  # noqa: E501
        if 'enable_cache' in params:
            query_params.append(('enable_cache', params['enable_cache']))  # noqa: E501
        if 'delivery_method' in params:
            query_params.append(('delivery_method', params['delivery_method']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseOrderList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_refund_add(self, body, **kwargs):  # noqa: E501
        """order_refund_add  # noqa: E501

        Add a refund to the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_refund_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderRefundAdd body: (required)
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_refund_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.order_refund_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def order_refund_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """order_refund_add  # noqa: E501

        Add a refund to the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_refund_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderRefundAdd body: (required)
        :return: InlineResponse20053
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_refund_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `order_refund_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.refund.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20053',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_shipment_add(self, body, **kwargs):  # noqa: E501
        """order_shipment_add  # noqa: E501

        Add a shipment to the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderShipmentAdd body: (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_shipment_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.order_shipment_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def order_shipment_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """order_shipment_add  # noqa: E501

        Add a shipment to the order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderShipmentAdd body: (required)
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_shipment_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `order_shipment_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.shipment.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_shipment_delete(self, shipment_id, order_id, **kwargs):  # noqa: E501
        """order_shipment_delete  # noqa: E501

        Delete order's shipment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_delete(shipment_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_id: Shipment id indicates the number of delivery (required)
        :param str order_id: Defines the order for which the shipment will be deleted (required)
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_shipment_delete_with_http_info(shipment_id, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.order_shipment_delete_with_http_info(shipment_id, order_id, **kwargs)  # noqa: E501
            return data

    def order_shipment_delete_with_http_info(self, shipment_id, order_id, **kwargs):  # noqa: E501
        """order_shipment_delete  # noqa: E501

        Delete order's shipment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_delete_with_http_info(shipment_id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shipment_id: Shipment id indicates the number of delivery (required)
        :param str order_id: Defines the order for which the shipment will be deleted (required)
        :return: InlineResponse20051
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shipment_id', 'order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_shipment_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shipment_id' is set
        if ('shipment_id' not in params or
                params['shipment_id'] is None):
            raise ValueError("Missing the required parameter `shipment_id` when calling `order_shipment_delete`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `order_shipment_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'shipment_id' in params:
            query_params.append(('shipment_id', params['shipment_id']))  # noqa: E501
        if 'order_id' in params:
            query_params.append(('order_id', params['order_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.shipment.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20051',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_shipment_list(self, order_id, **kwargs):  # noqa: E501
        """order_shipment_list  # noqa: E501

        Get list of shipments by orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_list(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Retrieves shipments specified by order id (required)
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str store_id: Store Id
        :return: ModelResponseOrderShipmentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_shipment_list_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.order_shipment_list_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def order_shipment_list_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """order_shipment_list  # noqa: E501

        Get list of shipments by orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_list_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Retrieves shipments specified by order id (required)
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str created_from: Retrieve entities from their creation date
        :param str created_to: Retrieve entities to their creation date
        :param str store_id: Store Id
        :return: ModelResponseOrderShipmentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'page_cursor', 'start', 'count', 'params', 'exclude', 'created_from', 'created_to', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_shipment_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `order_shipment_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('order_id', params['order_id']))  # noqa: E501
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'created_from' in params:
            query_params.append(('created_from', params['created_from']))  # noqa: E501
        if 'created_to' in params:
            query_params.append(('created_to', params['created_to']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.shipment.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseOrderShipmentList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_shipment_tracking_add(self, body, **kwargs):  # noqa: E501
        """order_shipment_tracking_add  # noqa: E501

        Add order shipment's tracking info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_tracking_add(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderShipmentTrackingAdd body: (required)
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_shipment_tracking_add_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.order_shipment_tracking_add_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def order_shipment_tracking_add_with_http_info(self, body, **kwargs):  # noqa: E501
        """order_shipment_tracking_add  # noqa: E501

        Add order shipment's tracking info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_tracking_add_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderShipmentTrackingAdd body: (required)
        :return: InlineResponse20052
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_shipment_tracking_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `order_shipment_tracking_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.shipment.tracking.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20052',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_shipment_update(self, body, **kwargs):  # noqa: E501
        """order_shipment_update  # noqa: E501

        Update order's shipment information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderShipmentUpdate body: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_shipment_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.order_shipment_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def order_shipment_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """order_shipment_update  # noqa: E501

        Update order's shipment information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_shipment_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OrderShipmentUpdate body: (required)
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_shipment_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `order_shipment_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.shipment.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_status_list(self, **kwargs):  # noqa: E501
        """order_status_list  # noqa: E501

        Retrieve list of statuses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_status_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: Store Id
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_status_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_status_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_status_list_with_http_info(self, **kwargs):  # noqa: E501
        """order_status_list  # noqa: E501

        Retrieve list of statuses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_status_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str store_id: Store Id
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_status_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.status.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_update(self, order_id, **kwargs):  # noqa: E501
        """order_update  # noqa: E501

        Update existing order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_update(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Defines the orders specified by order id (required)
        :param str store_id: Defines store id where the order should be found
        :param str order_status: Defines new order's status
        :param str comment: Specifies order comment
        :param str admin_comment: Specifies admin's order comment
        :param str admin_private_comment: Specifies private admin's order comment
        :param str date_modified: Specifies order's  modification date
        :param str date_finished: Specifies order's  finished date
        :param str financial_status: Update order financial status to specified
        :param str order_payment_method: Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
        :param bool send_notifications: Send notifications to customer after order was created
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_update_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.order_update_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def order_update_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """order_update  # noqa: E501

        Update existing order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_update_with_http_info(order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str order_id: Defines the orders specified by order id (required)
        :param str store_id: Defines store id where the order should be found
        :param str order_status: Defines new order's status
        :param str comment: Specifies order comment
        :param str admin_comment: Specifies admin's order comment
        :param str admin_private_comment: Specifies private admin's order comment
        :param str date_modified: Specifies order's  modification date
        :param str date_finished: Specifies order's  finished date
        :param str financial_status: Update order financial status to specified
        :param str order_payment_method: Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
        :param bool send_notifications: Send notifications to customer after order was created
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'store_id', 'order_status', 'comment', 'admin_comment', 'admin_private_comment', 'date_modified', 'date_finished', 'financial_status', 'order_payment_method', 'send_notifications']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `order_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('order_id', params['order_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'order_status' in params:
            query_params.append(('order_status', params['order_status']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'admin_comment' in params:
            query_params.append(('admin_comment', params['admin_comment']))  # noqa: E501
        if 'admin_private_comment' in params:
            query_params.append(('admin_private_comment', params['admin_private_comment']))  # noqa: E501
        if 'date_modified' in params:
            query_params.append(('date_modified', params['date_modified']))  # noqa: E501
        if 'date_finished' in params:
            query_params.append(('date_finished', params['date_finished']))  # noqa: E501
        if 'financial_status' in params:
            query_params.append(('financial_status', params['financial_status']))  # noqa: E501
        if 'order_payment_method' in params:
            query_params.append(('order_payment_method', params['order_payment_method']))  # noqa: E501
        if 'send_notifications' in params:
            query_params.append(('send_notifications', params['send_notifications']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/order.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
