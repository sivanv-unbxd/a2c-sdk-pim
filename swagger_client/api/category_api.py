# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CategoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def category_add(self, name, **kwargs):  # noqa: E501
        """category_add  # noqa: E501

        Add new category in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_add(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Defines category's name that has to be added (required)
        :param str parent_id: Adds categories specified by parent id
        :param str stores_ids: Create category in the stores that is specified by comma-separated stores' id
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param bool avail: Defines category's visibility status
        :param int sort_order: Sort number in the list
        :param str created_time: Entity's date creation
        :param str modified_time: Entity's date modification
        :param str description: Defines category's description
        :param str meta_title: Defines unique meta title for each entity
        :param str meta_description: Defines unique meta description of a entity
        :param str meta_keywords: Defines unique meta keywords for each entity
        :param str seo_url: Defines unique category's URL for SEO
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_add_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.category_add_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def category_add_with_http_info(self, name, **kwargs):  # noqa: E501
        """category_add  # noqa: E501

        Add new category in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_add_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Defines category's name that has to be added (required)
        :param str parent_id: Adds categories specified by parent id
        :param str stores_ids: Create category in the stores that is specified by comma-separated stores' id
        :param str store_id: Store Id
        :param str lang_id: Language id
        :param bool avail: Defines category's visibility status
        :param int sort_order: Sort number in the list
        :param str created_time: Entity's date creation
        :param str modified_time: Entity's date modification
        :param str description: Defines category's description
        :param str meta_title: Defines unique meta title for each entity
        :param str meta_description: Defines unique meta description of a entity
        :param str meta_keywords: Defines unique meta keywords for each entity
        :param str seo_url: Defines unique category's URL for SEO
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'parent_id', 'stores_ids', 'store_id', 'lang_id', 'avail', 'sort_order', 'created_time', 'modified_time', 'description', 'meta_title', 'meta_description', 'meta_keywords', 'seo_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `category_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'parent_id' in params:
            query_params.append(('parent_id', params['parent_id']))  # noqa: E501
        if 'stores_ids' in params:
            query_params.append(('stores_ids', params['stores_ids']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'avail' in params:
            query_params.append(('avail', params['avail']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'created_time' in params:
            query_params.append(('created_time', params['created_time']))  # noqa: E501
        if 'modified_time' in params:
            query_params.append(('modified_time', params['modified_time']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'meta_title' in params:
            query_params.append(('meta_title', params['meta_title']))  # noqa: E501
        if 'meta_description' in params:
            query_params.append(('meta_description', params['meta_description']))  # noqa: E501
        if 'meta_keywords' in params:
            query_params.append(('meta_keywords', params['meta_keywords']))  # noqa: E501
        if 'seo_url' in params:
            query_params.append(('seo_url', params['seo_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_assign(self, product_id, category_id, **kwargs):  # noqa: E501
        """category_assign  # noqa: E501

        Assign category to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_assign(product_id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines category assign to the product, specified by product id (required)
        :param str category_id: Defines category assign, specified by category id (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_assign_with_http_info(product_id, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.category_assign_with_http_info(product_id, category_id, **kwargs)  # noqa: E501
            return data

    def category_assign_with_http_info(self, product_id, category_id, **kwargs):  # noqa: E501
        """category_assign  # noqa: E501

        Assign category to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_assign_with_http_info(product_id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_id: Defines category assign to the product, specified by product id (required)
        :param str category_id: Defines category assign, specified by category id (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_assign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `category_assign`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `category_assign`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'category_id' in params:
            query_params.append(('category_id', params['category_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.assign.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_count(self, **kwargs):  # noqa: E501
        """category_count  # noqa: E501

        Count categories in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_id: Counts categories specified by parent id
        :param str store_id: Counts category specified by store id
        :param str lang_id: Counts category specified by language id
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.category_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def category_count_with_http_info(self, **kwargs):  # noqa: E501
        """category_count  # noqa: E501

        Count categories in store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str parent_id: Counts categories specified by parent id
        :param str store_id: Counts category specified by store id
        :param str lang_id: Counts category specified by language id
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent_id', 'store_id', 'lang_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parent_id', params['parent_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.count.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_delete(self, id, **kwargs):  # noqa: E501
        """category_delete  # noqa: E501

        Delete category in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines category removal, specified by category id (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.category_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def category_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """category_delete  # noqa: E501

        Delete category in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines category removal, specified by category id (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `category_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_find(self, find_value, **kwargs):  # noqa: E501
        """category_find  # noqa: E501

        Search category in store. \"Laptop\" is specified here by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_find(find_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str find_value: Entity search that is specified by some value (required)
        :param str find_where: Entity search that is specified by the comma-separated unique fields
        :param str find_params: Entity search that is specified by comma-separated parameters
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_find_with_http_info(find_value, **kwargs)  # noqa: E501
        else:
            (data) = self.category_find_with_http_info(find_value, **kwargs)  # noqa: E501
            return data

    def category_find_with_http_info(self, find_value, **kwargs):  # noqa: E501
        """category_find  # noqa: E501

        Search category in store. \"Laptop\" is specified here by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_find_with_http_info(find_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str find_value: Entity search that is specified by some value (required)
        :param str find_where: Entity search that is specified by the comma-separated unique fields
        :param str find_params: Entity search that is specified by comma-separated parameters
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['find_value', 'find_where', 'find_params']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'find_value' is set
        if ('find_value' not in params or
                params['find_value'] is None):
            raise ValueError("Missing the required parameter `find_value` when calling `category_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'find_value' in params:
            query_params.append(('find_value', params['find_value']))  # noqa: E501
        if 'find_where' in params:
            query_params.append(('find_where', params['find_where']))  # noqa: E501
        if 'find_params' in params:
            query_params.append(('find_params', params['find_params']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.find.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20040',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_image_add(self, category_id, image_name, url, type, **kwargs):  # noqa: E501
        """category_image_add  # noqa: E501

        Add image to category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_image_add(category_id, image_name, url, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: Defines category id where the image should be added (required)
        :param str image_name: Defines image's name (required)
        :param str url: Defines URL of the image that has to be added (required)
        :param str type: Defines image's types that are specified by comma-separated list (required)
        :param str label: Defines alternative text that has to be attached to the picture
        :param str mime: Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
        :param int position: Defines image’s position in the list
        :param str store_id: Store Id
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_image_add_with_http_info(category_id, image_name, url, type, **kwargs)  # noqa: E501
        else:
            (data) = self.category_image_add_with_http_info(category_id, image_name, url, type, **kwargs)  # noqa: E501
            return data

    def category_image_add_with_http_info(self, category_id, image_name, url, type, **kwargs):  # noqa: E501
        """category_image_add  # noqa: E501

        Add image to category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_image_add_with_http_info(category_id, image_name, url, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: Defines category id where the image should be added (required)
        :param str image_name: Defines image's name (required)
        :param str url: Defines URL of the image that has to be added (required)
        :param str type: Defines image's types that are specified by comma-separated list (required)
        :param str label: Defines alternative text that has to be attached to the picture
        :param str mime: Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
        :param int position: Defines image’s position in the list
        :param str store_id: Store Id
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'image_name', 'url', 'type', 'label', 'mime', 'position', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_image_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `category_image_add`")  # noqa: E501
        # verify the required parameter 'image_name' is set
        if ('image_name' not in params or
                params['image_name'] is None):
            raise ValueError("Missing the required parameter `image_name` when calling `category_image_add`")  # noqa: E501
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `category_image_add`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `category_image_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category_id' in params:
            query_params.append(('category_id', params['category_id']))  # noqa: E501
        if 'image_name' in params:
            query_params.append(('image_name', params['image_name']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'label' in params:
            query_params.append(('label', params['label']))  # noqa: E501
        if 'mime' in params:
            query_params.append(('mime', params['mime']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.image.add.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_image_delete(self, category_id, image_id, **kwargs):  # noqa: E501
        """category_image_delete  # noqa: E501

        Delete image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_image_delete(category_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: Defines category id where the image should be deleted (required)
        :param str image_id: Define image id (required)
        :param str store_id: Store Id
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_image_delete_with_http_info(category_id, image_id, **kwargs)  # noqa: E501
        else:
            (data) = self.category_image_delete_with_http_info(category_id, image_id, **kwargs)  # noqa: E501
            return data

    def category_image_delete_with_http_info(self, category_id, image_id, **kwargs):  # noqa: E501
        """category_image_delete  # noqa: E501

        Delete image  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_image_delete_with_http_info(category_id, image_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: Defines category id where the image should be deleted (required)
        :param str image_id: Define image id (required)
        :param str store_id: Store Id
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'image_id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_image_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `category_image_delete`")  # noqa: E501
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params or
                params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `category_image_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category_id' in params:
            query_params.append(('category_id', params['category_id']))  # noqa: E501
        if 'image_id' in params:
            query_params.append(('image_id', params['image_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.image.delete.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_info(self, id, **kwargs):  # noqa: E501
        """category_info  # noqa: E501

        Get category info about category ID*** or specify other category ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Retrieves category's info specified by category id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves category info  specified by store id
        :param str lang_id: Retrieves category info  specified by language id
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_info_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.category_info_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def category_info_with_http_info(self, id, **kwargs):  # noqa: E501
        """category_info  # noqa: E501

        Get category info about category ID*** or specify other category ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_info_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Retrieves category's info specified by category id (required)
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves category info  specified by store id
        :param str lang_id: Retrieves category info  specified by language id
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'params', 'exclude', 'store_id', 'lang_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `category_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.info.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_list(self, **kwargs):  # noqa: E501
        """category_list  # noqa: E501

        Get list of categories from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param str parent_id: Retrieves categories specified by parent id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves categories specified by store id
        :param str lang_id: Retrieves categorys specified by language id
        :return: ModelResponseCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.category_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def category_list_with_http_info(self, **kwargs):  # noqa: E501
        """category_list  # noqa: E501

        Get list of categories from store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: This parameter sets the number from which you want to get entities
        :param int count: This parameter sets the entity amount that has to be retrieved. Max allowed count=250
        :param str page_cursor: Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
        :param str parent_id: Retrieves categories specified by parent id
        :param str params: Set this parameter in order to choose which entity fields you want to retrieve
        :param str exclude: Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
        :param str store_id: Retrieves categories specified by store id
        :param str lang_id: Retrieves categorys specified by language id
        :return: ModelResponseCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'page_cursor', 'parent_id', 'params', 'exclude', 'store_id', 'lang_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'page_cursor' in params:
            query_params.append(('page_cursor', params['page_cursor']))  # noqa: E501
        if 'parent_id' in params:
            query_params.append(('parent_id', params['parent_id']))  # noqa: E501
        if 'params' in params:
            query_params.append(('params', params['params']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.list.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelResponseCategoryList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_unassign(self, category_id, product_id, **kwargs):  # noqa: E501
        """category_unassign  # noqa: E501

        Unassign category to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_unassign(category_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: Defines category unassign, specified by category id (required)
        :param str product_id: Defines category unassign to the product, specified by product id (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_unassign_with_http_info(category_id, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.category_unassign_with_http_info(category_id, product_id, **kwargs)  # noqa: E501
            return data

    def category_unassign_with_http_info(self, category_id, product_id, **kwargs):  # noqa: E501
        """category_unassign  # noqa: E501

        Unassign category to product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_unassign_with_http_info(category_id, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category_id: Defines category unassign, specified by category id (required)
        :param str product_id: Defines category unassign to the product, specified by product id (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_unassign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `category_unassign`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `category_unassign`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category_id' in params:
            query_params.append(('category_id', params['category_id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('product_id', params['product_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.unassign.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_update(self, id, **kwargs):  # noqa: E501
        """category_update  # noqa: E501

        Update category in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines category update specified by category id (required)
        :param str name: Defines new category’s name
        :param str parent_id: Defines new parent category id
        :param str stores_ids: Update category in the stores that is specified by comma-separated stores' id
        :param bool avail: Defines category's visibility status
        :param int sort_order: Sort number in the list
        :param str modified_time: Entity's date modification
        :param str description: Defines new category's description
        :param str meta_title: Defines unique meta title for each entity
        :param str meta_description: Defines unique meta description of a entity
        :param str meta_keywords: Defines unique meta keywords for each entity
        :param str seo_url: Defines unique category's URL for SEO
        :param str lang_id: Language id
        :param str store_id: Store Id
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.category_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def category_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """category_update  # noqa: E501

        Update category in store  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Defines category update specified by category id (required)
        :param str name: Defines new category’s name
        :param str parent_id: Defines new parent category id
        :param str stores_ids: Update category in the stores that is specified by comma-separated stores' id
        :param bool avail: Defines category's visibility status
        :param int sort_order: Sort number in the list
        :param str modified_time: Entity's date modification
        :param str description: Defines new category's description
        :param str meta_title: Defines unique meta title for each entity
        :param str meta_description: Defines unique meta description of a entity
        :param str meta_keywords: Defines unique meta keywords for each entity
        :param str seo_url: Defines unique category's URL for SEO
        :param str lang_id: Language id
        :param str store_id: Store Id
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'parent_id', 'stores_ids', 'avail', 'sort_order', 'modified_time', 'description', 'meta_title', 'meta_description', 'meta_keywords', 'seo_url', 'lang_id', 'store_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `category_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'parent_id' in params:
            query_params.append(('parent_id', params['parent_id']))  # noqa: E501
        if 'stores_ids' in params:
            query_params.append(('stores_ids', params['stores_ids']))  # noqa: E501
        if 'avail' in params:
            query_params.append(('avail', params['avail']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'modified_time' in params:
            query_params.append(('modified_time', params['modified_time']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'meta_title' in params:
            query_params.append(('meta_title', params['meta_title']))  # noqa: E501
        if 'meta_description' in params:
            query_params.append(('meta_description', params['meta_description']))  # noqa: E501
        if 'meta_keywords' in params:
            query_params.append(('meta_keywords', params['meta_keywords']))  # noqa: E501
        if 'seo_url' in params:
            query_params.append(('seo_url', params['seo_url']))  # noqa: E501
        if 'lang_id' in params:
            query_params.append(('lang_id', params['lang_id']))  # noqa: E501
        if 'store_id' in params:
            query_params.append(('store_id', params['store_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key', 'store_key']  # noqa: E501

        return self.api_client.call_api(
            '/category.update.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
