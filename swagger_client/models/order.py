# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'order_id': 'str',
        'basket_id': 'str',
        'channel_id': 'str',
        'customer': 'BaseCustomer',
        'create_at': 'A2CDateTime',
        'currency': 'Currency',
        'shipping_address': 'CustomerAddress',
        'billing_address': 'CustomerAddress',
        'payment_method': 'OrderPaymentMethod',
        'shipping_method': 'OrderShippingMethod',
        'shipping_methods': 'list[OrderShippingMethod]',
        'status': 'OrderStatus',
        'totals': 'OrderTotals',
        'total': 'OrderTotal',
        'discounts': 'list[OrderTotalsNewDiscount]',
        'order_products': 'list[OrderItem]',
        'bundles': 'list[OrderItem]',
        'modified_at': 'A2CDateTime',
        'finished_time': 'A2CDateTime',
        'comment': 'str',
        'store_id': 'str',
        'warehouses_ids': 'list[str]',
        'refunds': 'list[OrderRefund]',
        'gift_message': 'str',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'order_id': 'order_id',
        'basket_id': 'basket_id',
        'channel_id': 'channel_id',
        'customer': 'customer',
        'create_at': 'create_at',
        'currency': 'currency',
        'shipping_address': 'shipping_address',
        'billing_address': 'billing_address',
        'payment_method': 'payment_method',
        'shipping_method': 'shipping_method',
        'shipping_methods': 'shipping_methods',
        'status': 'status',
        'totals': 'totals',
        'total': 'total',
        'discounts': 'discounts',
        'order_products': 'order_products',
        'bundles': 'bundles',
        'modified_at': 'modified_at',
        'finished_time': 'finished_time',
        'comment': 'comment',
        'store_id': 'store_id',
        'warehouses_ids': 'warehouses_ids',
        'refunds': 'refunds',
        'gift_message': 'gift_message',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, order_id=None, basket_id=None, channel_id=None, customer=None, create_at=None, currency=None, shipping_address=None, billing_address=None, payment_method=None, shipping_method=None, shipping_methods=None, status=None, totals=None, total=None, discounts=None, order_products=None, bundles=None, modified_at=None, finished_time=None, comment=None, store_id=None, warehouses_ids=None, refunds=None, gift_message=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._order_id = None
        self._basket_id = None
        self._channel_id = None
        self._customer = None
        self._create_at = None
        self._currency = None
        self._shipping_address = None
        self._billing_address = None
        self._payment_method = None
        self._shipping_method = None
        self._shipping_methods = None
        self._status = None
        self._totals = None
        self._total = None
        self._discounts = None
        self._order_products = None
        self._bundles = None
        self._modified_at = None
        self._finished_time = None
        self._comment = None
        self._store_id = None
        self._warehouses_ids = None
        self._refunds = None
        self._gift_message = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if order_id is not None:
            self.order_id = order_id
        if basket_id is not None:
            self.basket_id = basket_id
        if channel_id is not None:
            self.channel_id = channel_id
        if customer is not None:
            self.customer = customer
        if create_at is not None:
            self.create_at = create_at
        if currency is not None:
            self.currency = currency
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if billing_address is not None:
            self.billing_address = billing_address
        if payment_method is not None:
            self.payment_method = payment_method
        if shipping_method is not None:
            self.shipping_method = shipping_method
        if shipping_methods is not None:
            self.shipping_methods = shipping_methods
        if status is not None:
            self.status = status
        if totals is not None:
            self.totals = totals
        if total is not None:
            self.total = total
        if discounts is not None:
            self.discounts = discounts
        if order_products is not None:
            self.order_products = order_products
        if bundles is not None:
            self.bundles = bundles
        if modified_at is not None:
            self.modified_at = modified_at
        if finished_time is not None:
            self.finished_time = finished_time
        if comment is not None:
            self.comment = comment
        if store_id is not None:
            self.store_id = store_id
        if warehouses_ids is not None:
            self.warehouses_ids = warehouses_ids
        if refunds is not None:
            self.refunds = refunds
        if gift_message is not None:
            self.gift_message = gift_message
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Order.  # noqa: E501


        :return: The id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.


        :param id: The id of this Order.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def order_id(self):
        """Gets the order_id of this Order.  # noqa: E501


        :return: The order_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Order.


        :param order_id: The order_id of this Order.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def basket_id(self):
        """Gets the basket_id of this Order.  # noqa: E501


        :return: The basket_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._basket_id

    @basket_id.setter
    def basket_id(self, basket_id):
        """Sets the basket_id of this Order.


        :param basket_id: The basket_id of this Order.  # noqa: E501
        :type: str
        """

        self._basket_id = basket_id

    @property
    def channel_id(self):
        """Gets the channel_id of this Order.  # noqa: E501


        :return: The channel_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this Order.


        :param channel_id: The channel_id of this Order.  # noqa: E501
        :type: str
        """

        self._channel_id = channel_id

    @property
    def customer(self):
        """Gets the customer of this Order.  # noqa: E501


        :return: The customer of this Order.  # noqa: E501
        :rtype: BaseCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Order.


        :param customer: The customer of this Order.  # noqa: E501
        :type: BaseCustomer
        """

        self._customer = customer

    @property
    def create_at(self):
        """Gets the create_at of this Order.  # noqa: E501


        :return: The create_at of this Order.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this Order.


        :param create_at: The create_at of this Order.  # noqa: E501
        :type: A2CDateTime
        """

        self._create_at = create_at

    @property
    def currency(self):
        """Gets the currency of this Order.  # noqa: E501


        :return: The currency of this Order.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Order.


        :param currency: The currency of this Order.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Order.  # noqa: E501


        :return: The shipping_address of this Order.  # noqa: E501
        :rtype: CustomerAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Order.


        :param shipping_address: The shipping_address of this Order.  # noqa: E501
        :type: CustomerAddress
        """

        self._shipping_address = shipping_address

    @property
    def billing_address(self):
        """Gets the billing_address of this Order.  # noqa: E501


        :return: The billing_address of this Order.  # noqa: E501
        :rtype: CustomerAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Order.


        :param billing_address: The billing_address of this Order.  # noqa: E501
        :type: CustomerAddress
        """

        self._billing_address = billing_address

    @property
    def payment_method(self):
        """Gets the payment_method of this Order.  # noqa: E501


        :return: The payment_method of this Order.  # noqa: E501
        :rtype: OrderPaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Order.


        :param payment_method: The payment_method of this Order.  # noqa: E501
        :type: OrderPaymentMethod
        """

        self._payment_method = payment_method

    @property
    def shipping_method(self):
        """Gets the shipping_method of this Order.  # noqa: E501


        :return: The shipping_method of this Order.  # noqa: E501
        :rtype: OrderShippingMethod
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """Sets the shipping_method of this Order.


        :param shipping_method: The shipping_method of this Order.  # noqa: E501
        :type: OrderShippingMethod
        """

        self._shipping_method = shipping_method

    @property
    def shipping_methods(self):
        """Gets the shipping_methods of this Order.  # noqa: E501


        :return: The shipping_methods of this Order.  # noqa: E501
        :rtype: list[OrderShippingMethod]
        """
        return self._shipping_methods

    @shipping_methods.setter
    def shipping_methods(self, shipping_methods):
        """Sets the shipping_methods of this Order.


        :param shipping_methods: The shipping_methods of this Order.  # noqa: E501
        :type: list[OrderShippingMethod]
        """

        self._shipping_methods = shipping_methods

    @property
    def status(self):
        """Gets the status of this Order.  # noqa: E501


        :return: The status of this Order.  # noqa: E501
        :rtype: OrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.


        :param status: The status of this Order.  # noqa: E501
        :type: OrderStatus
        """

        self._status = status

    @property
    def totals(self):
        """Gets the totals of this Order.  # noqa: E501


        :return: The totals of this Order.  # noqa: E501
        :rtype: OrderTotals
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this Order.


        :param totals: The totals of this Order.  # noqa: E501
        :type: OrderTotals
        """

        self._totals = totals

    @property
    def total(self):
        """Gets the total of this Order.  # noqa: E501


        :return: The total of this Order.  # noqa: E501
        :rtype: OrderTotal
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Order.


        :param total: The total of this Order.  # noqa: E501
        :type: OrderTotal
        """

        self._total = total

    @property
    def discounts(self):
        """Gets the discounts of this Order.  # noqa: E501


        :return: The discounts of this Order.  # noqa: E501
        :rtype: list[OrderTotalsNewDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this Order.


        :param discounts: The discounts of this Order.  # noqa: E501
        :type: list[OrderTotalsNewDiscount]
        """

        self._discounts = discounts

    @property
    def order_products(self):
        """Gets the order_products of this Order.  # noqa: E501


        :return: The order_products of this Order.  # noqa: E501
        :rtype: list[OrderItem]
        """
        return self._order_products

    @order_products.setter
    def order_products(self, order_products):
        """Sets the order_products of this Order.


        :param order_products: The order_products of this Order.  # noqa: E501
        :type: list[OrderItem]
        """

        self._order_products = order_products

    @property
    def bundles(self):
        """Gets the bundles of this Order.  # noqa: E501


        :return: The bundles of this Order.  # noqa: E501
        :rtype: list[OrderItem]
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this Order.


        :param bundles: The bundles of this Order.  # noqa: E501
        :type: list[OrderItem]
        """

        self._bundles = bundles

    @property
    def modified_at(self):
        """Gets the modified_at of this Order.  # noqa: E501


        :return: The modified_at of this Order.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Order.


        :param modified_at: The modified_at of this Order.  # noqa: E501
        :type: A2CDateTime
        """

        self._modified_at = modified_at

    @property
    def finished_time(self):
        """Gets the finished_time of this Order.  # noqa: E501


        :return: The finished_time of this Order.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._finished_time

    @finished_time.setter
    def finished_time(self, finished_time):
        """Sets the finished_time of this Order.


        :param finished_time: The finished_time of this Order.  # noqa: E501
        :type: A2CDateTime
        """

        self._finished_time = finished_time

    @property
    def comment(self):
        """Gets the comment of this Order.  # noqa: E501


        :return: The comment of this Order.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Order.


        :param comment: The comment of this Order.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def store_id(self):
        """Gets the store_id of this Order.  # noqa: E501


        :return: The store_id of this Order.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this Order.


        :param store_id: The store_id of this Order.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def warehouses_ids(self):
        """Gets the warehouses_ids of this Order.  # noqa: E501


        :return: The warehouses_ids of this Order.  # noqa: E501
        :rtype: list[str]
        """
        return self._warehouses_ids

    @warehouses_ids.setter
    def warehouses_ids(self, warehouses_ids):
        """Sets the warehouses_ids of this Order.


        :param warehouses_ids: The warehouses_ids of this Order.  # noqa: E501
        :type: list[str]
        """

        self._warehouses_ids = warehouses_ids

    @property
    def refunds(self):
        """Gets the refunds of this Order.  # noqa: E501


        :return: The refunds of this Order.  # noqa: E501
        :rtype: list[OrderRefund]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this Order.


        :param refunds: The refunds of this Order.  # noqa: E501
        :type: list[OrderRefund]
        """

        self._refunds = refunds

    @property
    def gift_message(self):
        """Gets the gift_message of this Order.  # noqa: E501


        :return: The gift_message of this Order.  # noqa: E501
        :rtype: str
        """
        return self._gift_message

    @gift_message.setter
    def gift_message(self, gift_message):
        """Sets the gift_message of this Order.


        :param gift_message: The gift_message of this Order.  # noqa: E501
        :type: str
        """

        self._gift_message = gift_message

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Order.  # noqa: E501


        :return: The additional_fields of this Order.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Order.


        :param additional_fields: The additional_fields of this Order.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Order.  # noqa: E501


        :return: The custom_fields of this Order.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Order.


        :param custom_fields: The custom_fields of this Order.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
