# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartStoreInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_id': 'str',
        'name': 'str',
        'language': 'str',
        'store_languages': 'list[Language]',
        'currency': 'Currency',
        'store_currencies': 'list[Currency]',
        'timezone': 'str',
        'country': 'str',
        'root_category_id': 'str',
        'multi_store_url': 'str',
        'active': 'bool',
        'weight_unit': 'str',
        'dimension_unit': 'str',
        'prices_include_tax': 'bool',
        'carrier_info': 'list[Carrier]',
        'store_owner_info': 'Info',
        'default_warehouse_id': 'str',
        'channels': 'list[CartChannel]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'store_id': 'store_id',
        'name': 'name',
        'language': 'language',
        'store_languages': 'store_languages',
        'currency': 'currency',
        'store_currencies': 'store_currencies',
        'timezone': 'timezone',
        'country': 'country',
        'root_category_id': 'root_category_id',
        'multi_store_url': 'multi_store_url',
        'active': 'active',
        'weight_unit': 'weight_unit',
        'dimension_unit': 'dimension_unit',
        'prices_include_tax': 'prices_include_tax',
        'carrier_info': 'carrier_info',
        'store_owner_info': 'store_owner_info',
        'default_warehouse_id': 'default_warehouse_id',
        'channels': 'channels',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, store_id=None, name=None, language=None, store_languages=None, currency=None, store_currencies=None, timezone=None, country=None, root_category_id=None, multi_store_url=None, active=None, weight_unit=None, dimension_unit=None, prices_include_tax=None, carrier_info=None, store_owner_info=None, default_warehouse_id=None, channels=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """CartStoreInfo - a model defined in Swagger"""  # noqa: E501

        self._store_id = None
        self._name = None
        self._language = None
        self._store_languages = None
        self._currency = None
        self._store_currencies = None
        self._timezone = None
        self._country = None
        self._root_category_id = None
        self._multi_store_url = None
        self._active = None
        self._weight_unit = None
        self._dimension_unit = None
        self._prices_include_tax = None
        self._carrier_info = None
        self._store_owner_info = None
        self._default_warehouse_id = None
        self._channels = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if store_id is not None:
            self.store_id = store_id
        if name is not None:
            self.name = name
        if language is not None:
            self.language = language
        if store_languages is not None:
            self.store_languages = store_languages
        if currency is not None:
            self.currency = currency
        if store_currencies is not None:
            self.store_currencies = store_currencies
        if timezone is not None:
            self.timezone = timezone
        if country is not None:
            self.country = country
        if root_category_id is not None:
            self.root_category_id = root_category_id
        if multi_store_url is not None:
            self.multi_store_url = multi_store_url
        if active is not None:
            self.active = active
        if weight_unit is not None:
            self.weight_unit = weight_unit
        if dimension_unit is not None:
            self.dimension_unit = dimension_unit
        if prices_include_tax is not None:
            self.prices_include_tax = prices_include_tax
        if carrier_info is not None:
            self.carrier_info = carrier_info
        if store_owner_info is not None:
            self.store_owner_info = store_owner_info
        if default_warehouse_id is not None:
            self.default_warehouse_id = default_warehouse_id
        if channels is not None:
            self.channels = channels
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def store_id(self):
        """Gets the store_id of this CartStoreInfo.  # noqa: E501


        :return: The store_id of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CartStoreInfo.


        :param store_id: The store_id of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def name(self):
        """Gets the name of this CartStoreInfo.  # noqa: E501


        :return: The name of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CartStoreInfo.


        :param name: The name of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def language(self):
        """Gets the language of this CartStoreInfo.  # noqa: E501


        :return: The language of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CartStoreInfo.


        :param language: The language of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def store_languages(self):
        """Gets the store_languages of this CartStoreInfo.  # noqa: E501


        :return: The store_languages of this CartStoreInfo.  # noqa: E501
        :rtype: list[Language]
        """
        return self._store_languages

    @store_languages.setter
    def store_languages(self, store_languages):
        """Sets the store_languages of this CartStoreInfo.


        :param store_languages: The store_languages of this CartStoreInfo.  # noqa: E501
        :type: list[Language]
        """

        self._store_languages = store_languages

    @property
    def currency(self):
        """Gets the currency of this CartStoreInfo.  # noqa: E501


        :return: The currency of this CartStoreInfo.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CartStoreInfo.


        :param currency: The currency of this CartStoreInfo.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def store_currencies(self):
        """Gets the store_currencies of this CartStoreInfo.  # noqa: E501


        :return: The store_currencies of this CartStoreInfo.  # noqa: E501
        :rtype: list[Currency]
        """
        return self._store_currencies

    @store_currencies.setter
    def store_currencies(self, store_currencies):
        """Sets the store_currencies of this CartStoreInfo.


        :param store_currencies: The store_currencies of this CartStoreInfo.  # noqa: E501
        :type: list[Currency]
        """

        self._store_currencies = store_currencies

    @property
    def timezone(self):
        """Gets the timezone of this CartStoreInfo.  # noqa: E501


        :return: The timezone of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CartStoreInfo.


        :param timezone: The timezone of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def country(self):
        """Gets the country of this CartStoreInfo.  # noqa: E501


        :return: The country of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CartStoreInfo.


        :param country: The country of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def root_category_id(self):
        """Gets the root_category_id of this CartStoreInfo.  # noqa: E501


        :return: The root_category_id of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._root_category_id

    @root_category_id.setter
    def root_category_id(self, root_category_id):
        """Sets the root_category_id of this CartStoreInfo.


        :param root_category_id: The root_category_id of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._root_category_id = root_category_id

    @property
    def multi_store_url(self):
        """Gets the multi_store_url of this CartStoreInfo.  # noqa: E501


        :return: The multi_store_url of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._multi_store_url

    @multi_store_url.setter
    def multi_store_url(self, multi_store_url):
        """Sets the multi_store_url of this CartStoreInfo.


        :param multi_store_url: The multi_store_url of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._multi_store_url = multi_store_url

    @property
    def active(self):
        """Gets the active of this CartStoreInfo.  # noqa: E501


        :return: The active of this CartStoreInfo.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CartStoreInfo.


        :param active: The active of this CartStoreInfo.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def weight_unit(self):
        """Gets the weight_unit of this CartStoreInfo.  # noqa: E501


        :return: The weight_unit of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this CartStoreInfo.


        :param weight_unit: The weight_unit of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._weight_unit = weight_unit

    @property
    def dimension_unit(self):
        """Gets the dimension_unit of this CartStoreInfo.  # noqa: E501


        :return: The dimension_unit of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._dimension_unit

    @dimension_unit.setter
    def dimension_unit(self, dimension_unit):
        """Sets the dimension_unit of this CartStoreInfo.


        :param dimension_unit: The dimension_unit of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._dimension_unit = dimension_unit

    @property
    def prices_include_tax(self):
        """Gets the prices_include_tax of this CartStoreInfo.  # noqa: E501


        :return: The prices_include_tax of this CartStoreInfo.  # noqa: E501
        :rtype: bool
        """
        return self._prices_include_tax

    @prices_include_tax.setter
    def prices_include_tax(self, prices_include_tax):
        """Sets the prices_include_tax of this CartStoreInfo.


        :param prices_include_tax: The prices_include_tax of this CartStoreInfo.  # noqa: E501
        :type: bool
        """

        self._prices_include_tax = prices_include_tax

    @property
    def carrier_info(self):
        """Gets the carrier_info of this CartStoreInfo.  # noqa: E501


        :return: The carrier_info of this CartStoreInfo.  # noqa: E501
        :rtype: list[Carrier]
        """
        return self._carrier_info

    @carrier_info.setter
    def carrier_info(self, carrier_info):
        """Sets the carrier_info of this CartStoreInfo.


        :param carrier_info: The carrier_info of this CartStoreInfo.  # noqa: E501
        :type: list[Carrier]
        """

        self._carrier_info = carrier_info

    @property
    def store_owner_info(self):
        """Gets the store_owner_info of this CartStoreInfo.  # noqa: E501


        :return: The store_owner_info of this CartStoreInfo.  # noqa: E501
        :rtype: Info
        """
        return self._store_owner_info

    @store_owner_info.setter
    def store_owner_info(self, store_owner_info):
        """Sets the store_owner_info of this CartStoreInfo.


        :param store_owner_info: The store_owner_info of this CartStoreInfo.  # noqa: E501
        :type: Info
        """

        self._store_owner_info = store_owner_info

    @property
    def default_warehouse_id(self):
        """Gets the default_warehouse_id of this CartStoreInfo.  # noqa: E501


        :return: The default_warehouse_id of this CartStoreInfo.  # noqa: E501
        :rtype: str
        """
        return self._default_warehouse_id

    @default_warehouse_id.setter
    def default_warehouse_id(self, default_warehouse_id):
        """Sets the default_warehouse_id of this CartStoreInfo.


        :param default_warehouse_id: The default_warehouse_id of this CartStoreInfo.  # noqa: E501
        :type: str
        """

        self._default_warehouse_id = default_warehouse_id

    @property
    def channels(self):
        """Gets the channels of this CartStoreInfo.  # noqa: E501


        :return: The channels of this CartStoreInfo.  # noqa: E501
        :rtype: list[CartChannel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this CartStoreInfo.


        :param channels: The channels of this CartStoreInfo.  # noqa: E501
        :type: list[CartChannel]
        """

        self._channels = channels

    @property
    def additional_fields(self):
        """Gets the additional_fields of this CartStoreInfo.  # noqa: E501


        :return: The additional_fields of this CartStoreInfo.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this CartStoreInfo.


        :param additional_fields: The additional_fields of this CartStoreInfo.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CartStoreInfo.  # noqa: E501


        :return: The custom_fields of this CartStoreInfo.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CartStoreInfo.


        :param custom_fields: The custom_fields of this CartStoreInfo.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CartStoreInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartStoreInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
