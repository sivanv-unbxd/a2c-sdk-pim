# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CouponCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'entity': 'str',
        'match_items': 'str',
        'key': 'str',
        'operator': 'str',
        'value': 'str',
        'logic_operator': 'str',
        'sub_conditions': 'list[CouponCondition]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'entity': 'entity',
        'match_items': 'match_items',
        'key': 'key',
        'operator': 'operator',
        'value': 'value',
        'logic_operator': 'logic_operator',
        'sub_conditions': 'sub-conditions',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, entity=None, match_items=None, key=None, operator=None, value=None, logic_operator=None, sub_conditions=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """CouponCondition - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._entity = None
        self._match_items = None
        self._key = None
        self._operator = None
        self._value = None
        self._logic_operator = None
        self._sub_conditions = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if entity is not None:
            self.entity = entity
        if match_items is not None:
            self.match_items = match_items
        if key is not None:
            self.key = key
        if operator is not None:
            self.operator = operator
        if value is not None:
            self.value = value
        if logic_operator is not None:
            self.logic_operator = logic_operator
        if sub_conditions is not None:
            self.sub_conditions = sub_conditions
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this CouponCondition.  # noqa: E501


        :return: The id of this CouponCondition.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CouponCondition.


        :param id: The id of this CouponCondition.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def entity(self):
        """Gets the entity of this CouponCondition.  # noqa: E501


        :return: The entity of this CouponCondition.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this CouponCondition.


        :param entity: The entity of this CouponCondition.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def match_items(self):
        """Gets the match_items of this CouponCondition.  # noqa: E501


        :return: The match_items of this CouponCondition.  # noqa: E501
        :rtype: str
        """
        return self._match_items

    @match_items.setter
    def match_items(self, match_items):
        """Sets the match_items of this CouponCondition.


        :param match_items: The match_items of this CouponCondition.  # noqa: E501
        :type: str
        """

        self._match_items = match_items

    @property
    def key(self):
        """Gets the key of this CouponCondition.  # noqa: E501


        :return: The key of this CouponCondition.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CouponCondition.


        :param key: The key of this CouponCondition.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def operator(self):
        """Gets the operator of this CouponCondition.  # noqa: E501


        :return: The operator of this CouponCondition.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this CouponCondition.


        :param operator: The operator of this CouponCondition.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this CouponCondition.  # noqa: E501


        :return: The value of this CouponCondition.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CouponCondition.


        :param value: The value of this CouponCondition.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def logic_operator(self):
        """Gets the logic_operator of this CouponCondition.  # noqa: E501


        :return: The logic_operator of this CouponCondition.  # noqa: E501
        :rtype: str
        """
        return self._logic_operator

    @logic_operator.setter
    def logic_operator(self, logic_operator):
        """Sets the logic_operator of this CouponCondition.


        :param logic_operator: The logic_operator of this CouponCondition.  # noqa: E501
        :type: str
        """

        self._logic_operator = logic_operator

    @property
    def sub_conditions(self):
        """Gets the sub_conditions of this CouponCondition.  # noqa: E501


        :return: The sub_conditions of this CouponCondition.  # noqa: E501
        :rtype: list[CouponCondition]
        """
        return self._sub_conditions

    @sub_conditions.setter
    def sub_conditions(self, sub_conditions):
        """Sets the sub_conditions of this CouponCondition.


        :param sub_conditions: The sub_conditions of this CouponCondition.  # noqa: E501
        :type: list[CouponCondition]
        """

        self._sub_conditions = sub_conditions

    @property
    def additional_fields(self):
        """Gets the additional_fields of this CouponCondition.  # noqa: E501


        :return: The additional_fields of this CouponCondition.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this CouponCondition.


        :param additional_fields: The additional_fields of this CouponCondition.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CouponCondition.  # noqa: E501


        :return: The custom_fields of this CouponCondition.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CouponCondition.


        :param custom_fields: The custom_fields of this CouponCondition.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CouponCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CouponCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
