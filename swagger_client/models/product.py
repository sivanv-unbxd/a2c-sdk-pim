# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'u_model': 'str',
        'u_sku': 'str',
        'name': 'str',
        'description': 'str',
        'short_description': 'str',
        'price': 'float',
        'advanced_price': 'list[ProductAdvancedPrice]',
        'cost_price': 'float',
        'quantity': 'float',
        'inventory': 'list[ProductInventory]',
        'u_brand_id': 'str',
        'u_brand': 'str',
        'categories_ids': 'list[str]',
        'stores_ids': 'list[str]',
        'url': 'str',
        'seo_url': 'str',
        'meta_title': 'str',
        'meta_keywords': 'str',
        'meta_description': 'str',
        'avail_sale': 'bool',
        'avail_view': 'bool',
        'is_virtual': 'bool',
        'is_downloadable': 'bool',
        'weight': 'float',
        'weight_unit': 'str',
        'sort_order': 'int',
        'backorders': 'str',
        'manage_stock': 'str',
        'create_at': 'A2CDateTime',
        'modified_at': 'A2CDateTime',
        'tax_class_id': 'str',
        'special_price': 'SpecialPrice',
        'tier_price': 'list[ProductTierPrice]',
        'group_price': 'list[ProductGroupPrice]',
        'images': 'list[Image]',
        'product_options': 'list[ProductOption]',
        'u_upc': 'str',
        'u_mpn': 'str',
        'related_products_ids': 'list[str]',
        'dimensions_unit': 'str',
        'width': 'float',
        'height': 'float',
        'length': 'float',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'u_model': 'u_model',
        'u_sku': 'u_sku',
        'name': 'name',
        'description': 'description',
        'short_description': 'short_description',
        'price': 'price',
        'advanced_price': 'advanced_price',
        'cost_price': 'cost_price',
        'quantity': 'quantity',
        'inventory': 'inventory',
        'u_brand_id': 'u_brand_id',
        'u_brand': 'u_brand',
        'categories_ids': 'categories_ids',
        'stores_ids': 'stores_ids',
        'url': 'url',
        'seo_url': 'seo_url',
        'meta_title': 'meta_title',
        'meta_keywords': 'meta_keywords',
        'meta_description': 'meta_description',
        'avail_sale': 'avail_sale',
        'avail_view': 'avail_view',
        'is_virtual': 'is_virtual',
        'is_downloadable': 'is_downloadable',
        'weight': 'weight',
        'weight_unit': 'weight_unit',
        'sort_order': 'sort_order',
        'backorders': 'backorders',
        'manage_stock': 'manage_stock',
        'create_at': 'create_at',
        'modified_at': 'modified_at',
        'tax_class_id': 'tax_class_id',
        'special_price': 'special_price',
        'tier_price': 'tier_price',
        'group_price': 'group_price',
        'images': 'images',
        'product_options': 'product_options',
        'u_upc': 'u_upc',
        'u_mpn': 'u_mpn',
        'related_products_ids': 'related_products_ids',
        'dimensions_unit': 'dimensions_unit',
        'width': 'width',
        'height': 'height',
        'length': 'length',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, type=None, u_model=None, u_sku=None, name=None, description=None, short_description=None, price=None, advanced_price=None, cost_price=None, quantity=None, inventory=None, u_brand_id=None, u_brand=None, categories_ids=None, stores_ids=None, url=None, seo_url=None, meta_title=None, meta_keywords=None, meta_description=None, avail_sale=None, avail_view=None, is_virtual=None, is_downloadable=None, weight=None, weight_unit=None, sort_order=None, backorders=None, manage_stock=None, create_at=None, modified_at=None, tax_class_id=None, special_price=None, tier_price=None, group_price=None, images=None, product_options=None, u_upc=None, u_mpn=None, related_products_ids=None, dimensions_unit=None, width=None, height=None, length=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._u_model = None
        self._u_sku = None
        self._name = None
        self._description = None
        self._short_description = None
        self._price = None
        self._advanced_price = None
        self._cost_price = None
        self._quantity = None
        self._inventory = None
        self._u_brand_id = None
        self._u_brand = None
        self._categories_ids = None
        self._stores_ids = None
        self._url = None
        self._seo_url = None
        self._meta_title = None
        self._meta_keywords = None
        self._meta_description = None
        self._avail_sale = None
        self._avail_view = None
        self._is_virtual = None
        self._is_downloadable = None
        self._weight = None
        self._weight_unit = None
        self._sort_order = None
        self._backorders = None
        self._manage_stock = None
        self._create_at = None
        self._modified_at = None
        self._tax_class_id = None
        self._special_price = None
        self._tier_price = None
        self._group_price = None
        self._images = None
        self._product_options = None
        self._u_upc = None
        self._u_mpn = None
        self._related_products_ids = None
        self._dimensions_unit = None
        self._width = None
        self._height = None
        self._length = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if u_model is not None:
            self.u_model = u_model
        if u_sku is not None:
            self.u_sku = u_sku
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if short_description is not None:
            self.short_description = short_description
        if price is not None:
            self.price = price
        if advanced_price is not None:
            self.advanced_price = advanced_price
        if cost_price is not None:
            self.cost_price = cost_price
        if quantity is not None:
            self.quantity = quantity
        if inventory is not None:
            self.inventory = inventory
        if u_brand_id is not None:
            self.u_brand_id = u_brand_id
        if u_brand is not None:
            self.u_brand = u_brand
        if categories_ids is not None:
            self.categories_ids = categories_ids
        if stores_ids is not None:
            self.stores_ids = stores_ids
        if url is not None:
            self.url = url
        if seo_url is not None:
            self.seo_url = seo_url
        if meta_title is not None:
            self.meta_title = meta_title
        if meta_keywords is not None:
            self.meta_keywords = meta_keywords
        if meta_description is not None:
            self.meta_description = meta_description
        if avail_sale is not None:
            self.avail_sale = avail_sale
        if avail_view is not None:
            self.avail_view = avail_view
        if is_virtual is not None:
            self.is_virtual = is_virtual
        if is_downloadable is not None:
            self.is_downloadable = is_downloadable
        if weight is not None:
            self.weight = weight
        if weight_unit is not None:
            self.weight_unit = weight_unit
        if sort_order is not None:
            self.sort_order = sort_order
        if backorders is not None:
            self.backorders = backorders
        if manage_stock is not None:
            self.manage_stock = manage_stock
        if create_at is not None:
            self.create_at = create_at
        if modified_at is not None:
            self.modified_at = modified_at
        if tax_class_id is not None:
            self.tax_class_id = tax_class_id
        if special_price is not None:
            self.special_price = special_price
        if tier_price is not None:
            self.tier_price = tier_price
        if group_price is not None:
            self.group_price = group_price
        if images is not None:
            self.images = images
        if product_options is not None:
            self.product_options = product_options
        if u_upc is not None:
            self.u_upc = u_upc
        if u_mpn is not None:
            self.u_mpn = u_mpn
        if related_products_ids is not None:
            self.related_products_ids = related_products_ids
        if dimensions_unit is not None:
            self.dimensions_unit = dimensions_unit
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if length is not None:
            self.length = length
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Product.  # noqa: E501


        :return: The id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.


        :param id: The id of this Product.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Product.  # noqa: E501


        :return: The type of this Product.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Product.


        :param type: The type of this Product.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def u_model(self):
        """Gets the u_model of this Product.  # noqa: E501


        :return: The u_model of this Product.  # noqa: E501
        :rtype: str
        """
        return self._u_model

    @u_model.setter
    def u_model(self, u_model):
        """Sets the u_model of this Product.


        :param u_model: The u_model of this Product.  # noqa: E501
        :type: str
        """

        self._u_model = u_model

    @property
    def u_sku(self):
        """Gets the u_sku of this Product.  # noqa: E501


        :return: The u_sku of this Product.  # noqa: E501
        :rtype: str
        """
        return self._u_sku

    @u_sku.setter
    def u_sku(self, u_sku):
        """Sets the u_sku of this Product.


        :param u_sku: The u_sku of this Product.  # noqa: E501
        :type: str
        """

        self._u_sku = u_sku

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501


        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Product.  # noqa: E501


        :return: The description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.


        :param description: The description of this Product.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def short_description(self):
        """Gets the short_description of this Product.  # noqa: E501


        :return: The short_description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Product.


        :param short_description: The short_description of this Product.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def price(self):
        """Gets the price of this Product.  # noqa: E501


        :return: The price of this Product.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Product.


        :param price: The price of this Product.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def advanced_price(self):
        """Gets the advanced_price of this Product.  # noqa: E501


        :return: The advanced_price of this Product.  # noqa: E501
        :rtype: list[ProductAdvancedPrice]
        """
        return self._advanced_price

    @advanced_price.setter
    def advanced_price(self, advanced_price):
        """Sets the advanced_price of this Product.


        :param advanced_price: The advanced_price of this Product.  # noqa: E501
        :type: list[ProductAdvancedPrice]
        """

        self._advanced_price = advanced_price

    @property
    def cost_price(self):
        """Gets the cost_price of this Product.  # noqa: E501


        :return: The cost_price of this Product.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this Product.


        :param cost_price: The cost_price of this Product.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def quantity(self):
        """Gets the quantity of this Product.  # noqa: E501


        :return: The quantity of this Product.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Product.


        :param quantity: The quantity of this Product.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def inventory(self):
        """Gets the inventory of this Product.  # noqa: E501


        :return: The inventory of this Product.  # noqa: E501
        :rtype: list[ProductInventory]
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this Product.


        :param inventory: The inventory of this Product.  # noqa: E501
        :type: list[ProductInventory]
        """

        self._inventory = inventory

    @property
    def u_brand_id(self):
        """Gets the u_brand_id of this Product.  # noqa: E501


        :return: The u_brand_id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._u_brand_id

    @u_brand_id.setter
    def u_brand_id(self, u_brand_id):
        """Sets the u_brand_id of this Product.


        :param u_brand_id: The u_brand_id of this Product.  # noqa: E501
        :type: str
        """

        self._u_brand_id = u_brand_id

    @property
    def u_brand(self):
        """Gets the u_brand of this Product.  # noqa: E501


        :return: The u_brand of this Product.  # noqa: E501
        :rtype: str
        """
        return self._u_brand

    @u_brand.setter
    def u_brand(self, u_brand):
        """Sets the u_brand of this Product.


        :param u_brand: The u_brand of this Product.  # noqa: E501
        :type: str
        """

        self._u_brand = u_brand

    @property
    def categories_ids(self):
        """Gets the categories_ids of this Product.  # noqa: E501


        :return: The categories_ids of this Product.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories_ids

    @categories_ids.setter
    def categories_ids(self, categories_ids):
        """Sets the categories_ids of this Product.


        :param categories_ids: The categories_ids of this Product.  # noqa: E501
        :type: list[str]
        """

        self._categories_ids = categories_ids

    @property
    def stores_ids(self):
        """Gets the stores_ids of this Product.  # noqa: E501


        :return: The stores_ids of this Product.  # noqa: E501
        :rtype: list[str]
        """
        return self._stores_ids

    @stores_ids.setter
    def stores_ids(self, stores_ids):
        """Sets the stores_ids of this Product.


        :param stores_ids: The stores_ids of this Product.  # noqa: E501
        :type: list[str]
        """

        self._stores_ids = stores_ids

    @property
    def url(self):
        """Gets the url of this Product.  # noqa: E501


        :return: The url of this Product.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Product.


        :param url: The url of this Product.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def seo_url(self):
        """Gets the seo_url of this Product.  # noqa: E501


        :return: The seo_url of this Product.  # noqa: E501
        :rtype: str
        """
        return self._seo_url

    @seo_url.setter
    def seo_url(self, seo_url):
        """Sets the seo_url of this Product.


        :param seo_url: The seo_url of this Product.  # noqa: E501
        :type: str
        """

        self._seo_url = seo_url

    @property
    def meta_title(self):
        """Gets the meta_title of this Product.  # noqa: E501


        :return: The meta_title of this Product.  # noqa: E501
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this Product.


        :param meta_title: The meta_title of this Product.  # noqa: E501
        :type: str
        """

        self._meta_title = meta_title

    @property
    def meta_keywords(self):
        """Gets the meta_keywords of this Product.  # noqa: E501


        :return: The meta_keywords of this Product.  # noqa: E501
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """Sets the meta_keywords of this Product.


        :param meta_keywords: The meta_keywords of this Product.  # noqa: E501
        :type: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_description(self):
        """Gets the meta_description of this Product.  # noqa: E501


        :return: The meta_description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this Product.


        :param meta_description: The meta_description of this Product.  # noqa: E501
        :type: str
        """

        self._meta_description = meta_description

    @property
    def avail_sale(self):
        """Gets the avail_sale of this Product.  # noqa: E501


        :return: The avail_sale of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._avail_sale

    @avail_sale.setter
    def avail_sale(self, avail_sale):
        """Sets the avail_sale of this Product.


        :param avail_sale: The avail_sale of this Product.  # noqa: E501
        :type: bool
        """

        self._avail_sale = avail_sale

    @property
    def avail_view(self):
        """Gets the avail_view of this Product.  # noqa: E501


        :return: The avail_view of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._avail_view

    @avail_view.setter
    def avail_view(self, avail_view):
        """Sets the avail_view of this Product.


        :param avail_view: The avail_view of this Product.  # noqa: E501
        :type: bool
        """

        self._avail_view = avail_view

    @property
    def is_virtual(self):
        """Gets the is_virtual of this Product.  # noqa: E501


        :return: The is_virtual of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this Product.


        :param is_virtual: The is_virtual of this Product.  # noqa: E501
        :type: bool
        """

        self._is_virtual = is_virtual

    @property
    def is_downloadable(self):
        """Gets the is_downloadable of this Product.  # noqa: E501


        :return: The is_downloadable of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._is_downloadable

    @is_downloadable.setter
    def is_downloadable(self, is_downloadable):
        """Sets the is_downloadable of this Product.


        :param is_downloadable: The is_downloadable of this Product.  # noqa: E501
        :type: bool
        """

        self._is_downloadable = is_downloadable

    @property
    def weight(self):
        """Gets the weight of this Product.  # noqa: E501


        :return: The weight of this Product.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Product.


        :param weight: The weight of this Product.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this Product.  # noqa: E501


        :return: The weight_unit of this Product.  # noqa: E501
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this Product.


        :param weight_unit: The weight_unit of this Product.  # noqa: E501
        :type: str
        """

        self._weight_unit = weight_unit

    @property
    def sort_order(self):
        """Gets the sort_order of this Product.  # noqa: E501


        :return: The sort_order of this Product.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Product.


        :param sort_order: The sort_order of this Product.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def backorders(self):
        """Gets the backorders of this Product.  # noqa: E501


        :return: The backorders of this Product.  # noqa: E501
        :rtype: str
        """
        return self._backorders

    @backorders.setter
    def backorders(self, backorders):
        """Sets the backorders of this Product.


        :param backorders: The backorders of this Product.  # noqa: E501
        :type: str
        """

        self._backorders = backorders

    @property
    def manage_stock(self):
        """Gets the manage_stock of this Product.  # noqa: E501


        :return: The manage_stock of this Product.  # noqa: E501
        :rtype: str
        """
        return self._manage_stock

    @manage_stock.setter
    def manage_stock(self, manage_stock):
        """Sets the manage_stock of this Product.


        :param manage_stock: The manage_stock of this Product.  # noqa: E501
        :type: str
        """

        self._manage_stock = manage_stock

    @property
    def create_at(self):
        """Gets the create_at of this Product.  # noqa: E501


        :return: The create_at of this Product.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this Product.


        :param create_at: The create_at of this Product.  # noqa: E501
        :type: A2CDateTime
        """

        self._create_at = create_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Product.  # noqa: E501


        :return: The modified_at of this Product.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Product.


        :param modified_at: The modified_at of this Product.  # noqa: E501
        :type: A2CDateTime
        """

        self._modified_at = modified_at

    @property
    def tax_class_id(self):
        """Gets the tax_class_id of this Product.  # noqa: E501


        :return: The tax_class_id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._tax_class_id

    @tax_class_id.setter
    def tax_class_id(self, tax_class_id):
        """Sets the tax_class_id of this Product.


        :param tax_class_id: The tax_class_id of this Product.  # noqa: E501
        :type: str
        """

        self._tax_class_id = tax_class_id

    @property
    def special_price(self):
        """Gets the special_price of this Product.  # noqa: E501


        :return: The special_price of this Product.  # noqa: E501
        :rtype: SpecialPrice
        """
        return self._special_price

    @special_price.setter
    def special_price(self, special_price):
        """Sets the special_price of this Product.


        :param special_price: The special_price of this Product.  # noqa: E501
        :type: SpecialPrice
        """

        self._special_price = special_price

    @property
    def tier_price(self):
        """Gets the tier_price of this Product.  # noqa: E501


        :return: The tier_price of this Product.  # noqa: E501
        :rtype: list[ProductTierPrice]
        """
        return self._tier_price

    @tier_price.setter
    def tier_price(self, tier_price):
        """Sets the tier_price of this Product.


        :param tier_price: The tier_price of this Product.  # noqa: E501
        :type: list[ProductTierPrice]
        """

        self._tier_price = tier_price

    @property
    def group_price(self):
        """Gets the group_price of this Product.  # noqa: E501


        :return: The group_price of this Product.  # noqa: E501
        :rtype: list[ProductGroupPrice]
        """
        return self._group_price

    @group_price.setter
    def group_price(self, group_price):
        """Sets the group_price of this Product.


        :param group_price: The group_price of this Product.  # noqa: E501
        :type: list[ProductGroupPrice]
        """

        self._group_price = group_price

    @property
    def images(self):
        """Gets the images of this Product.  # noqa: E501


        :return: The images of this Product.  # noqa: E501
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Product.


        :param images: The images of this Product.  # noqa: E501
        :type: list[Image]
        """

        self._images = images

    @property
    def product_options(self):
        """Gets the product_options of this Product.  # noqa: E501


        :return: The product_options of this Product.  # noqa: E501
        :rtype: list[ProductOption]
        """
        return self._product_options

    @product_options.setter
    def product_options(self, product_options):
        """Sets the product_options of this Product.


        :param product_options: The product_options of this Product.  # noqa: E501
        :type: list[ProductOption]
        """

        self._product_options = product_options

    @property
    def u_upc(self):
        """Gets the u_upc of this Product.  # noqa: E501


        :return: The u_upc of this Product.  # noqa: E501
        :rtype: str
        """
        return self._u_upc

    @u_upc.setter
    def u_upc(self, u_upc):
        """Sets the u_upc of this Product.


        :param u_upc: The u_upc of this Product.  # noqa: E501
        :type: str
        """

        self._u_upc = u_upc

    @property
    def u_mpn(self):
        """Gets the u_mpn of this Product.  # noqa: E501


        :return: The u_mpn of this Product.  # noqa: E501
        :rtype: str
        """
        return self._u_mpn

    @u_mpn.setter
    def u_mpn(self, u_mpn):
        """Sets the u_mpn of this Product.


        :param u_mpn: The u_mpn of this Product.  # noqa: E501
        :type: str
        """

        self._u_mpn = u_mpn

    @property
    def related_products_ids(self):
        """Gets the related_products_ids of this Product.  # noqa: E501


        :return: The related_products_ids of this Product.  # noqa: E501
        :rtype: list[str]
        """
        return self._related_products_ids

    @related_products_ids.setter
    def related_products_ids(self, related_products_ids):
        """Sets the related_products_ids of this Product.


        :param related_products_ids: The related_products_ids of this Product.  # noqa: E501
        :type: list[str]
        """

        self._related_products_ids = related_products_ids

    @property
    def dimensions_unit(self):
        """Gets the dimensions_unit of this Product.  # noqa: E501


        :return: The dimensions_unit of this Product.  # noqa: E501
        :rtype: str
        """
        return self._dimensions_unit

    @dimensions_unit.setter
    def dimensions_unit(self, dimensions_unit):
        """Sets the dimensions_unit of this Product.


        :param dimensions_unit: The dimensions_unit of this Product.  # noqa: E501
        :type: str
        """

        self._dimensions_unit = dimensions_unit

    @property
    def width(self):
        """Gets the width of this Product.  # noqa: E501


        :return: The width of this Product.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Product.


        :param width: The width of this Product.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Product.  # noqa: E501


        :return: The height of this Product.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Product.


        :param height: The height of this Product.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def length(self):
        """Gets the length of this Product.  # noqa: E501


        :return: The length of this Product.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Product.


        :param length: The length of this Product.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Product.  # noqa: E501


        :return: The additional_fields of this Product.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Product.


        :param additional_fields: The additional_fields of this Product.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Product.  # noqa: E501


        :return: The custom_fields of this Product.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Product.


        :param custom_fields: The custom_fields of this Product.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
