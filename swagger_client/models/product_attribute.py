# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_id': 'str',
        'code': 'str',
        'name': 'str',
        'lang_id': 'int',
        'store_id': 'int',
        'value': 'str',
        'required': 'bool',
        'visible': 'bool',
        'type': 'str',
        'position': 'int',
        'attribute_group_id': 'str',
        'product_id': 'int',
        'variant_id': 'str',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'attribute_id': 'attribute_id',
        'code': 'code',
        'name': 'name',
        'lang_id': 'lang_id',
        'store_id': 'store_id',
        'value': 'value',
        'required': 'required',
        'visible': 'visible',
        'type': 'type',
        'position': 'position',
        'attribute_group_id': 'attribute_group_id',
        'product_id': 'product_id',
        'variant_id': 'variant_id',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, attribute_id=None, code=None, name=None, lang_id=None, store_id=None, value=None, required=None, visible=None, type=None, position=None, attribute_group_id=None, product_id=None, variant_id=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """ProductAttribute - a model defined in Swagger"""  # noqa: E501

        self._attribute_id = None
        self._code = None
        self._name = None
        self._lang_id = None
        self._store_id = None
        self._value = None
        self._required = None
        self._visible = None
        self._type = None
        self._position = None
        self._attribute_group_id = None
        self._product_id = None
        self._variant_id = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if attribute_id is not None:
            self.attribute_id = attribute_id
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if lang_id is not None:
            self.lang_id = lang_id
        if store_id is not None:
            self.store_id = store_id
        if value is not None:
            self.value = value
        if required is not None:
            self.required = required
        if visible is not None:
            self.visible = visible
        if type is not None:
            self.type = type
        if position is not None:
            self.position = position
        if attribute_group_id is not None:
            self.attribute_group_id = attribute_group_id
        if product_id is not None:
            self.product_id = product_id
        if variant_id is not None:
            self.variant_id = variant_id
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def attribute_id(self):
        """Gets the attribute_id of this ProductAttribute.  # noqa: E501


        :return: The attribute_id of this ProductAttribute.  # noqa: E501
        :rtype: str
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this ProductAttribute.


        :param attribute_id: The attribute_id of this ProductAttribute.  # noqa: E501
        :type: str
        """

        self._attribute_id = attribute_id

    @property
    def code(self):
        """Gets the code of this ProductAttribute.  # noqa: E501


        :return: The code of this ProductAttribute.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProductAttribute.


        :param code: The code of this ProductAttribute.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this ProductAttribute.  # noqa: E501


        :return: The name of this ProductAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductAttribute.


        :param name: The name of this ProductAttribute.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def lang_id(self):
        """Gets the lang_id of this ProductAttribute.  # noqa: E501


        :return: The lang_id of this ProductAttribute.  # noqa: E501
        :rtype: int
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this ProductAttribute.


        :param lang_id: The lang_id of this ProductAttribute.  # noqa: E501
        :type: int
        """

        self._lang_id = lang_id

    @property
    def store_id(self):
        """Gets the store_id of this ProductAttribute.  # noqa: E501


        :return: The store_id of this ProductAttribute.  # noqa: E501
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ProductAttribute.


        :param store_id: The store_id of this ProductAttribute.  # noqa: E501
        :type: int
        """

        self._store_id = store_id

    @property
    def value(self):
        """Gets the value of this ProductAttribute.  # noqa: E501


        :return: The value of this ProductAttribute.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProductAttribute.


        :param value: The value of this ProductAttribute.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def required(self):
        """Gets the required of this ProductAttribute.  # noqa: E501


        :return: The required of this ProductAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ProductAttribute.


        :param required: The required of this ProductAttribute.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def visible(self):
        """Gets the visible of this ProductAttribute.  # noqa: E501


        :return: The visible of this ProductAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ProductAttribute.


        :param visible: The visible of this ProductAttribute.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def type(self):
        """Gets the type of this ProductAttribute.  # noqa: E501


        :return: The type of this ProductAttribute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductAttribute.


        :param type: The type of this ProductAttribute.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def position(self):
        """Gets the position of this ProductAttribute.  # noqa: E501


        :return: The position of this ProductAttribute.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ProductAttribute.


        :param position: The position of this ProductAttribute.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def attribute_group_id(self):
        """Gets the attribute_group_id of this ProductAttribute.  # noqa: E501


        :return: The attribute_group_id of this ProductAttribute.  # noqa: E501
        :rtype: str
        """
        return self._attribute_group_id

    @attribute_group_id.setter
    def attribute_group_id(self, attribute_group_id):
        """Sets the attribute_group_id of this ProductAttribute.


        :param attribute_group_id: The attribute_group_id of this ProductAttribute.  # noqa: E501
        :type: str
        """

        self._attribute_group_id = attribute_group_id

    @property
    def product_id(self):
        """Gets the product_id of this ProductAttribute.  # noqa: E501


        :return: The product_id of this ProductAttribute.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductAttribute.


        :param product_id: The product_id of this ProductAttribute.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def variant_id(self):
        """Gets the variant_id of this ProductAttribute.  # noqa: E501


        :return: The variant_id of this ProductAttribute.  # noqa: E501
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this ProductAttribute.


        :param variant_id: The variant_id of this ProductAttribute.  # noqa: E501
        :type: str
        """

        self._variant_id = variant_id

    @property
    def additional_fields(self):
        """Gets the additional_fields of this ProductAttribute.  # noqa: E501


        :return: The additional_fields of this ProductAttribute.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this ProductAttribute.


        :param additional_fields: The additional_fields of this ProductAttribute.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProductAttribute.  # noqa: E501


        :return: The custom_fields of this ProductAttribute.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProductAttribute.


        :param custom_fields: The custom_fields of this ProductAttribute.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
