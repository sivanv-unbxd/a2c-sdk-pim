# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BasketItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'parent_id': 'str',
        'product_id': 'str',
        'variant_id': 'str',
        'sku': 'str',
        'name': 'str',
        'price': 'float',
        'tax': 'float',
        'quantity': 'float',
        'weight_unit': 'str',
        'weight': 'float',
        'options': 'list[BasketItemOption]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'parent_id': 'parent_id',
        'product_id': 'product_id',
        'variant_id': 'variant_id',
        'sku': 'sku',
        'name': 'name',
        'price': 'price',
        'tax': 'tax',
        'quantity': 'quantity',
        'weight_unit': 'weight_unit',
        'weight': 'weight',
        'options': 'options',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, parent_id=None, product_id=None, variant_id=None, sku=None, name=None, price=None, tax=None, quantity=None, weight_unit=None, weight=None, options=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """BasketItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._parent_id = None
        self._product_id = None
        self._variant_id = None
        self._sku = None
        self._name = None
        self._price = None
        self._tax = None
        self._quantity = None
        self._weight_unit = None
        self._weight = None
        self._options = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        if product_id is not None:
            self.product_id = product_id
        if variant_id is not None:
            self.variant_id = variant_id
        if sku is not None:
            self.sku = sku
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if tax is not None:
            self.tax = tax
        if quantity is not None:
            self.quantity = quantity
        if weight_unit is not None:
            self.weight_unit = weight_unit
        if weight is not None:
            self.weight = weight
        if options is not None:
            self.options = options
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this BasketItem.  # noqa: E501


        :return: The id of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasketItem.


        :param id: The id of this BasketItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this BasketItem.  # noqa: E501


        :return: The parent_id of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this BasketItem.


        :param parent_id: The parent_id of this BasketItem.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def product_id(self):
        """Gets the product_id of this BasketItem.  # noqa: E501


        :return: The product_id of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this BasketItem.


        :param product_id: The product_id of this BasketItem.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def variant_id(self):
        """Gets the variant_id of this BasketItem.  # noqa: E501


        :return: The variant_id of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this BasketItem.


        :param variant_id: The variant_id of this BasketItem.  # noqa: E501
        :type: str
        """

        self._variant_id = variant_id

    @property
    def sku(self):
        """Gets the sku of this BasketItem.  # noqa: E501


        :return: The sku of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this BasketItem.


        :param sku: The sku of this BasketItem.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def name(self):
        """Gets the name of this BasketItem.  # noqa: E501


        :return: The name of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasketItem.


        :param name: The name of this BasketItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this BasketItem.  # noqa: E501


        :return: The price of this BasketItem.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BasketItem.


        :param price: The price of this BasketItem.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def tax(self):
        """Gets the tax of this BasketItem.  # noqa: E501


        :return: The tax of this BasketItem.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this BasketItem.


        :param tax: The tax of this BasketItem.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def quantity(self):
        """Gets the quantity of this BasketItem.  # noqa: E501


        :return: The quantity of this BasketItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BasketItem.


        :param quantity: The quantity of this BasketItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def weight_unit(self):
        """Gets the weight_unit of this BasketItem.  # noqa: E501


        :return: The weight_unit of this BasketItem.  # noqa: E501
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this BasketItem.


        :param weight_unit: The weight_unit of this BasketItem.  # noqa: E501
        :type: str
        """

        self._weight_unit = weight_unit

    @property
    def weight(self):
        """Gets the weight of this BasketItem.  # noqa: E501


        :return: The weight of this BasketItem.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this BasketItem.


        :param weight: The weight of this BasketItem.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def options(self):
        """Gets the options of this BasketItem.  # noqa: E501


        :return: The options of this BasketItem.  # noqa: E501
        :rtype: list[BasketItemOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this BasketItem.


        :param options: The options of this BasketItem.  # noqa: E501
        :type: list[BasketItemOption]
        """

        self._options = options

    @property
    def additional_fields(self):
        """Gets the additional_fields of this BasketItem.  # noqa: E501


        :return: The additional_fields of this BasketItem.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this BasketItem.


        :param additional_fields: The additional_fields of this BasketItem.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this BasketItem.  # noqa: E501


        :return: The custom_fields of this BasketItem.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this BasketItem.


        :param custom_fields: The custom_fields of this BasketItem.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasketItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasketItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
