# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartCouponAdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_id': 'str',
        'code': 'str',
        'name': 'str',
        'codes': 'list[str]',
        'action_type': 'str',
        'action_apply_to': 'str',
        'action_scope': 'str',
        'action_amount': 'float',
        'date_start': 'str',
        'date_end': 'str',
        'usage_limit': 'int',
        'usage_limit_per_customer': 'int',
        'action_condition_entity': 'str',
        'action_condition_key': 'str',
        'action_condition_operator': 'str',
        'action_condition_value': 'str'
    }

    attribute_map = {
        'store_id': 'store_id',
        'code': 'code',
        'name': 'name',
        'codes': 'codes',
        'action_type': 'action_type',
        'action_apply_to': 'action_apply_to',
        'action_scope': 'action_scope',
        'action_amount': 'action_amount',
        'date_start': 'date_start',
        'date_end': 'date_end',
        'usage_limit': 'usage_limit',
        'usage_limit_per_customer': 'usage_limit_per_customer',
        'action_condition_entity': 'action_condition_entity',
        'action_condition_key': 'action_condition_key',
        'action_condition_operator': 'action_condition_operator',
        'action_condition_value': 'action_condition_value'
    }

    def __init__(self, store_id=None, code=None, name=None, codes=None, action_type=None, action_apply_to=None, action_scope=None, action_amount=None, date_start='now', date_end=None, usage_limit=None, usage_limit_per_customer=None, action_condition_entity=None, action_condition_key=None, action_condition_operator=None, action_condition_value=None):  # noqa: E501
        """CartCouponAdd - a model defined in Swagger"""  # noqa: E501

        self._store_id = None
        self._code = None
        self._name = None
        self._codes = None
        self._action_type = None
        self._action_apply_to = None
        self._action_scope = None
        self._action_amount = None
        self._date_start = None
        self._date_end = None
        self._usage_limit = None
        self._usage_limit_per_customer = None
        self._action_condition_entity = None
        self._action_condition_key = None
        self._action_condition_operator = None
        self._action_condition_value = None
        self.discriminator = None

        if store_id is not None:
            self.store_id = store_id
        self.code = code
        if name is not None:
            self.name = name
        if codes is not None:
            self.codes = codes
        self.action_type = action_type
        self.action_apply_to = action_apply_to
        self.action_scope = action_scope
        self.action_amount = action_amount
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if usage_limit is not None:
            self.usage_limit = usage_limit
        if usage_limit_per_customer is not None:
            self.usage_limit_per_customer = usage_limit_per_customer
        if action_condition_entity is not None:
            self.action_condition_entity = action_condition_entity
        if action_condition_key is not None:
            self.action_condition_key = action_condition_key
        if action_condition_operator is not None:
            self.action_condition_operator = action_condition_operator
        if action_condition_value is not None:
            self.action_condition_value = action_condition_value

    @property
    def store_id(self):
        """Gets the store_id of this CartCouponAdd.  # noqa: E501

        Store Id  # noqa: E501

        :return: The store_id of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CartCouponAdd.

        Store Id  # noqa: E501

        :param store_id: The store_id of this CartCouponAdd.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def code(self):
        """Gets the code of this CartCouponAdd.  # noqa: E501

        Coupon code  # noqa: E501

        :return: The code of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CartCouponAdd.

        Coupon code  # noqa: E501

        :param code: The code of this CartCouponAdd.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def name(self):
        """Gets the name of this CartCouponAdd.  # noqa: E501

        Coupon name  # noqa: E501

        :return: The name of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CartCouponAdd.

        Coupon name  # noqa: E501

        :param name: The name of this CartCouponAdd.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def codes(self):
        """Gets the codes of this CartCouponAdd.  # noqa: E501

        Entity codes  # noqa: E501

        :return: The codes of this CartCouponAdd.  # noqa: E501
        :rtype: list[str]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this CartCouponAdd.

        Entity codes  # noqa: E501

        :param codes: The codes of this CartCouponAdd.  # noqa: E501
        :type: list[str]
        """

        self._codes = codes

    @property
    def action_type(self):
        """Gets the action_type of this CartCouponAdd.  # noqa: E501

        Coupon discount type  # noqa: E501

        :return: The action_type of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this CartCouponAdd.

        Coupon discount type  # noqa: E501

        :param action_type: The action_type of this CartCouponAdd.  # noqa: E501
        :type: str
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501
        allowed_values = ["percent", "fixed"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def action_apply_to(self):
        """Gets the action_apply_to of this CartCouponAdd.  # noqa: E501

        Defines where discount should be applied  # noqa: E501

        :return: The action_apply_to of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._action_apply_to

    @action_apply_to.setter
    def action_apply_to(self, action_apply_to):
        """Sets the action_apply_to of this CartCouponAdd.

        Defines where discount should be applied  # noqa: E501

        :param action_apply_to: The action_apply_to of this CartCouponAdd.  # noqa: E501
        :type: str
        """
        if action_apply_to is None:
            raise ValueError("Invalid value for `action_apply_to`, must not be `None`")  # noqa: E501
        allowed_values = ["order_total", "item_price", "shipping"]  # noqa: E501
        if action_apply_to not in allowed_values:
            raise ValueError(
                "Invalid value for `action_apply_to` ({0}), must be one of {1}"  # noqa: E501
                .format(action_apply_to, allowed_values)
            )

        self._action_apply_to = action_apply_to

    @property
    def action_scope(self):
        """Gets the action_scope of this CartCouponAdd.  # noqa: E501

        Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.  # noqa: E501

        :return: The action_scope of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._action_scope

    @action_scope.setter
    def action_scope(self, action_scope):
        """Sets the action_scope of this CartCouponAdd.

        Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.  # noqa: E501

        :param action_scope: The action_scope of this CartCouponAdd.  # noqa: E501
        :type: str
        """
        if action_scope is None:
            raise ValueError("Invalid value for `action_scope`, must not be `None`")  # noqa: E501
        allowed_values = ["order", "matching_items"]  # noqa: E501
        if action_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `action_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(action_scope, allowed_values)
            )

        self._action_scope = action_scope

    @property
    def action_amount(self):
        """Gets the action_amount of this CartCouponAdd.  # noqa: E501

        Defines the discount amount value.  # noqa: E501

        :return: The action_amount of this CartCouponAdd.  # noqa: E501
        :rtype: float
        """
        return self._action_amount

    @action_amount.setter
    def action_amount(self, action_amount):
        """Sets the action_amount of this CartCouponAdd.

        Defines the discount amount value.  # noqa: E501

        :param action_amount: The action_amount of this CartCouponAdd.  # noqa: E501
        :type: float
        """
        if action_amount is None:
            raise ValueError("Invalid value for `action_amount`, must not be `None`")  # noqa: E501

        self._action_amount = action_amount

    @property
    def date_start(self):
        """Gets the date_start of this CartCouponAdd.  # noqa: E501

        Defines when discount code will be available.  # noqa: E501

        :return: The date_start of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this CartCouponAdd.

        Defines when discount code will be available.  # noqa: E501

        :param date_start: The date_start of this CartCouponAdd.  # noqa: E501
        :type: str
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this CartCouponAdd.  # noqa: E501

        Defines when discount code will be expired.  # noqa: E501

        :return: The date_end of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this CartCouponAdd.

        Defines when discount code will be expired.  # noqa: E501

        :param date_end: The date_end of this CartCouponAdd.  # noqa: E501
        :type: str
        """

        self._date_end = date_end

    @property
    def usage_limit(self):
        """Gets the usage_limit of this CartCouponAdd.  # noqa: E501

        Usage limit for coupon.  # noqa: E501

        :return: The usage_limit of this CartCouponAdd.  # noqa: E501
        :rtype: int
        """
        return self._usage_limit

    @usage_limit.setter
    def usage_limit(self, usage_limit):
        """Sets the usage_limit of this CartCouponAdd.

        Usage limit for coupon.  # noqa: E501

        :param usage_limit: The usage_limit of this CartCouponAdd.  # noqa: E501
        :type: int
        """

        self._usage_limit = usage_limit

    @property
    def usage_limit_per_customer(self):
        """Gets the usage_limit_per_customer of this CartCouponAdd.  # noqa: E501

        Usage limit per customer.  # noqa: E501

        :return: The usage_limit_per_customer of this CartCouponAdd.  # noqa: E501
        :rtype: int
        """
        return self._usage_limit_per_customer

    @usage_limit_per_customer.setter
    def usage_limit_per_customer(self, usage_limit_per_customer):
        """Sets the usage_limit_per_customer of this CartCouponAdd.

        Usage limit per customer.  # noqa: E501

        :param usage_limit_per_customer: The usage_limit_per_customer of this CartCouponAdd.  # noqa: E501
        :type: int
        """

        self._usage_limit_per_customer = usage_limit_per_customer

    @property
    def action_condition_entity(self):
        """Gets the action_condition_entity of this CartCouponAdd.  # noqa: E501

        Defines entity for action condition.  # noqa: E501

        :return: The action_condition_entity of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._action_condition_entity

    @action_condition_entity.setter
    def action_condition_entity(self, action_condition_entity):
        """Sets the action_condition_entity of this CartCouponAdd.

        Defines entity for action condition.  # noqa: E501

        :param action_condition_entity: The action_condition_entity of this CartCouponAdd.  # noqa: E501
        :type: str
        """

        self._action_condition_entity = action_condition_entity

    @property
    def action_condition_key(self):
        """Gets the action_condition_key of this CartCouponAdd.  # noqa: E501

        Defines entity attribute code for action condition.  # noqa: E501

        :return: The action_condition_key of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._action_condition_key

    @action_condition_key.setter
    def action_condition_key(self, action_condition_key):
        """Sets the action_condition_key of this CartCouponAdd.

        Defines entity attribute code for action condition.  # noqa: E501

        :param action_condition_key: The action_condition_key of this CartCouponAdd.  # noqa: E501
        :type: str
        """

        self._action_condition_key = action_condition_key

    @property
    def action_condition_operator(self):
        """Gets the action_condition_operator of this CartCouponAdd.  # noqa: E501

        Defines condition operator.  # noqa: E501

        :return: The action_condition_operator of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._action_condition_operator

    @action_condition_operator.setter
    def action_condition_operator(self, action_condition_operator):
        """Sets the action_condition_operator of this CartCouponAdd.

        Defines condition operator.  # noqa: E501

        :param action_condition_operator: The action_condition_operator of this CartCouponAdd.  # noqa: E501
        :type: str
        """

        self._action_condition_operator = action_condition_operator

    @property
    def action_condition_value(self):
        """Gets the action_condition_value of this CartCouponAdd.  # noqa: E501

        Defines condition attribute value/s. Can be comma separated string.  # noqa: E501

        :return: The action_condition_value of this CartCouponAdd.  # noqa: E501
        :rtype: str
        """
        return self._action_condition_value

    @action_condition_value.setter
    def action_condition_value(self, action_condition_value):
        """Sets the action_condition_value of this CartCouponAdd.

        Defines condition attribute value/s. Can be comma separated string.  # noqa: E501

        :param action_condition_value: The action_condition_value of this CartCouponAdd.  # noqa: E501
        :type: str
        """

        self._action_condition_value = action_condition_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CartCouponAdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartCouponAdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
