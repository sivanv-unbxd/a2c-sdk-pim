# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GiftCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'name': 'str',
        'type': 'str',
        'currency_code': 'str',
        'amount': 'float',
        'initial_amount': 'float',
        'status': 'str',
        'created_at': 'str',
        'avail_to': 'str',
        'free_product_ids': 'str',
        'message': 'str',
        'owner_email': 'str',
        'recipient_email': 'str',
        'owner_name': 'str',
        'recipient_name': 'str',
        'usage_history': 'list[CouponHistory]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'name': 'name',
        'type': 'type',
        'currency_code': 'currency_code',
        'amount': 'amount',
        'initial_amount': 'initial_amount',
        'status': 'status',
        'created_at': 'created_at',
        'avail_to': 'avail_to',
        'free_product_ids': 'free_product_ids',
        'message': 'message',
        'owner_email': 'owner_email',
        'recipient_email': 'recipient_email',
        'owner_name': 'owner_name',
        'recipient_name': 'recipient_name',
        'usage_history': 'usage_history',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, code=None, name=None, type=None, currency_code=None, amount=None, initial_amount=None, status=None, created_at=None, avail_to=None, free_product_ids=None, message=None, owner_email=None, recipient_email=None, owner_name=None, recipient_name=None, usage_history=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """GiftCard - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._code = None
        self._name = None
        self._type = None
        self._currency_code = None
        self._amount = None
        self._initial_amount = None
        self._status = None
        self._created_at = None
        self._avail_to = None
        self._free_product_ids = None
        self._message = None
        self._owner_email = None
        self._recipient_email = None
        self._owner_name = None
        self._recipient_name = None
        self._usage_history = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if currency_code is not None:
            self.currency_code = currency_code
        if amount is not None:
            self.amount = amount
        if initial_amount is not None:
            self.initial_amount = initial_amount
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if avail_to is not None:
            self.avail_to = avail_to
        if free_product_ids is not None:
            self.free_product_ids = free_product_ids
        if message is not None:
            self.message = message
        if owner_email is not None:
            self.owner_email = owner_email
        if recipient_email is not None:
            self.recipient_email = recipient_email
        if owner_name is not None:
            self.owner_name = owner_name
        if recipient_name is not None:
            self.recipient_name = recipient_name
        if usage_history is not None:
            self.usage_history = usage_history
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this GiftCard.  # noqa: E501


        :return: The id of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GiftCard.


        :param id: The id of this GiftCard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this GiftCard.  # noqa: E501


        :return: The code of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GiftCard.


        :param code: The code of this GiftCard.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this GiftCard.  # noqa: E501


        :return: The name of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GiftCard.


        :param name: The name of this GiftCard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this GiftCard.  # noqa: E501


        :return: The type of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GiftCard.


        :param type: The type of this GiftCard.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def currency_code(self):
        """Gets the currency_code of this GiftCard.  # noqa: E501


        :return: The currency_code of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GiftCard.


        :param currency_code: The currency_code of this GiftCard.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def amount(self):
        """Gets the amount of this GiftCard.  # noqa: E501


        :return: The amount of this GiftCard.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GiftCard.


        :param amount: The amount of this GiftCard.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def initial_amount(self):
        """Gets the initial_amount of this GiftCard.  # noqa: E501


        :return: The initial_amount of this GiftCard.  # noqa: E501
        :rtype: float
        """
        return self._initial_amount

    @initial_amount.setter
    def initial_amount(self, initial_amount):
        """Sets the initial_amount of this GiftCard.


        :param initial_amount: The initial_amount of this GiftCard.  # noqa: E501
        :type: float
        """

        self._initial_amount = initial_amount

    @property
    def status(self):
        """Gets the status of this GiftCard.  # noqa: E501


        :return: The status of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GiftCard.


        :param status: The status of this GiftCard.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this GiftCard.  # noqa: E501


        :return: The created_at of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GiftCard.


        :param created_at: The created_at of this GiftCard.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def avail_to(self):
        """Gets the avail_to of this GiftCard.  # noqa: E501


        :return: The avail_to of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._avail_to

    @avail_to.setter
    def avail_to(self, avail_to):
        """Sets the avail_to of this GiftCard.


        :param avail_to: The avail_to of this GiftCard.  # noqa: E501
        :type: str
        """

        self._avail_to = avail_to

    @property
    def free_product_ids(self):
        """Gets the free_product_ids of this GiftCard.  # noqa: E501


        :return: The free_product_ids of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._free_product_ids

    @free_product_ids.setter
    def free_product_ids(self, free_product_ids):
        """Sets the free_product_ids of this GiftCard.


        :param free_product_ids: The free_product_ids of this GiftCard.  # noqa: E501
        :type: str
        """

        self._free_product_ids = free_product_ids

    @property
    def message(self):
        """Gets the message of this GiftCard.  # noqa: E501


        :return: The message of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GiftCard.


        :param message: The message of this GiftCard.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def owner_email(self):
        """Gets the owner_email of this GiftCard.  # noqa: E501


        :return: The owner_email of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this GiftCard.


        :param owner_email: The owner_email of this GiftCard.  # noqa: E501
        :type: str
        """

        self._owner_email = owner_email

    @property
    def recipient_email(self):
        """Gets the recipient_email of this GiftCard.  # noqa: E501


        :return: The recipient_email of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._recipient_email

    @recipient_email.setter
    def recipient_email(self, recipient_email):
        """Sets the recipient_email of this GiftCard.


        :param recipient_email: The recipient_email of this GiftCard.  # noqa: E501
        :type: str
        """

        self._recipient_email = recipient_email

    @property
    def owner_name(self):
        """Gets the owner_name of this GiftCard.  # noqa: E501


        :return: The owner_name of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this GiftCard.


        :param owner_name: The owner_name of this GiftCard.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def recipient_name(self):
        """Gets the recipient_name of this GiftCard.  # noqa: E501


        :return: The recipient_name of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this GiftCard.


        :param recipient_name: The recipient_name of this GiftCard.  # noqa: E501
        :type: str
        """

        self._recipient_name = recipient_name

    @property
    def usage_history(self):
        """Gets the usage_history of this GiftCard.  # noqa: E501


        :return: The usage_history of this GiftCard.  # noqa: E501
        :rtype: list[CouponHistory]
        """
        return self._usage_history

    @usage_history.setter
    def usage_history(self, usage_history):
        """Sets the usage_history of this GiftCard.


        :param usage_history: The usage_history of this GiftCard.  # noqa: E501
        :type: list[CouponHistory]
        """

        self._usage_history = usage_history

    @property
    def additional_fields(self):
        """Gets the additional_fields of this GiftCard.  # noqa: E501


        :return: The additional_fields of this GiftCard.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this GiftCard.


        :param additional_fields: The additional_fields of this GiftCard.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this GiftCard.  # noqa: E501


        :return: The custom_fields of this GiftCard.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this GiftCard.


        :param custom_fields: The custom_fields of this GiftCard.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GiftCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiftCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
