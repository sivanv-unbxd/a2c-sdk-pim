# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CatalogPriceRuleAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scope': 'str',
        'apply_to': 'str',
        'type': 'str',
        'quantity': 'float',
        'value': 'float',
        'currency_code': 'str',
        'conditions': 'list[CouponCondition]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'scope': 'scope',
        'apply_to': 'apply_to',
        'type': 'type',
        'quantity': 'quantity',
        'value': 'value',
        'currency_code': 'currency_code',
        'conditions': 'conditions',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, scope=None, apply_to=None, type=None, quantity=None, value=None, currency_code=None, conditions=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """CatalogPriceRuleAction - a model defined in Swagger"""  # noqa: E501

        self._scope = None
        self._apply_to = None
        self._type = None
        self._quantity = None
        self._value = None
        self._currency_code = None
        self._conditions = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if scope is not None:
            self.scope = scope
        if apply_to is not None:
            self.apply_to = apply_to
        if type is not None:
            self.type = type
        if quantity is not None:
            self.quantity = quantity
        if value is not None:
            self.value = value
        if currency_code is not None:
            self.currency_code = currency_code
        if conditions is not None:
            self.conditions = conditions
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def scope(self):
        """Gets the scope of this CatalogPriceRuleAction.  # noqa: E501


        :return: The scope of this CatalogPriceRuleAction.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CatalogPriceRuleAction.


        :param scope: The scope of this CatalogPriceRuleAction.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def apply_to(self):
        """Gets the apply_to of this CatalogPriceRuleAction.  # noqa: E501


        :return: The apply_to of this CatalogPriceRuleAction.  # noqa: E501
        :rtype: str
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this CatalogPriceRuleAction.


        :param apply_to: The apply_to of this CatalogPriceRuleAction.  # noqa: E501
        :type: str
        """

        self._apply_to = apply_to

    @property
    def type(self):
        """Gets the type of this CatalogPriceRuleAction.  # noqa: E501


        :return: The type of this CatalogPriceRuleAction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogPriceRuleAction.


        :param type: The type of this CatalogPriceRuleAction.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def quantity(self):
        """Gets the quantity of this CatalogPriceRuleAction.  # noqa: E501


        :return: The quantity of this CatalogPriceRuleAction.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CatalogPriceRuleAction.


        :param quantity: The quantity of this CatalogPriceRuleAction.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def value(self):
        """Gets the value of this CatalogPriceRuleAction.  # noqa: E501


        :return: The value of this CatalogPriceRuleAction.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CatalogPriceRuleAction.


        :param value: The value of this CatalogPriceRuleAction.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def currency_code(self):
        """Gets the currency_code of this CatalogPriceRuleAction.  # noqa: E501


        :return: The currency_code of this CatalogPriceRuleAction.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CatalogPriceRuleAction.


        :param currency_code: The currency_code of this CatalogPriceRuleAction.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def conditions(self):
        """Gets the conditions of this CatalogPriceRuleAction.  # noqa: E501


        :return: The conditions of this CatalogPriceRuleAction.  # noqa: E501
        :rtype: list[CouponCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this CatalogPriceRuleAction.


        :param conditions: The conditions of this CatalogPriceRuleAction.  # noqa: E501
        :type: list[CouponCondition]
        """

        self._conditions = conditions

    @property
    def additional_fields(self):
        """Gets the additional_fields of this CatalogPriceRuleAction.  # noqa: E501


        :return: The additional_fields of this CatalogPriceRuleAction.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this CatalogPriceRuleAction.


        :param additional_fields: The additional_fields of this CatalogPriceRuleAction.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CatalogPriceRuleAction.  # noqa: E501


        :return: The custom_fields of this CatalogPriceRuleAction.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CatalogPriceRuleAction.


        :param custom_fields: The custom_fields of this CatalogPriceRuleAction.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogPriceRuleAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogPriceRuleAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
