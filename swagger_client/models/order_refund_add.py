# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderRefundAdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'items': 'list[OrderRefundAddItems]',
        'total_price': 'float',
        'shipping_price': 'float',
        'fee_price': 'float',
        'message': 'str',
        'item_restock': 'bool',
        'send_notifications': 'bool',
        '_date': 'str',
        'is_online': 'bool'
    }

    attribute_map = {
        'order_id': 'order_id',
        'items': 'items',
        'total_price': 'total_price',
        'shipping_price': 'shipping_price',
        'fee_price': 'fee_price',
        'message': 'message',
        'item_restock': 'item_restock',
        'send_notifications': 'send_notifications',
        '_date': 'date',
        'is_online': 'is_online'
    }

    def __init__(self, order_id=None, items=None, total_price=None, shipping_price=None, fee_price=None, message=None, item_restock=False, send_notifications=False, _date=None, is_online=False):  # noqa: E501
        """OrderRefundAdd - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._items = None
        self._total_price = None
        self._shipping_price = None
        self._fee_price = None
        self._message = None
        self._item_restock = None
        self._send_notifications = None
        self.__date = None
        self._is_online = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if items is not None:
            self.items = items
        if total_price is not None:
            self.total_price = total_price
        if shipping_price is not None:
            self.shipping_price = shipping_price
        if fee_price is not None:
            self.fee_price = fee_price
        if message is not None:
            self.message = message
        if item_restock is not None:
            self.item_restock = item_restock
        if send_notifications is not None:
            self.send_notifications = send_notifications
        if _date is not None:
            self._date = _date
        if is_online is not None:
            self.is_online = is_online

    @property
    def order_id(self):
        """Gets the order_id of this OrderRefundAdd.  # noqa: E501

        Defines the order for which the refund will be created.  # noqa: E501

        :return: The order_id of this OrderRefundAdd.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderRefundAdd.

        Defines the order for which the refund will be created.  # noqa: E501

        :param order_id: The order_id of this OrderRefundAdd.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def items(self):
        """Gets the items of this OrderRefundAdd.  # noqa: E501

        Defines items in the order that will be refunded  # noqa: E501

        :return: The items of this OrderRefundAdd.  # noqa: E501
        :rtype: list[OrderRefundAddItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrderRefundAdd.

        Defines items in the order that will be refunded  # noqa: E501

        :param items: The items of this OrderRefundAdd.  # noqa: E501
        :type: list[OrderRefundAddItems]
        """

        self._items = items

    @property
    def total_price(self):
        """Gets the total_price of this OrderRefundAdd.  # noqa: E501

        Defines order refund amount.  # noqa: E501

        :return: The total_price of this OrderRefundAdd.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this OrderRefundAdd.

        Defines order refund amount.  # noqa: E501

        :param total_price: The total_price of this OrderRefundAdd.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def shipping_price(self):
        """Gets the shipping_price of this OrderRefundAdd.  # noqa: E501

        Defines refund shipping amount.  # noqa: E501

        :return: The shipping_price of this OrderRefundAdd.  # noqa: E501
        :rtype: float
        """
        return self._shipping_price

    @shipping_price.setter
    def shipping_price(self, shipping_price):
        """Sets the shipping_price of this OrderRefundAdd.

        Defines refund shipping amount.  # noqa: E501

        :param shipping_price: The shipping_price of this OrderRefundAdd.  # noqa: E501
        :type: float
        """

        self._shipping_price = shipping_price

    @property
    def fee_price(self):
        """Gets the fee_price of this OrderRefundAdd.  # noqa: E501

        Specifies refund's fee price  # noqa: E501

        :return: The fee_price of this OrderRefundAdd.  # noqa: E501
        :rtype: float
        """
        return self._fee_price

    @fee_price.setter
    def fee_price(self, fee_price):
        """Sets the fee_price of this OrderRefundAdd.

        Specifies refund's fee price  # noqa: E501

        :param fee_price: The fee_price of this OrderRefundAdd.  # noqa: E501
        :type: float
        """

        self._fee_price = fee_price

    @property
    def message(self):
        """Gets the message of this OrderRefundAdd.  # noqa: E501

        Refund reason, or some else message which assigned to refund.  # noqa: E501

        :return: The message of this OrderRefundAdd.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OrderRefundAdd.

        Refund reason, or some else message which assigned to refund.  # noqa: E501

        :param message: The message of this OrderRefundAdd.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def item_restock(self):
        """Gets the item_restock of this OrderRefundAdd.  # noqa: E501

        Boolean, whether or not to add the line items back to the store inventory.  # noqa: E501

        :return: The item_restock of this OrderRefundAdd.  # noqa: E501
        :rtype: bool
        """
        return self._item_restock

    @item_restock.setter
    def item_restock(self, item_restock):
        """Sets the item_restock of this OrderRefundAdd.

        Boolean, whether or not to add the line items back to the store inventory.  # noqa: E501

        :param item_restock: The item_restock of this OrderRefundAdd.  # noqa: E501
        :type: bool
        """

        self._item_restock = item_restock

    @property
    def send_notifications(self):
        """Gets the send_notifications of this OrderRefundAdd.  # noqa: E501

        Send notifications to customer after refund was created  # noqa: E501

        :return: The send_notifications of this OrderRefundAdd.  # noqa: E501
        :rtype: bool
        """
        return self._send_notifications

    @send_notifications.setter
    def send_notifications(self, send_notifications):
        """Sets the send_notifications of this OrderRefundAdd.

        Send notifications to customer after refund was created  # noqa: E501

        :param send_notifications: The send_notifications of this OrderRefundAdd.  # noqa: E501
        :type: bool
        """

        self._send_notifications = send_notifications

    @property
    def _date(self):
        """Gets the _date of this OrderRefundAdd.  # noqa: E501

        Specifies an order creation date in format Y-m-d H:i:s  # noqa: E501

        :return: The _date of this OrderRefundAdd.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this OrderRefundAdd.

        Specifies an order creation date in format Y-m-d H:i:s  # noqa: E501

        :param _date: The _date of this OrderRefundAdd.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def is_online(self):
        """Gets the is_online of this OrderRefundAdd.  # noqa: E501

        Indicates whether refund type is online  # noqa: E501

        :return: The is_online of this OrderRefundAdd.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this OrderRefundAdd.

        Indicates whether refund type is online  # noqa: E501

        :param is_online: The is_online of this OrderRefundAdd.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderRefundAdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderRefundAdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
