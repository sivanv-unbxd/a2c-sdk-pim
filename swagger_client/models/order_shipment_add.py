# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderShipmentAdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'store_id': 'str',
        'warehouse_id': 'str',
        'shipment_provider': 'str',
        'shipping_method': 'str',
        'items': 'list[OrderShipmentAddItems]',
        'send_notifications': 'bool',
        'tracking_numbers': 'list[OrderShipmentAddTrackingNumbers]',
        'adjust_stock': 'bool',
        'enable_cache': 'bool',
        'tracking_link': 'str'
    }

    attribute_map = {
        'order_id': 'order_id',
        'store_id': 'store_id',
        'warehouse_id': 'warehouse_id',
        'shipment_provider': 'shipment_provider',
        'shipping_method': 'shipping_method',
        'items': 'items',
        'send_notifications': 'send_notifications',
        'tracking_numbers': 'tracking_numbers',
        'adjust_stock': 'adjust_stock',
        'enable_cache': 'enable_cache',
        'tracking_link': 'tracking_link'
    }

    def __init__(self, order_id=None, store_id=None, warehouse_id=None, shipment_provider=None, shipping_method=None, items=None, send_notifications=False, tracking_numbers=None, adjust_stock=False, enable_cache=False, tracking_link=None):  # noqa: E501
        """OrderShipmentAdd - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._store_id = None
        self._warehouse_id = None
        self._shipment_provider = None
        self._shipping_method = None
        self._items = None
        self._send_notifications = None
        self._tracking_numbers = None
        self._adjust_stock = None
        self._enable_cache = None
        self._tracking_link = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if store_id is not None:
            self.store_id = store_id
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if shipment_provider is not None:
            self.shipment_provider = shipment_provider
        if shipping_method is not None:
            self.shipping_method = shipping_method
        if items is not None:
            self.items = items
        if send_notifications is not None:
            self.send_notifications = send_notifications
        if tracking_numbers is not None:
            self.tracking_numbers = tracking_numbers
        if adjust_stock is not None:
            self.adjust_stock = adjust_stock
        if enable_cache is not None:
            self.enable_cache = enable_cache
        if tracking_link is not None:
            self.tracking_link = tracking_link

    @property
    def order_id(self):
        """Gets the order_id of this OrderShipmentAdd.  # noqa: E501

        Defines the order for which the shipment will be created  # noqa: E501

        :return: The order_id of this OrderShipmentAdd.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderShipmentAdd.

        Defines the order for which the shipment will be created  # noqa: E501

        :param order_id: The order_id of this OrderShipmentAdd.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def store_id(self):
        """Gets the store_id of this OrderShipmentAdd.  # noqa: E501

        Store Id  # noqa: E501

        :return: The store_id of this OrderShipmentAdd.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this OrderShipmentAdd.

        Store Id  # noqa: E501

        :param store_id: The store_id of this OrderShipmentAdd.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this OrderShipmentAdd.  # noqa: E501

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.  # noqa: E501

        :return: The warehouse_id of this OrderShipmentAdd.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this OrderShipmentAdd.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.  # noqa: E501

        :param warehouse_id: The warehouse_id of this OrderShipmentAdd.  # noqa: E501
        :type: str
        """

        self._warehouse_id = warehouse_id

    @property
    def shipment_provider(self):
        """Gets the shipment_provider of this OrderShipmentAdd.  # noqa: E501

        Defines company name that provide tracking of shipment  # noqa: E501

        :return: The shipment_provider of this OrderShipmentAdd.  # noqa: E501
        :rtype: str
        """
        return self._shipment_provider

    @shipment_provider.setter
    def shipment_provider(self, shipment_provider):
        """Sets the shipment_provider of this OrderShipmentAdd.

        Defines company name that provide tracking of shipment  # noqa: E501

        :param shipment_provider: The shipment_provider of this OrderShipmentAdd.  # noqa: E501
        :type: str
        """

        self._shipment_provider = shipment_provider

    @property
    def shipping_method(self):
        """Gets the shipping_method of this OrderShipmentAdd.  # noqa: E501

        Define shipping method  # noqa: E501

        :return: The shipping_method of this OrderShipmentAdd.  # noqa: E501
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """Sets the shipping_method of this OrderShipmentAdd.

        Define shipping method  # noqa: E501

        :param shipping_method: The shipping_method of this OrderShipmentAdd.  # noqa: E501
        :type: str
        """

        self._shipping_method = shipping_method

    @property
    def items(self):
        """Gets the items of this OrderShipmentAdd.  # noqa: E501

        Defines items in the order that will be shipped  # noqa: E501

        :return: The items of this OrderShipmentAdd.  # noqa: E501
        :rtype: list[OrderShipmentAddItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrderShipmentAdd.

        Defines items in the order that will be shipped  # noqa: E501

        :param items: The items of this OrderShipmentAdd.  # noqa: E501
        :type: list[OrderShipmentAddItems]
        """

        self._items = items

    @property
    def send_notifications(self):
        """Gets the send_notifications of this OrderShipmentAdd.  # noqa: E501

        Send notifications to customer after shipment was created  # noqa: E501

        :return: The send_notifications of this OrderShipmentAdd.  # noqa: E501
        :rtype: bool
        """
        return self._send_notifications

    @send_notifications.setter
    def send_notifications(self, send_notifications):
        """Sets the send_notifications of this OrderShipmentAdd.

        Send notifications to customer after shipment was created  # noqa: E501

        :param send_notifications: The send_notifications of this OrderShipmentAdd.  # noqa: E501
        :type: bool
        """

        self._send_notifications = send_notifications

    @property
    def tracking_numbers(self):
        """Gets the tracking_numbers of this OrderShipmentAdd.  # noqa: E501

        Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = \"http://docs.api2cart.com/cart-info\">cart.info</a > method  # noqa: E501

        :return: The tracking_numbers of this OrderShipmentAdd.  # noqa: E501
        :rtype: list[OrderShipmentAddTrackingNumbers]
        """
        return self._tracking_numbers

    @tracking_numbers.setter
    def tracking_numbers(self, tracking_numbers):
        """Sets the tracking_numbers of this OrderShipmentAdd.

        Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = \"http://docs.api2cart.com/cart-info\">cart.info</a > method  # noqa: E501

        :param tracking_numbers: The tracking_numbers of this OrderShipmentAdd.  # noqa: E501
        :type: list[OrderShipmentAddTrackingNumbers]
        """

        self._tracking_numbers = tracking_numbers

    @property
    def adjust_stock(self):
        """Gets the adjust_stock of this OrderShipmentAdd.  # noqa: E501

        This parameter is used for adjust stock.  # noqa: E501

        :return: The adjust_stock of this OrderShipmentAdd.  # noqa: E501
        :rtype: bool
        """
        return self._adjust_stock

    @adjust_stock.setter
    def adjust_stock(self, adjust_stock):
        """Sets the adjust_stock of this OrderShipmentAdd.

        This parameter is used for adjust stock.  # noqa: E501

        :param adjust_stock: The adjust_stock of this OrderShipmentAdd.  # noqa: E501
        :type: bool
        """

        self._adjust_stock = adjust_stock

    @property
    def enable_cache(self):
        """Gets the enable_cache of this OrderShipmentAdd.  # noqa: E501

        If the value is 'true' and order exist in our cache, we will use order.info from cache to prepare shipment items.  # noqa: E501

        :return: The enable_cache of this OrderShipmentAdd.  # noqa: E501
        :rtype: bool
        """
        return self._enable_cache

    @enable_cache.setter
    def enable_cache(self, enable_cache):
        """Sets the enable_cache of this OrderShipmentAdd.

        If the value is 'true' and order exist in our cache, we will use order.info from cache to prepare shipment items.  # noqa: E501

        :param enable_cache: The enable_cache of this OrderShipmentAdd.  # noqa: E501
        :type: bool
        """

        self._enable_cache = enable_cache

    @property
    def tracking_link(self):
        """Gets the tracking_link of this OrderShipmentAdd.  # noqa: E501

        Defines custom tracking link  # noqa: E501

        :return: The tracking_link of this OrderShipmentAdd.  # noqa: E501
        :rtype: str
        """
        return self._tracking_link

    @tracking_link.setter
    def tracking_link(self, tracking_link):
        """Sets the tracking_link of this OrderShipmentAdd.

        Defines custom tracking link  # noqa: E501

        :param tracking_link: The tracking_link of this OrderShipmentAdd.  # noqa: E501
        :type: str
        """

        self._tracking_link = tracking_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderShipmentAdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderShipmentAdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
