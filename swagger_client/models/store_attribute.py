# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StoreAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'type': 'str',
        'name': 'str',
        'default_values': 'list[str]',
        'position': 'int',
        'visible': 'bool',
        'required': 'bool',
        'system': 'bool',
        'values': 'list[str]',
        'store_id': 'str',
        'lang_id': 'str',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'type': 'type',
        'name': 'name',
        'default_values': 'default_values',
        'position': 'position',
        'visible': 'visible',
        'required': 'required',
        'system': 'system',
        'values': 'values',
        'store_id': 'store_id',
        'lang_id': 'lang_id',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, code=None, type=None, name=None, default_values=None, position=None, visible=None, required=None, system=None, values=None, store_id=None, lang_id=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """StoreAttribute - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._code = None
        self._type = None
        self._name = None
        self._default_values = None
        self._position = None
        self._visible = None
        self._required = None
        self._system = None
        self._values = None
        self._store_id = None
        self._lang_id = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if default_values is not None:
            self.default_values = default_values
        if position is not None:
            self.position = position
        if visible is not None:
            self.visible = visible
        if required is not None:
            self.required = required
        if system is not None:
            self.system = system
        if values is not None:
            self.values = values
        if store_id is not None:
            self.store_id = store_id
        if lang_id is not None:
            self.lang_id = lang_id
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this StoreAttribute.  # noqa: E501


        :return: The id of this StoreAttribute.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreAttribute.


        :param id: The id of this StoreAttribute.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this StoreAttribute.  # noqa: E501


        :return: The code of this StoreAttribute.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StoreAttribute.


        :param code: The code of this StoreAttribute.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def type(self):
        """Gets the type of this StoreAttribute.  # noqa: E501


        :return: The type of this StoreAttribute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StoreAttribute.


        :param type: The type of this StoreAttribute.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this StoreAttribute.  # noqa: E501


        :return: The name of this StoreAttribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoreAttribute.


        :param name: The name of this StoreAttribute.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def default_values(self):
        """Gets the default_values of this StoreAttribute.  # noqa: E501


        :return: The default_values of this StoreAttribute.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_values

    @default_values.setter
    def default_values(self, default_values):
        """Sets the default_values of this StoreAttribute.


        :param default_values: The default_values of this StoreAttribute.  # noqa: E501
        :type: list[str]
        """

        self._default_values = default_values

    @property
    def position(self):
        """Gets the position of this StoreAttribute.  # noqa: E501


        :return: The position of this StoreAttribute.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StoreAttribute.


        :param position: The position of this StoreAttribute.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def visible(self):
        """Gets the visible of this StoreAttribute.  # noqa: E501


        :return: The visible of this StoreAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this StoreAttribute.


        :param visible: The visible of this StoreAttribute.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def required(self):
        """Gets the required of this StoreAttribute.  # noqa: E501


        :return: The required of this StoreAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this StoreAttribute.


        :param required: The required of this StoreAttribute.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def system(self):
        """Gets the system of this StoreAttribute.  # noqa: E501


        :return: The system of this StoreAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this StoreAttribute.


        :param system: The system of this StoreAttribute.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def values(self):
        """Gets the values of this StoreAttribute.  # noqa: E501


        :return: The values of this StoreAttribute.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this StoreAttribute.


        :param values: The values of this StoreAttribute.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def store_id(self):
        """Gets the store_id of this StoreAttribute.  # noqa: E501


        :return: The store_id of this StoreAttribute.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this StoreAttribute.


        :param store_id: The store_id of this StoreAttribute.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def lang_id(self):
        """Gets the lang_id of this StoreAttribute.  # noqa: E501


        :return: The lang_id of this StoreAttribute.  # noqa: E501
        :rtype: str
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this StoreAttribute.


        :param lang_id: The lang_id of this StoreAttribute.  # noqa: E501
        :type: str
        """

        self._lang_id = lang_id

    @property
    def additional_fields(self):
        """Gets the additional_fields of this StoreAttribute.  # noqa: E501


        :return: The additional_fields of this StoreAttribute.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this StoreAttribute.


        :param additional_fields: The additional_fields of this StoreAttribute.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this StoreAttribute.  # noqa: E501


        :return: The custom_fields of this StoreAttribute.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this StoreAttribute.


        :param custom_fields: The custom_fields of this StoreAttribute.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
