# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductInventory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'warehouse_id': 'str',
        'quantity': 'float',
        'in_stock': 'bool',
        'priority': 'int',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'warehouse_id': 'warehouse_id',
        'quantity': 'quantity',
        'in_stock': 'in_stock',
        'priority': 'priority',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, warehouse_id=None, quantity=None, in_stock=None, priority=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """ProductInventory - a model defined in Swagger"""  # noqa: E501

        self._warehouse_id = None
        self._quantity = None
        self._in_stock = None
        self._priority = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if quantity is not None:
            self.quantity = quantity
        if in_stock is not None:
            self.in_stock = in_stock
        if priority is not None:
            self.priority = priority
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ProductInventory.  # noqa: E501


        :return: The warehouse_id of this ProductInventory.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ProductInventory.


        :param warehouse_id: The warehouse_id of this ProductInventory.  # noqa: E501
        :type: str
        """

        self._warehouse_id = warehouse_id

    @property
    def quantity(self):
        """Gets the quantity of this ProductInventory.  # noqa: E501


        :return: The quantity of this ProductInventory.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductInventory.


        :param quantity: The quantity of this ProductInventory.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def in_stock(self):
        """Gets the in_stock of this ProductInventory.  # noqa: E501


        :return: The in_stock of this ProductInventory.  # noqa: E501
        :rtype: bool
        """
        return self._in_stock

    @in_stock.setter
    def in_stock(self, in_stock):
        """Sets the in_stock of this ProductInventory.


        :param in_stock: The in_stock of this ProductInventory.  # noqa: E501
        :type: bool
        """

        self._in_stock = in_stock

    @property
    def priority(self):
        """Gets the priority of this ProductInventory.  # noqa: E501


        :return: The priority of this ProductInventory.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ProductInventory.


        :param priority: The priority of this ProductInventory.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def additional_fields(self):
        """Gets the additional_fields of this ProductInventory.  # noqa: E501


        :return: The additional_fields of this ProductInventory.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this ProductInventory.


        :param additional_fields: The additional_fields of this ProductInventory.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProductInventory.  # noqa: E501


        :return: The custom_fields of this ProductInventory.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProductInventory.


        :param custom_fields: The custom_fields of this ProductInventory.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductInventory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductInventory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
