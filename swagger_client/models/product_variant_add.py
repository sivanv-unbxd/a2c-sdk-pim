# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductVariantAdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'str',
        'name': 'str',
        'model': 'str',
        'sku': 'str',
        'barcode': 'str',
        'price': 'float',
        'cost_price': 'float',
        'attributes': 'list[ProductVariantAddAttributes]',
        'description': 'str',
        'special_price': 'float',
        'sprice_create': 'str',
        'sprice_modified': 'str',
        'sprice_expire': 'str',
        'available_for_view': 'bool',
        'available_for_sale': 'bool',
        'weight': 'float',
        'weight_unit': 'str',
        'short_description': 'str',
        'warehouse_id': 'str',
        'quantity': 'float',
        'created_at': 'str',
        'manufacturer': 'str',
        'tax_class_id': 'int',
        'meta_title': 'str',
        'meta_keywords': 'str',
        'meta_description': 'str',
        'url': 'str',
        'store_id': 'str',
        'lang_id': 'str',
        'clear_cache': 'bool',
        'taxable': 'bool'
    }

    attribute_map = {
        'product_id': 'product_id',
        'name': 'name',
        'model': 'model',
        'sku': 'sku',
        'barcode': 'barcode',
        'price': 'price',
        'cost_price': 'cost_price',
        'attributes': 'attributes',
        'description': 'description',
        'special_price': 'special_price',
        'sprice_create': 'sprice_create',
        'sprice_modified': 'sprice_modified',
        'sprice_expire': 'sprice_expire',
        'available_for_view': 'available_for_view',
        'available_for_sale': 'available_for_sale',
        'weight': 'weight',
        'weight_unit': 'weight_unit',
        'short_description': 'short_description',
        'warehouse_id': 'warehouse_id',
        'quantity': 'quantity',
        'created_at': 'created_at',
        'manufacturer': 'manufacturer',
        'tax_class_id': 'tax_class_id',
        'meta_title': 'meta_title',
        'meta_keywords': 'meta_keywords',
        'meta_description': 'meta_description',
        'url': 'url',
        'store_id': 'store_id',
        'lang_id': 'lang_id',
        'clear_cache': 'clear_cache',
        'taxable': 'taxable'
    }

    def __init__(self, product_id=None, name=None, model=None, sku=None, barcode=None, price=None, cost_price=None, attributes=None, description=None, special_price=None, sprice_create=None, sprice_modified=None, sprice_expire=None, available_for_view=True, available_for_sale=True, weight=None, weight_unit=None, short_description=None, warehouse_id=None, quantity=None, created_at=None, manufacturer=None, tax_class_id=None, meta_title=None, meta_keywords=None, meta_description=None, url=None, store_id=None, lang_id=None, clear_cache=True, taxable=True):  # noqa: E501
        """ProductVariantAdd - a model defined in Swagger"""  # noqa: E501

        self._product_id = None
        self._name = None
        self._model = None
        self._sku = None
        self._barcode = None
        self._price = None
        self._cost_price = None
        self._attributes = None
        self._description = None
        self._special_price = None
        self._sprice_create = None
        self._sprice_modified = None
        self._sprice_expire = None
        self._available_for_view = None
        self._available_for_sale = None
        self._weight = None
        self._weight_unit = None
        self._short_description = None
        self._warehouse_id = None
        self._quantity = None
        self._created_at = None
        self._manufacturer = None
        self._tax_class_id = None
        self._meta_title = None
        self._meta_keywords = None
        self._meta_description = None
        self._url = None
        self._store_id = None
        self._lang_id = None
        self._clear_cache = None
        self._taxable = None
        self.discriminator = None

        if product_id is not None:
            self.product_id = product_id
        if name is not None:
            self.name = name
        self.model = model
        if sku is not None:
            self.sku = sku
        if barcode is not None:
            self.barcode = barcode
        if price is not None:
            self.price = price
        if cost_price is not None:
            self.cost_price = cost_price
        if attributes is not None:
            self.attributes = attributes
        if description is not None:
            self.description = description
        if special_price is not None:
            self.special_price = special_price
        if sprice_create is not None:
            self.sprice_create = sprice_create
        if sprice_modified is not None:
            self.sprice_modified = sprice_modified
        if sprice_expire is not None:
            self.sprice_expire = sprice_expire
        if available_for_view is not None:
            self.available_for_view = available_for_view
        if available_for_sale is not None:
            self.available_for_sale = available_for_sale
        if weight is not None:
            self.weight = weight
        if weight_unit is not None:
            self.weight_unit = weight_unit
        if short_description is not None:
            self.short_description = short_description
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if quantity is not None:
            self.quantity = quantity
        if created_at is not None:
            self.created_at = created_at
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if tax_class_id is not None:
            self.tax_class_id = tax_class_id
        if meta_title is not None:
            self.meta_title = meta_title
        if meta_keywords is not None:
            self.meta_keywords = meta_keywords
        if meta_description is not None:
            self.meta_description = meta_description
        if url is not None:
            self.url = url
        if store_id is not None:
            self.store_id = store_id
        if lang_id is not None:
            self.lang_id = lang_id
        if clear_cache is not None:
            self.clear_cache = clear_cache
        if taxable is not None:
            self.taxable = taxable

    @property
    def product_id(self):
        """Gets the product_id of this ProductVariantAdd.  # noqa: E501

        Defines product's id where the variant has to be added  # noqa: E501

        :return: The product_id of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductVariantAdd.

        Defines product's id where the variant has to be added  # noqa: E501

        :param product_id: The product_id of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def name(self):
        """Gets the name of this ProductVariantAdd.  # noqa: E501

        Defines variant's name that has to be added  # noqa: E501

        :return: The name of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductVariantAdd.

        Defines variant's name that has to be added  # noqa: E501

        :param name: The name of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model(self):
        """Gets the model of this ProductVariantAdd.  # noqa: E501

        Specifies variant's model that has to be added  # noqa: E501

        :return: The model of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ProductVariantAdd.

        Specifies variant's model that has to be added  # noqa: E501

        :param model: The model of this ProductVariantAdd.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def sku(self):
        """Gets the sku of this ProductVariantAdd.  # noqa: E501

        Defines variant's sku that has to be added  # noqa: E501

        :return: The sku of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductVariantAdd.

        Defines variant's sku that has to be added  # noqa: E501

        :param sku: The sku of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def barcode(self):
        """Gets the barcode of this ProductVariantAdd.  # noqa: E501

        A barcode is a unique code composed of numbers used as a product identifier.  # noqa: E501

        :return: The barcode of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ProductVariantAdd.

        A barcode is a unique code composed of numbers used as a product identifier.  # noqa: E501

        :param barcode: The barcode of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def price(self):
        """Gets the price of this ProductVariantAdd.  # noqa: E501

        Defines new product's variant price  # noqa: E501

        :return: The price of this ProductVariantAdd.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductVariantAdd.

        Defines new product's variant price  # noqa: E501

        :param price: The price of this ProductVariantAdd.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def cost_price(self):
        """Gets the cost_price of this ProductVariantAdd.  # noqa: E501

        Defines new product's cost price  # noqa: E501

        :return: The cost_price of this ProductVariantAdd.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this ProductVariantAdd.

        Defines new product's cost price  # noqa: E501

        :param cost_price: The cost_price of this ProductVariantAdd.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def attributes(self):
        """Gets the attributes of this ProductVariantAdd.  # noqa: E501

        Defines variant's attributes list  # noqa: E501

        :return: The attributes of this ProductVariantAdd.  # noqa: E501
        :rtype: list[ProductVariantAddAttributes]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProductVariantAdd.

        Defines variant's attributes list  # noqa: E501

        :param attributes: The attributes of this ProductVariantAdd.  # noqa: E501
        :type: list[ProductVariantAddAttributes]
        """

        self._attributes = attributes

    @property
    def description(self):
        """Gets the description of this ProductVariantAdd.  # noqa: E501

        Specifies variant's description  # noqa: E501

        :return: The description of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductVariantAdd.

        Specifies variant's description  # noqa: E501

        :param description: The description of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def special_price(self):
        """Gets the special_price of this ProductVariantAdd.  # noqa: E501

        Specifies variant's model that has to be added  # noqa: E501

        :return: The special_price of this ProductVariantAdd.  # noqa: E501
        :rtype: float
        """
        return self._special_price

    @special_price.setter
    def special_price(self, special_price):
        """Sets the special_price of this ProductVariantAdd.

        Specifies variant's model that has to be added  # noqa: E501

        :param special_price: The special_price of this ProductVariantAdd.  # noqa: E501
        :type: float
        """

        self._special_price = special_price

    @property
    def sprice_create(self):
        """Gets the sprice_create of this ProductVariantAdd.  # noqa: E501

        Defines the date of special price creation  # noqa: E501

        :return: The sprice_create of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._sprice_create

    @sprice_create.setter
    def sprice_create(self, sprice_create):
        """Sets the sprice_create of this ProductVariantAdd.

        Defines the date of special price creation  # noqa: E501

        :param sprice_create: The sprice_create of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._sprice_create = sprice_create

    @property
    def sprice_modified(self):
        """Gets the sprice_modified of this ProductVariantAdd.  # noqa: E501

        Defines the date of special price modification  # noqa: E501

        :return: The sprice_modified of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._sprice_modified

    @sprice_modified.setter
    def sprice_modified(self, sprice_modified):
        """Sets the sprice_modified of this ProductVariantAdd.

        Defines the date of special price modification  # noqa: E501

        :param sprice_modified: The sprice_modified of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._sprice_modified = sprice_modified

    @property
    def sprice_expire(self):
        """Gets the sprice_expire of this ProductVariantAdd.  # noqa: E501

        Defines the term of special price offer duration  # noqa: E501

        :return: The sprice_expire of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._sprice_expire

    @sprice_expire.setter
    def sprice_expire(self, sprice_expire):
        """Sets the sprice_expire of this ProductVariantAdd.

        Defines the term of special price offer duration  # noqa: E501

        :param sprice_expire: The sprice_expire of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._sprice_expire = sprice_expire

    @property
    def available_for_view(self):
        """Gets the available_for_view of this ProductVariantAdd.  # noqa: E501

        Specifies the set of visible/invisible product's variants for users  # noqa: E501

        :return: The available_for_view of this ProductVariantAdd.  # noqa: E501
        :rtype: bool
        """
        return self._available_for_view

    @available_for_view.setter
    def available_for_view(self, available_for_view):
        """Sets the available_for_view of this ProductVariantAdd.

        Specifies the set of visible/invisible product's variants for users  # noqa: E501

        :param available_for_view: The available_for_view of this ProductVariantAdd.  # noqa: E501
        :type: bool
        """

        self._available_for_view = available_for_view

    @property
    def available_for_sale(self):
        """Gets the available_for_sale of this ProductVariantAdd.  # noqa: E501

        Specifies the set of visible/invisible product's variants for sale  # noqa: E501

        :return: The available_for_sale of this ProductVariantAdd.  # noqa: E501
        :rtype: bool
        """
        return self._available_for_sale

    @available_for_sale.setter
    def available_for_sale(self, available_for_sale):
        """Sets the available_for_sale of this ProductVariantAdd.

        Specifies the set of visible/invisible product's variants for sale  # noqa: E501

        :param available_for_sale: The available_for_sale of this ProductVariantAdd.  # noqa: E501
        :type: bool
        """

        self._available_for_sale = available_for_sale

    @property
    def weight(self):
        """Gets the weight of this ProductVariantAdd.  # noqa: E501

        Weight  # noqa: E501

        :return: The weight of this ProductVariantAdd.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ProductVariantAdd.

        Weight  # noqa: E501

        :param weight: The weight of this ProductVariantAdd.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this ProductVariantAdd.  # noqa: E501

        Weight Unit  # noqa: E501

        :return: The weight_unit of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this ProductVariantAdd.

        Weight Unit  # noqa: E501

        :param weight_unit: The weight_unit of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._weight_unit = weight_unit

    @property
    def short_description(self):
        """Gets the short_description of this ProductVariantAdd.  # noqa: E501

        Defines short description  # noqa: E501

        :return: The short_description of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ProductVariantAdd.

        Defines short description  # noqa: E501

        :param short_description: The short_description of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ProductVariantAdd.  # noqa: E501

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.  # noqa: E501

        :return: The warehouse_id of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ProductVariantAdd.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.  # noqa: E501

        :param warehouse_id: The warehouse_id of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._warehouse_id = warehouse_id

    @property
    def quantity(self):
        """Gets the quantity of this ProductVariantAdd.  # noqa: E501

        Defines product variant's quantity that has to be added  # noqa: E501

        :return: The quantity of this ProductVariantAdd.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductVariantAdd.

        Defines product variant's quantity that has to be added  # noqa: E501

        :param quantity: The quantity of this ProductVariantAdd.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def created_at(self):
        """Gets the created_at of this ProductVariantAdd.  # noqa: E501

        Defines the date of entity creation  # noqa: E501

        :return: The created_at of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProductVariantAdd.

        Defines the date of entity creation  # noqa: E501

        :param created_at: The created_at of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductVariantAdd.  # noqa: E501

        Specifies the product variant's manufacturer  # noqa: E501

        :return: The manufacturer of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductVariantAdd.

        Specifies the product variant's manufacturer  # noqa: E501

        :param manufacturer: The manufacturer of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def tax_class_id(self):
        """Gets the tax_class_id of this ProductVariantAdd.  # noqa: E501

        Defines tax classes where entity has to be added  # noqa: E501

        :return: The tax_class_id of this ProductVariantAdd.  # noqa: E501
        :rtype: int
        """
        return self._tax_class_id

    @tax_class_id.setter
    def tax_class_id(self, tax_class_id):
        """Sets the tax_class_id of this ProductVariantAdd.

        Defines tax classes where entity has to be added  # noqa: E501

        :param tax_class_id: The tax_class_id of this ProductVariantAdd.  # noqa: E501
        :type: int
        """

        self._tax_class_id = tax_class_id

    @property
    def meta_title(self):
        """Gets the meta_title of this ProductVariantAdd.  # noqa: E501

        Defines unique meta title for each entity  # noqa: E501

        :return: The meta_title of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this ProductVariantAdd.

        Defines unique meta title for each entity  # noqa: E501

        :param meta_title: The meta_title of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._meta_title = meta_title

    @property
    def meta_keywords(self):
        """Gets the meta_keywords of this ProductVariantAdd.  # noqa: E501

        Defines unique meta keywords for each entity  # noqa: E501

        :return: The meta_keywords of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """Sets the meta_keywords of this ProductVariantAdd.

        Defines unique meta keywords for each entity  # noqa: E501

        :param meta_keywords: The meta_keywords of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_description(self):
        """Gets the meta_description of this ProductVariantAdd.  # noqa: E501

        Defines unique meta description of a entity  # noqa: E501

        :return: The meta_description of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this ProductVariantAdd.

        Defines unique meta description of a entity  # noqa: E501

        :param meta_description: The meta_description of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._meta_description = meta_description

    @property
    def url(self):
        """Gets the url of this ProductVariantAdd.  # noqa: E501

        Defines unique product variant's URL  # noqa: E501

        :return: The url of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductVariantAdd.

        Defines unique product variant's URL  # noqa: E501

        :param url: The url of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def store_id(self):
        """Gets the store_id of this ProductVariantAdd.  # noqa: E501

        Add variants specified by store id  # noqa: E501

        :return: The store_id of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ProductVariantAdd.

        Add variants specified by store id  # noqa: E501

        :param store_id: The store_id of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def lang_id(self):
        """Gets the lang_id of this ProductVariantAdd.  # noqa: E501

        Language id  # noqa: E501

        :return: The lang_id of this ProductVariantAdd.  # noqa: E501
        :rtype: str
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this ProductVariantAdd.

        Language id  # noqa: E501

        :param lang_id: The lang_id of this ProductVariantAdd.  # noqa: E501
        :type: str
        """

        self._lang_id = lang_id

    @property
    def clear_cache(self):
        """Gets the clear_cache of this ProductVariantAdd.  # noqa: E501

        Is cache clear required  # noqa: E501

        :return: The clear_cache of this ProductVariantAdd.  # noqa: E501
        :rtype: bool
        """
        return self._clear_cache

    @clear_cache.setter
    def clear_cache(self, clear_cache):
        """Sets the clear_cache of this ProductVariantAdd.

        Is cache clear required  # noqa: E501

        :param clear_cache: The clear_cache of this ProductVariantAdd.  # noqa: E501
        :type: bool
        """

        self._clear_cache = clear_cache

    @property
    def taxable(self):
        """Gets the taxable of this ProductVariantAdd.  # noqa: E501

        Specifies whether a tax is charged  # noqa: E501

        :return: The taxable of this ProductVariantAdd.  # noqa: E501
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this ProductVariantAdd.

        Specifies whether a tax is charged  # noqa: E501

        :param taxable: The taxable of this ProductVariantAdd.  # noqa: E501
        :type: bool
        """

        self._taxable = taxable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductVariantAdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductVariantAdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
