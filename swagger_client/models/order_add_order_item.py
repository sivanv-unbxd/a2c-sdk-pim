# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderAddOrderItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_item_id': 'str',
        'order_item_name': 'str',
        'order_item_model': 'str',
        'order_item_price': 'float',
        'order_item_quantity': 'int',
        'order_item_variant_id': 'str',
        'order_item_tax': 'float',
        'order_item_parent': 'int',
        'order_item_parent_option_name': 'str',
        'order_item_allow_refund_items_separately': 'bool',
        'order_item_allow_ship_items_separately': 'bool',
        'order_item_price_includes_tax': 'bool',
        'order_item_option': 'list[OrderAddOrderItemOption]',
        'order_item_property': 'list[OrderAddOrderItemProperty]'
    }

    attribute_map = {
        'order_item_id': 'order_item_id',
        'order_item_name': 'order_item_name',
        'order_item_model': 'order_item_model',
        'order_item_price': 'order_item_price',
        'order_item_quantity': 'order_item_quantity',
        'order_item_variant_id': 'order_item_variant_id',
        'order_item_tax': 'order_item_tax',
        'order_item_parent': 'order_item_parent',
        'order_item_parent_option_name': 'order_item_parent_option_name',
        'order_item_allow_refund_items_separately': 'order_item_allow_refund_items_separately',
        'order_item_allow_ship_items_separately': 'order_item_allow_ship_items_separately',
        'order_item_price_includes_tax': 'order_item_price_includes_tax',
        'order_item_option': 'order_item_option',
        'order_item_property': 'order_item_property'
    }

    def __init__(self, order_item_id=None, order_item_name=None, order_item_model=None, order_item_price=None, order_item_quantity=None, order_item_variant_id=None, order_item_tax=None, order_item_parent=None, order_item_parent_option_name=None, order_item_allow_refund_items_separately=None, order_item_allow_ship_items_separately=None, order_item_price_includes_tax=False, order_item_option=None, order_item_property=None):  # noqa: E501
        """OrderAddOrderItem - a model defined in Swagger"""  # noqa: E501

        self._order_item_id = None
        self._order_item_name = None
        self._order_item_model = None
        self._order_item_price = None
        self._order_item_quantity = None
        self._order_item_variant_id = None
        self._order_item_tax = None
        self._order_item_parent = None
        self._order_item_parent_option_name = None
        self._order_item_allow_refund_items_separately = None
        self._order_item_allow_ship_items_separately = None
        self._order_item_price_includes_tax = None
        self._order_item_option = None
        self._order_item_property = None
        self.discriminator = None

        self.order_item_id = order_item_id
        self.order_item_name = order_item_name
        if order_item_model is not None:
            self.order_item_model = order_item_model
        self.order_item_price = order_item_price
        self.order_item_quantity = order_item_quantity
        if order_item_variant_id is not None:
            self.order_item_variant_id = order_item_variant_id
        if order_item_tax is not None:
            self.order_item_tax = order_item_tax
        if order_item_parent is not None:
            self.order_item_parent = order_item_parent
        if order_item_parent_option_name is not None:
            self.order_item_parent_option_name = order_item_parent_option_name
        if order_item_allow_refund_items_separately is not None:
            self.order_item_allow_refund_items_separately = order_item_allow_refund_items_separately
        if order_item_allow_ship_items_separately is not None:
            self.order_item_allow_ship_items_separately = order_item_allow_ship_items_separately
        if order_item_price_includes_tax is not None:
            self.order_item_price_includes_tax = order_item_price_includes_tax
        if order_item_option is not None:
            self.order_item_option = order_item_option
        if order_item_property is not None:
            self.order_item_property = order_item_property

    @property
    def order_item_id(self):
        """Gets the order_item_id of this OrderAddOrderItem.  # noqa: E501

        Defines orders specified by order item id  # noqa: E501

        :return: The order_item_id of this OrderAddOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """Sets the order_item_id of this OrderAddOrderItem.

        Defines orders specified by order item id  # noqa: E501

        :param order_item_id: The order_item_id of this OrderAddOrderItem.  # noqa: E501
        :type: str
        """
        if order_item_id is None:
            raise ValueError("Invalid value for `order_item_id`, must not be `None`")  # noqa: E501

        self._order_item_id = order_item_id

    @property
    def order_item_name(self):
        """Gets the order_item_name of this OrderAddOrderItem.  # noqa: E501

        Defines orders specified by order item name  # noqa: E501

        :return: The order_item_name of this OrderAddOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._order_item_name

    @order_item_name.setter
    def order_item_name(self, order_item_name):
        """Sets the order_item_name of this OrderAddOrderItem.

        Defines orders specified by order item name  # noqa: E501

        :param order_item_name: The order_item_name of this OrderAddOrderItem.  # noqa: E501
        :type: str
        """
        if order_item_name is None:
            raise ValueError("Invalid value for `order_item_name`, must not be `None`")  # noqa: E501

        self._order_item_name = order_item_name

    @property
    def order_item_model(self):
        """Gets the order_item_model of this OrderAddOrderItem.  # noqa: E501

        Defines orders specified by order item model  # noqa: E501

        :return: The order_item_model of this OrderAddOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._order_item_model

    @order_item_model.setter
    def order_item_model(self, order_item_model):
        """Sets the order_item_model of this OrderAddOrderItem.

        Defines orders specified by order item model  # noqa: E501

        :param order_item_model: The order_item_model of this OrderAddOrderItem.  # noqa: E501
        :type: str
        """

        self._order_item_model = order_item_model

    @property
    def order_item_price(self):
        """Gets the order_item_price of this OrderAddOrderItem.  # noqa: E501

        Defines orders specified by order item price  # noqa: E501

        :return: The order_item_price of this OrderAddOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._order_item_price

    @order_item_price.setter
    def order_item_price(self, order_item_price):
        """Sets the order_item_price of this OrderAddOrderItem.

        Defines orders specified by order item price  # noqa: E501

        :param order_item_price: The order_item_price of this OrderAddOrderItem.  # noqa: E501
        :type: float
        """
        if order_item_price is None:
            raise ValueError("Invalid value for `order_item_price`, must not be `None`")  # noqa: E501

        self._order_item_price = order_item_price

    @property
    def order_item_quantity(self):
        """Gets the order_item_quantity of this OrderAddOrderItem.  # noqa: E501

        Defines orders specified by order item quantity  # noqa: E501

        :return: The order_item_quantity of this OrderAddOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._order_item_quantity

    @order_item_quantity.setter
    def order_item_quantity(self, order_item_quantity):
        """Sets the order_item_quantity of this OrderAddOrderItem.

        Defines orders specified by order item quantity  # noqa: E501

        :param order_item_quantity: The order_item_quantity of this OrderAddOrderItem.  # noqa: E501
        :type: int
        """
        if order_item_quantity is None:
            raise ValueError("Invalid value for `order_item_quantity`, must not be `None`")  # noqa: E501

        self._order_item_quantity = order_item_quantity

    @property
    def order_item_variant_id(self):
        """Gets the order_item_variant_id of this OrderAddOrderItem.  # noqa: E501

        Ordered product variant. Where x is order item ID  # noqa: E501

        :return: The order_item_variant_id of this OrderAddOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._order_item_variant_id

    @order_item_variant_id.setter
    def order_item_variant_id(self, order_item_variant_id):
        """Sets the order_item_variant_id of this OrderAddOrderItem.

        Ordered product variant. Where x is order item ID  # noqa: E501

        :param order_item_variant_id: The order_item_variant_id of this OrderAddOrderItem.  # noqa: E501
        :type: str
        """

        self._order_item_variant_id = order_item_variant_id

    @property
    def order_item_tax(self):
        """Gets the order_item_tax of this OrderAddOrderItem.  # noqa: E501

        Percentage of tax for product order  # noqa: E501

        :return: The order_item_tax of this OrderAddOrderItem.  # noqa: E501
        :rtype: float
        """
        return self._order_item_tax

    @order_item_tax.setter
    def order_item_tax(self, order_item_tax):
        """Sets the order_item_tax of this OrderAddOrderItem.

        Percentage of tax for product order  # noqa: E501

        :param order_item_tax: The order_item_tax of this OrderAddOrderItem.  # noqa: E501
        :type: float
        """

        self._order_item_tax = order_item_tax

    @property
    def order_item_parent(self):
        """Gets the order_item_parent of this OrderAddOrderItem.  # noqa: E501

        Index of the parent grouped/bundle product  # noqa: E501

        :return: The order_item_parent of this OrderAddOrderItem.  # noqa: E501
        :rtype: int
        """
        return self._order_item_parent

    @order_item_parent.setter
    def order_item_parent(self, order_item_parent):
        """Sets the order_item_parent of this OrderAddOrderItem.

        Index of the parent grouped/bundle product  # noqa: E501

        :param order_item_parent: The order_item_parent of this OrderAddOrderItem.  # noqa: E501
        :type: int
        """

        self._order_item_parent = order_item_parent

    @property
    def order_item_parent_option_name(self):
        """Gets the order_item_parent_option_name of this OrderAddOrderItem.  # noqa: E501

        Option name of the parent grouped/bundle product  # noqa: E501

        :return: The order_item_parent_option_name of this OrderAddOrderItem.  # noqa: E501
        :rtype: str
        """
        return self._order_item_parent_option_name

    @order_item_parent_option_name.setter
    def order_item_parent_option_name(self, order_item_parent_option_name):
        """Sets the order_item_parent_option_name of this OrderAddOrderItem.

        Option name of the parent grouped/bundle product  # noqa: E501

        :param order_item_parent_option_name: The order_item_parent_option_name of this OrderAddOrderItem.  # noqa: E501
        :type: str
        """

        self._order_item_parent_option_name = order_item_parent_option_name

    @property
    def order_item_allow_refund_items_separately(self):
        """Gets the order_item_allow_refund_items_separately of this OrderAddOrderItem.  # noqa: E501

        Indicates whether subitems of the grouped/bundle product can be refunded separately  # noqa: E501

        :return: The order_item_allow_refund_items_separately of this OrderAddOrderItem.  # noqa: E501
        :rtype: bool
        """
        return self._order_item_allow_refund_items_separately

    @order_item_allow_refund_items_separately.setter
    def order_item_allow_refund_items_separately(self, order_item_allow_refund_items_separately):
        """Sets the order_item_allow_refund_items_separately of this OrderAddOrderItem.

        Indicates whether subitems of the grouped/bundle product can be refunded separately  # noqa: E501

        :param order_item_allow_refund_items_separately: The order_item_allow_refund_items_separately of this OrderAddOrderItem.  # noqa: E501
        :type: bool
        """

        self._order_item_allow_refund_items_separately = order_item_allow_refund_items_separately

    @property
    def order_item_allow_ship_items_separately(self):
        """Gets the order_item_allow_ship_items_separately of this OrderAddOrderItem.  # noqa: E501

        Indicates whether subitems of the grouped/bundle product can be shipped separately  # noqa: E501

        :return: The order_item_allow_ship_items_separately of this OrderAddOrderItem.  # noqa: E501
        :rtype: bool
        """
        return self._order_item_allow_ship_items_separately

    @order_item_allow_ship_items_separately.setter
    def order_item_allow_ship_items_separately(self, order_item_allow_ship_items_separately):
        """Sets the order_item_allow_ship_items_separately of this OrderAddOrderItem.

        Indicates whether subitems of the grouped/bundle product can be shipped separately  # noqa: E501

        :param order_item_allow_ship_items_separately: The order_item_allow_ship_items_separately of this OrderAddOrderItem.  # noqa: E501
        :type: bool
        """

        self._order_item_allow_ship_items_separately = order_item_allow_ship_items_separately

    @property
    def order_item_price_includes_tax(self):
        """Gets the order_item_price_includes_tax of this OrderAddOrderItem.  # noqa: E501

        Defines if item price includes tax  # noqa: E501

        :return: The order_item_price_includes_tax of this OrderAddOrderItem.  # noqa: E501
        :rtype: bool
        """
        return self._order_item_price_includes_tax

    @order_item_price_includes_tax.setter
    def order_item_price_includes_tax(self, order_item_price_includes_tax):
        """Sets the order_item_price_includes_tax of this OrderAddOrderItem.

        Defines if item price includes tax  # noqa: E501

        :param order_item_price_includes_tax: The order_item_price_includes_tax of this OrderAddOrderItem.  # noqa: E501
        :type: bool
        """

        self._order_item_price_includes_tax = order_item_price_includes_tax

    @property
    def order_item_option(self):
        """Gets the order_item_option of this OrderAddOrderItem.  # noqa: E501


        :return: The order_item_option of this OrderAddOrderItem.  # noqa: E501
        :rtype: list[OrderAddOrderItemOption]
        """
        return self._order_item_option

    @order_item_option.setter
    def order_item_option(self, order_item_option):
        """Sets the order_item_option of this OrderAddOrderItem.


        :param order_item_option: The order_item_option of this OrderAddOrderItem.  # noqa: E501
        :type: list[OrderAddOrderItemOption]
        """

        self._order_item_option = order_item_option

    @property
    def order_item_property(self):
        """Gets the order_item_property of this OrderAddOrderItem.  # noqa: E501


        :return: The order_item_property of this OrderAddOrderItem.  # noqa: E501
        :rtype: list[OrderAddOrderItemProperty]
        """
        return self._order_item_property

    @order_item_property.setter
    def order_item_property(self, order_item_property):
        """Sets the order_item_property of this OrderAddOrderItem.


        :param order_item_property: The order_item_property of this OrderAddOrderItem.  # noqa: E501
        :type: list[OrderAddOrderItemProperty]
        """

        self._order_item_property = order_item_property

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderAddOrderItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderAddOrderItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
