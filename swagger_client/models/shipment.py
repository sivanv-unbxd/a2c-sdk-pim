# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Shipment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'order_id': 'str',
        'warehouse_id': 'str',
        'shipment_provider': 'str',
        'tracking_numbers': 'list[ShipmentTrackingNumber]',
        'created_at': 'A2CDateTime',
        'items': 'list[ShipmentItems]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'order_id': 'order_id',
        'warehouse_id': 'warehouse_id',
        'shipment_provider': 'shipment_provider',
        'tracking_numbers': 'tracking_numbers',
        'created_at': 'created_at',
        'items': 'items',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, order_id=None, warehouse_id=None, shipment_provider=None, tracking_numbers=None, created_at=None, items=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """Shipment - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._order_id = None
        self._warehouse_id = None
        self._shipment_provider = None
        self._tracking_numbers = None
        self._created_at = None
        self._items = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if order_id is not None:
            self.order_id = order_id
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if shipment_provider is not None:
            self.shipment_provider = shipment_provider
        if tracking_numbers is not None:
            self.tracking_numbers = tracking_numbers
        if created_at is not None:
            self.created_at = created_at
        if items is not None:
            self.items = items
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Shipment.  # noqa: E501


        :return: The id of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Shipment.


        :param id: The id of this Shipment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def order_id(self):
        """Gets the order_id of this Shipment.  # noqa: E501


        :return: The order_id of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Shipment.


        :param order_id: The order_id of this Shipment.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Shipment.  # noqa: E501


        :return: The warehouse_id of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Shipment.


        :param warehouse_id: The warehouse_id of this Shipment.  # noqa: E501
        :type: str
        """

        self._warehouse_id = warehouse_id

    @property
    def shipment_provider(self):
        """Gets the shipment_provider of this Shipment.  # noqa: E501


        :return: The shipment_provider of this Shipment.  # noqa: E501
        :rtype: str
        """
        return self._shipment_provider

    @shipment_provider.setter
    def shipment_provider(self, shipment_provider):
        """Sets the shipment_provider of this Shipment.


        :param shipment_provider: The shipment_provider of this Shipment.  # noqa: E501
        :type: str
        """

        self._shipment_provider = shipment_provider

    @property
    def tracking_numbers(self):
        """Gets the tracking_numbers of this Shipment.  # noqa: E501


        :return: The tracking_numbers of this Shipment.  # noqa: E501
        :rtype: list[ShipmentTrackingNumber]
        """
        return self._tracking_numbers

    @tracking_numbers.setter
    def tracking_numbers(self, tracking_numbers):
        """Sets the tracking_numbers of this Shipment.


        :param tracking_numbers: The tracking_numbers of this Shipment.  # noqa: E501
        :type: list[ShipmentTrackingNumber]
        """

        self._tracking_numbers = tracking_numbers

    @property
    def created_at(self):
        """Gets the created_at of this Shipment.  # noqa: E501


        :return: The created_at of this Shipment.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Shipment.


        :param created_at: The created_at of this Shipment.  # noqa: E501
        :type: A2CDateTime
        """

        self._created_at = created_at

    @property
    def items(self):
        """Gets the items of this Shipment.  # noqa: E501


        :return: The items of this Shipment.  # noqa: E501
        :rtype: list[ShipmentItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Shipment.


        :param items: The items of this Shipment.  # noqa: E501
        :type: list[ShipmentItems]
        """

        self._items = items

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Shipment.  # noqa: E501


        :return: The additional_fields of this Shipment.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Shipment.


        :param additional_fields: The additional_fields of this Shipment.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Shipment.  # noqa: E501


        :return: The custom_fields of this Shipment.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Shipment.


        :param custom_fields: The custom_fields of this Shipment.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Shipment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
