# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountCartAdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cart_id': 'str',
        'store_url': 'str',
        'bridge_url': 'str',
        'store_root': 'str',
        'store_key': 'str',
        'validate_version': 'bool',
        'verify': 'bool',
        'db_tables_prefix': 'str',
        'ftp_host': 'str',
        'ftp_user': 'str',
        'ftp_password': 'str',
        'ftp_port': 'int',
        'ftp_store_dir': 'str',
        '_3dcartapi_api_key': 'str',
        'amazon_sp_client_id': 'str',
        'amazon_sp_client_secret': 'str',
        'amazon_sp_aws_user_key_id': 'str',
        'amazon_sp_aws_user_secret': 'str',
        'amazon_sp_aws_region': 'str',
        'amazon_sp_aws_role_arn': 'str',
        'amazon_sp_refresh_token': 'str',
        'amazon_sp_api_environment': 'str',
        'amazon_access_token': 'str',
        'amazon_seller_id': 'str',
        'amazon_marketplaces_ids': 'str',
        'amazon_secret_key': 'str',
        'amazon_access_key_id': 'str',
        'aspdotnetstorefront_api_user': 'str',
        'aspdotnetstorefront_api_pass': 'str',
        'bigcommerceapi_admin_account': 'str',
        'bigcommerceapi_api_path': 'str',
        'bigcommerceapi_api_key': 'str',
        'bigcommerceapi_client_id': 'str',
        'bigcommerceapi_access_token': 'str',
        'bigcommerceapi_context': 'str',
        'demandware_client_id': 'str',
        'demandware_api_password': 'str',
        'demandware_user_name': 'str',
        'demandware_user_password': 'str',
        'demandware_env_type': 'str',
        'ebay_client_id': 'str',
        'ebay_client_secret': 'str',
        'ebay_runame': 'str',
        'ebay_access_token': 'str',
        'ebay_refresh_token': 'str',
        'ebay_environment': 'str',
        'ebay_site_id': 'int',
        'walmart_client_id': 'str',
        'walmart_client_secret': 'str',
        'walmart_environment': 'str',
        'walmart_channel_type': 'str',
        'ecwid_acess_token': 'str',
        'ecwid_store_id': 'str',
        'lightspeed_api_key': 'str',
        'lightspeed_api_secret': 'str',
        'etsy_keystring': 'str',
        'etsy_shared_secret': 'str',
        'etsy_access_token': 'str',
        'etsy_token_secret': 'str',
        'neto_api_key': 'str',
        'neto_api_username': 'str',
        'shopify_api_key': 'str',
        'shopify_api_password': 'str',
        'shopify_shared_secret': 'str',
        'shopify_access_token': 'str',
        'shopware_api_key': 'str',
        'shopware_api_secret': 'str',
        'volusion_login': 'str',
        'volusion_password': 'str',
        'hybris_client_id': 'str',
        'hybris_client_secret': 'str',
        'hybris_username': 'str',
        'hybris_password': 'str',
        'hybris_websites': 'list[AccountCartAddHybrisWebsites]',
        'squarespace_api_key': 'str',
        'commercehq_api_key': 'str',
        'commercehq_api_password': 'str'
    }

    attribute_map = {
        'cart_id': 'cart_id',
        'store_url': 'store_url',
        'bridge_url': 'bridge_url',
        'store_root': 'store_root',
        'store_key': 'store_key',
        'validate_version': 'validate_version',
        'verify': 'verify',
        'db_tables_prefix': 'db_tables_prefix',
        'ftp_host': 'ftp_host',
        'ftp_user': 'ftp_user',
        'ftp_password': 'ftp_password',
        'ftp_port': 'ftp_port',
        'ftp_store_dir': 'ftp_store_dir',
        '_3dcartapi_api_key': '3dcartapi_api_key',
        'amazon_sp_client_id': 'amazon_sp_client_id',
        'amazon_sp_client_secret': 'amazon_sp_client_secret',
        'amazon_sp_aws_user_key_id': 'amazon_sp_aws_user_key_id',
        'amazon_sp_aws_user_secret': 'amazon_sp_aws_user_secret',
        'amazon_sp_aws_region': 'amazon_sp_aws_region',
        'amazon_sp_aws_role_arn': 'amazon_sp_aws_role_arn',
        'amazon_sp_refresh_token': 'amazon_sp_refresh_token',
        'amazon_sp_api_environment': 'amazon_sp_api_environment',
        'amazon_access_token': 'amazon_access_token',
        'amazon_seller_id': 'amazon_seller_id',
        'amazon_marketplaces_ids': 'amazon_marketplaces_ids',
        'amazon_secret_key': 'amazon_secret_key',
        'amazon_access_key_id': 'amazon_access_key_id',
        'aspdotnetstorefront_api_user': 'aspdotnetstorefront_api_user',
        'aspdotnetstorefront_api_pass': 'aspdotnetstorefront_api_pass',
        'bigcommerceapi_admin_account': 'bigcommerceapi_admin_account',
        'bigcommerceapi_api_path': 'bigcommerceapi_api_path',
        'bigcommerceapi_api_key': 'bigcommerceapi_api_key',
        'bigcommerceapi_client_id': 'bigcommerceapi_client_id',
        'bigcommerceapi_access_token': 'bigcommerceapi_access_token',
        'bigcommerceapi_context': 'bigcommerceapi_context',
        'demandware_client_id': 'demandware_client_id',
        'demandware_api_password': 'demandware_api_password',
        'demandware_user_name': 'demandware_user_name',
        'demandware_user_password': 'demandware_user_password',
        'demandware_env_type': 'demandware_env_type',
        'ebay_client_id': 'ebay_client_id',
        'ebay_client_secret': 'ebay_client_secret',
        'ebay_runame': 'ebay_runame',
        'ebay_access_token': 'ebay_access_token',
        'ebay_refresh_token': 'ebay_refresh_token',
        'ebay_environment': 'ebay_environment',
        'ebay_site_id': 'ebay_site_id',
        'walmart_client_id': 'walmart_client_id',
        'walmart_client_secret': 'walmart_client_secret',
        'walmart_environment': 'walmart_environment',
        'walmart_channel_type': 'walmart_channel_type',
        'ecwid_acess_token': 'ecwid_acess_token',
        'ecwid_store_id': 'ecwid_store_id',
        'lightspeed_api_key': 'lightspeed_api_key',
        'lightspeed_api_secret': 'lightspeed_api_secret',
        'etsy_keystring': 'etsy_keystring',
        'etsy_shared_secret': 'etsy_shared_secret',
        'etsy_access_token': 'etsy_access_token',
        'etsy_token_secret': 'etsy_token_secret',
        'neto_api_key': 'neto_api_key',
        'neto_api_username': 'neto_api_username',
        'shopify_api_key': 'shopify_api_key',
        'shopify_api_password': 'shopify_api_password',
        'shopify_shared_secret': 'shopify_shared_secret',
        'shopify_access_token': 'shopify_access_token',
        'shopware_api_key': 'shopware_api_key',
        'shopware_api_secret': 'shopware_api_secret',
        'volusion_login': 'volusion_login',
        'volusion_password': 'volusion_password',
        'hybris_client_id': 'hybris_client_id',
        'hybris_client_secret': 'hybris_client_secret',
        'hybris_username': 'hybris_username',
        'hybris_password': 'hybris_password',
        'hybris_websites': 'hybris_websites',
        'squarespace_api_key': 'squarespace_api_key',
        'commercehq_api_key': 'commercehq_api_key',
        'commercehq_api_password': 'commercehq_api_password'
    }

    def __init__(self, cart_id=None, store_url=None, bridge_url=None, store_root=None, store_key=None, validate_version=False, verify=True, db_tables_prefix=None, ftp_host=None, ftp_user=None, ftp_password=None, ftp_port=None, ftp_store_dir=None, _3dcartapi_api_key=None, amazon_sp_client_id=None, amazon_sp_client_secret=None, amazon_sp_aws_user_key_id=None, amazon_sp_aws_user_secret=None, amazon_sp_aws_region=None, amazon_sp_aws_role_arn=None, amazon_sp_refresh_token=None, amazon_sp_api_environment='production', amazon_access_token=None, amazon_seller_id=None, amazon_marketplaces_ids=None, amazon_secret_key=None, amazon_access_key_id=None, aspdotnetstorefront_api_user=None, aspdotnetstorefront_api_pass=None, bigcommerceapi_admin_account=None, bigcommerceapi_api_path=None, bigcommerceapi_api_key=None, bigcommerceapi_client_id=None, bigcommerceapi_access_token=None, bigcommerceapi_context=None, demandware_client_id=None, demandware_api_password=None, demandware_user_name=None, demandware_user_password=None, demandware_env_type='production', ebay_client_id=None, ebay_client_secret=None, ebay_runame=None, ebay_access_token=None, ebay_refresh_token=None, ebay_environment='production', ebay_site_id=None, walmart_client_id=None, walmart_client_secret=None, walmart_environment='production', walmart_channel_type=None, ecwid_acess_token=None, ecwid_store_id=None, lightspeed_api_key=None, lightspeed_api_secret=None, etsy_keystring=None, etsy_shared_secret=None, etsy_access_token=None, etsy_token_secret=None, neto_api_key=None, neto_api_username=None, shopify_api_key=None, shopify_api_password=None, shopify_shared_secret=None, shopify_access_token=None, shopware_api_key=None, shopware_api_secret=None, volusion_login=None, volusion_password=None, hybris_client_id=None, hybris_client_secret=None, hybris_username=None, hybris_password=None, hybris_websites=None, squarespace_api_key=None, commercehq_api_key=None, commercehq_api_password=None):  # noqa: E501
        """AccountCartAdd - a model defined in Swagger"""  # noqa: E501

        self._cart_id = None
        self._store_url = None
        self._bridge_url = None
        self._store_root = None
        self._store_key = None
        self._validate_version = None
        self._verify = None
        self._db_tables_prefix = None
        self._ftp_host = None
        self._ftp_user = None
        self._ftp_password = None
        self._ftp_port = None
        self._ftp_store_dir = None
        self.__3dcartapi_api_key = None
        self._amazon_sp_client_id = None
        self._amazon_sp_client_secret = None
        self._amazon_sp_aws_user_key_id = None
        self._amazon_sp_aws_user_secret = None
        self._amazon_sp_aws_region = None
        self._amazon_sp_aws_role_arn = None
        self._amazon_sp_refresh_token = None
        self._amazon_sp_api_environment = None
        self._amazon_access_token = None
        self._amazon_seller_id = None
        self._amazon_marketplaces_ids = None
        self._amazon_secret_key = None
        self._amazon_access_key_id = None
        self._aspdotnetstorefront_api_user = None
        self._aspdotnetstorefront_api_pass = None
        self._bigcommerceapi_admin_account = None
        self._bigcommerceapi_api_path = None
        self._bigcommerceapi_api_key = None
        self._bigcommerceapi_client_id = None
        self._bigcommerceapi_access_token = None
        self._bigcommerceapi_context = None
        self._demandware_client_id = None
        self._demandware_api_password = None
        self._demandware_user_name = None
        self._demandware_user_password = None
        self._demandware_env_type = None
        self._ebay_client_id = None
        self._ebay_client_secret = None
        self._ebay_runame = None
        self._ebay_access_token = None
        self._ebay_refresh_token = None
        self._ebay_environment = None
        self._ebay_site_id = None
        self._walmart_client_id = None
        self._walmart_client_secret = None
        self._walmart_environment = None
        self._walmart_channel_type = None
        self._ecwid_acess_token = None
        self._ecwid_store_id = None
        self._lightspeed_api_key = None
        self._lightspeed_api_secret = None
        self._etsy_keystring = None
        self._etsy_shared_secret = None
        self._etsy_access_token = None
        self._etsy_token_secret = None
        self._neto_api_key = None
        self._neto_api_username = None
        self._shopify_api_key = None
        self._shopify_api_password = None
        self._shopify_shared_secret = None
        self._shopify_access_token = None
        self._shopware_api_key = None
        self._shopware_api_secret = None
        self._volusion_login = None
        self._volusion_password = None
        self._hybris_client_id = None
        self._hybris_client_secret = None
        self._hybris_username = None
        self._hybris_password = None
        self._hybris_websites = None
        self._squarespace_api_key = None
        self._commercehq_api_key = None
        self._commercehq_api_password = None
        self.discriminator = None

        self.cart_id = cart_id
        self.store_url = store_url
        if bridge_url is not None:
            self.bridge_url = bridge_url
        if store_root is not None:
            self.store_root = store_root
        if store_key is not None:
            self.store_key = store_key
        if validate_version is not None:
            self.validate_version = validate_version
        if verify is not None:
            self.verify = verify
        if db_tables_prefix is not None:
            self.db_tables_prefix = db_tables_prefix
        if ftp_host is not None:
            self.ftp_host = ftp_host
        if ftp_user is not None:
            self.ftp_user = ftp_user
        if ftp_password is not None:
            self.ftp_password = ftp_password
        if ftp_port is not None:
            self.ftp_port = ftp_port
        if ftp_store_dir is not None:
            self.ftp_store_dir = ftp_store_dir
        if _3dcartapi_api_key is not None:
            self._3dcartapi_api_key = _3dcartapi_api_key
        self.amazon_sp_client_id = amazon_sp_client_id
        self.amazon_sp_client_secret = amazon_sp_client_secret
        self.amazon_sp_aws_user_key_id = amazon_sp_aws_user_key_id
        self.amazon_sp_aws_user_secret = amazon_sp_aws_user_secret
        self.amazon_sp_aws_region = amazon_sp_aws_region
        self.amazon_sp_aws_role_arn = amazon_sp_aws_role_arn
        self.amazon_sp_refresh_token = amazon_sp_refresh_token
        if amazon_sp_api_environment is not None:
            self.amazon_sp_api_environment = amazon_sp_api_environment
        if amazon_access_token is not None:
            self.amazon_access_token = amazon_access_token
        if amazon_seller_id is not None:
            self.amazon_seller_id = amazon_seller_id
        if amazon_marketplaces_ids is not None:
            self.amazon_marketplaces_ids = amazon_marketplaces_ids
        if amazon_secret_key is not None:
            self.amazon_secret_key = amazon_secret_key
        if amazon_access_key_id is not None:
            self.amazon_access_key_id = amazon_access_key_id
        if aspdotnetstorefront_api_user is not None:
            self.aspdotnetstorefront_api_user = aspdotnetstorefront_api_user
        if aspdotnetstorefront_api_pass is not None:
            self.aspdotnetstorefront_api_pass = aspdotnetstorefront_api_pass
        if bigcommerceapi_admin_account is not None:
            self.bigcommerceapi_admin_account = bigcommerceapi_admin_account
        if bigcommerceapi_api_path is not None:
            self.bigcommerceapi_api_path = bigcommerceapi_api_path
        if bigcommerceapi_api_key is not None:
            self.bigcommerceapi_api_key = bigcommerceapi_api_key
        if bigcommerceapi_client_id is not None:
            self.bigcommerceapi_client_id = bigcommerceapi_client_id
        if bigcommerceapi_access_token is not None:
            self.bigcommerceapi_access_token = bigcommerceapi_access_token
        if bigcommerceapi_context is not None:
            self.bigcommerceapi_context = bigcommerceapi_context
        if demandware_client_id is not None:
            self.demandware_client_id = demandware_client_id
        if demandware_api_password is not None:
            self.demandware_api_password = demandware_api_password
        if demandware_user_name is not None:
            self.demandware_user_name = demandware_user_name
        if demandware_user_password is not None:
            self.demandware_user_password = demandware_user_password
        if demandware_env_type is not None:
            self.demandware_env_type = demandware_env_type
        if ebay_client_id is not None:
            self.ebay_client_id = ebay_client_id
        if ebay_client_secret is not None:
            self.ebay_client_secret = ebay_client_secret
        if ebay_runame is not None:
            self.ebay_runame = ebay_runame
        if ebay_access_token is not None:
            self.ebay_access_token = ebay_access_token
        if ebay_refresh_token is not None:
            self.ebay_refresh_token = ebay_refresh_token
        if ebay_environment is not None:
            self.ebay_environment = ebay_environment
        if ebay_site_id is not None:
            self.ebay_site_id = ebay_site_id
        if walmart_client_id is not None:
            self.walmart_client_id = walmart_client_id
        if walmart_client_secret is not None:
            self.walmart_client_secret = walmart_client_secret
        if walmart_environment is not None:
            self.walmart_environment = walmart_environment
        if walmart_channel_type is not None:
            self.walmart_channel_type = walmart_channel_type
        if ecwid_acess_token is not None:
            self.ecwid_acess_token = ecwid_acess_token
        if ecwid_store_id is not None:
            self.ecwid_store_id = ecwid_store_id
        if lightspeed_api_key is not None:
            self.lightspeed_api_key = lightspeed_api_key
        if lightspeed_api_secret is not None:
            self.lightspeed_api_secret = lightspeed_api_secret
        if etsy_keystring is not None:
            self.etsy_keystring = etsy_keystring
        if etsy_shared_secret is not None:
            self.etsy_shared_secret = etsy_shared_secret
        if etsy_access_token is not None:
            self.etsy_access_token = etsy_access_token
        if etsy_token_secret is not None:
            self.etsy_token_secret = etsy_token_secret
        if neto_api_key is not None:
            self.neto_api_key = neto_api_key
        if neto_api_username is not None:
            self.neto_api_username = neto_api_username
        if shopify_api_key is not None:
            self.shopify_api_key = shopify_api_key
        if shopify_api_password is not None:
            self.shopify_api_password = shopify_api_password
        if shopify_shared_secret is not None:
            self.shopify_shared_secret = shopify_shared_secret
        if shopify_access_token is not None:
            self.shopify_access_token = shopify_access_token
        if shopware_api_key is not None:
            self.shopware_api_key = shopware_api_key
        if shopware_api_secret is not None:
            self.shopware_api_secret = shopware_api_secret
        if volusion_login is not None:
            self.volusion_login = volusion_login
        if volusion_password is not None:
            self.volusion_password = volusion_password
        if hybris_client_id is not None:
            self.hybris_client_id = hybris_client_id
        if hybris_client_secret is not None:
            self.hybris_client_secret = hybris_client_secret
        if hybris_username is not None:
            self.hybris_username = hybris_username
        if hybris_password is not None:
            self.hybris_password = hybris_password
        if hybris_websites is not None:
            self.hybris_websites = hybris_websites
        if squarespace_api_key is not None:
            self.squarespace_api_key = squarespace_api_key
        if commercehq_api_key is not None:
            self.commercehq_api_key = commercehq_api_key
        if commercehq_api_password is not None:
            self.commercehq_api_password = commercehq_api_password

    @property
    def cart_id(self):
        """Gets the cart_id of this AccountCartAdd.  # noqa: E501

        Store’s identifier which you can get from cart_list method  # noqa: E501

        :return: The cart_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._cart_id

    @cart_id.setter
    def cart_id(self, cart_id):
        """Sets the cart_id of this AccountCartAdd.

        Store’s identifier which you can get from cart_list method  # noqa: E501

        :param cart_id: The cart_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """
        if cart_id is None:
            raise ValueError("Invalid value for `cart_id`, must not be `None`")  # noqa: E501
        allowed_values = ["3DCartApi", "AceShop", "AmazonSP", "Amazon", "AspDotNetStorefront", "BigcommerceApi", "Creloaded", "CommerceHQ", "Cscart", "Cubecart", "Demandware", "EBay", "Ecwid", "Etsy", "Gambio", "Interspire", "JooCart", "Magento1212", "MijoShop", "Neto", "Opencart14", "LightSpeed", "Oscmax2", "Oscommerce22ms2", "Oxid", "Pinnacle", "Prestashop", "SSPremium", "Shopify", "Squarespace", "Shopware", "ShopwareApi", "Tomatocart", "Ubercart", "Virtuemart", "Volusion", "WPecommerce", "Walmart", "WebAsyst", "Woocommerce", "Xcart", "Xtcommerce", "XtcommerceVeyton", "Zencart137", "Hybris"]  # noqa: E501
        if cart_id not in allowed_values:
            raise ValueError(
                "Invalid value for `cart_id` ({0}), must be one of {1}"  # noqa: E501
                .format(cart_id, allowed_values)
            )

        self._cart_id = cart_id

    @property
    def store_url(self):
        """Gets the store_url of this AccountCartAdd.  # noqa: E501

        A web address of a store that you would like to connect to API2Cart  # noqa: E501

        :return: The store_url of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._store_url

    @store_url.setter
    def store_url(self, store_url):
        """Sets the store_url of this AccountCartAdd.

        A web address of a store that you would like to connect to API2Cart  # noqa: E501

        :param store_url: The store_url of this AccountCartAdd.  # noqa: E501
        :type: str
        """
        if store_url is None:
            raise ValueError("Invalid value for `store_url`, must not be `None`")  # noqa: E501

        self._store_url = store_url

    @property
    def bridge_url(self):
        """Gets the bridge_url of this AccountCartAdd.  # noqa: E501

        This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)  # noqa: E501

        :return: The bridge_url of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._bridge_url

    @bridge_url.setter
    def bridge_url(self, bridge_url):
        """Sets the bridge_url of this AccountCartAdd.

        This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)  # noqa: E501

        :param bridge_url: The bridge_url of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._bridge_url = bridge_url

    @property
    def store_root(self):
        """Gets the store_root of this AccountCartAdd.  # noqa: E501

        Absolute path to the store root directory (used with \"bridge_url\" parameter)  # noqa: E501

        :return: The store_root of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._store_root

    @store_root.setter
    def store_root(self, store_root):
        """Sets the store_root of this AccountCartAdd.

        Absolute path to the store root directory (used with \"bridge_url\" parameter)  # noqa: E501

        :param store_root: The store_root of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._store_root = store_root

    @property
    def store_key(self):
        """Gets the store_key of this AccountCartAdd.  # noqa: E501

        Set this parameter if bridge is already uploaded to store  # noqa: E501

        :return: The store_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._store_key

    @store_key.setter
    def store_key(self, store_key):
        """Sets the store_key of this AccountCartAdd.

        Set this parameter if bridge is already uploaded to store  # noqa: E501

        :param store_key: The store_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._store_key = store_key

    @property
    def validate_version(self):
        """Gets the validate_version of this AccountCartAdd.  # noqa: E501

        Specify if api2cart should validate cart version  # noqa: E501

        :return: The validate_version of this AccountCartAdd.  # noqa: E501
        :rtype: bool
        """
        return self._validate_version

    @validate_version.setter
    def validate_version(self, validate_version):
        """Sets the validate_version of this AccountCartAdd.

        Specify if api2cart should validate cart version  # noqa: E501

        :param validate_version: The validate_version of this AccountCartAdd.  # noqa: E501
        :type: bool
        """

        self._validate_version = validate_version

    @property
    def verify(self):
        """Gets the verify of this AccountCartAdd.  # noqa: E501

        Enables or disables cart's verification  # noqa: E501

        :return: The verify of this AccountCartAdd.  # noqa: E501
        :rtype: bool
        """
        return self._verify

    @verify.setter
    def verify(self, verify):
        """Sets the verify of this AccountCartAdd.

        Enables or disables cart's verification  # noqa: E501

        :param verify: The verify of this AccountCartAdd.  # noqa: E501
        :type: bool
        """

        self._verify = verify

    @property
    def db_tables_prefix(self):
        """Gets the db_tables_prefix of this AccountCartAdd.  # noqa: E501

        DB tables prefix  # noqa: E501

        :return: The db_tables_prefix of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._db_tables_prefix

    @db_tables_prefix.setter
    def db_tables_prefix(self, db_tables_prefix):
        """Sets the db_tables_prefix of this AccountCartAdd.

        DB tables prefix  # noqa: E501

        :param db_tables_prefix: The db_tables_prefix of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._db_tables_prefix = db_tables_prefix

    @property
    def ftp_host(self):
        """Gets the ftp_host of this AccountCartAdd.  # noqa: E501

        FTP connection host  # noqa: E501

        :return: The ftp_host of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ftp_host

    @ftp_host.setter
    def ftp_host(self, ftp_host):
        """Sets the ftp_host of this AccountCartAdd.

        FTP connection host  # noqa: E501

        :param ftp_host: The ftp_host of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ftp_host = ftp_host

    @property
    def ftp_user(self):
        """Gets the ftp_user of this AccountCartAdd.  # noqa: E501

        FTP User  # noqa: E501

        :return: The ftp_user of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ftp_user

    @ftp_user.setter
    def ftp_user(self, ftp_user):
        """Sets the ftp_user of this AccountCartAdd.

        FTP User  # noqa: E501

        :param ftp_user: The ftp_user of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ftp_user = ftp_user

    @property
    def ftp_password(self):
        """Gets the ftp_password of this AccountCartAdd.  # noqa: E501

        FTP Password  # noqa: E501

        :return: The ftp_password of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ftp_password

    @ftp_password.setter
    def ftp_password(self, ftp_password):
        """Sets the ftp_password of this AccountCartAdd.

        FTP Password  # noqa: E501

        :param ftp_password: The ftp_password of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ftp_password = ftp_password

    @property
    def ftp_port(self):
        """Gets the ftp_port of this AccountCartAdd.  # noqa: E501

        FTP Port  # noqa: E501

        :return: The ftp_port of this AccountCartAdd.  # noqa: E501
        :rtype: int
        """
        return self._ftp_port

    @ftp_port.setter
    def ftp_port(self, ftp_port):
        """Sets the ftp_port of this AccountCartAdd.

        FTP Port  # noqa: E501

        :param ftp_port: The ftp_port of this AccountCartAdd.  # noqa: E501
        :type: int
        """

        self._ftp_port = ftp_port

    @property
    def ftp_store_dir(self):
        """Gets the ftp_store_dir of this AccountCartAdd.  # noqa: E501

        FTP Store dir  # noqa: E501

        :return: The ftp_store_dir of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ftp_store_dir

    @ftp_store_dir.setter
    def ftp_store_dir(self, ftp_store_dir):
        """Sets the ftp_store_dir of this AccountCartAdd.

        FTP Store dir  # noqa: E501

        :param ftp_store_dir: The ftp_store_dir of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ftp_store_dir = ftp_store_dir

    @property
    def _3dcartapi_api_key(self):
        """Gets the _3dcartapi_api_key of this AccountCartAdd.  # noqa: E501

        3DCart API Key  # noqa: E501

        :return: The _3dcartapi_api_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self.__3dcartapi_api_key

    @_3dcartapi_api_key.setter
    def _3dcartapi_api_key(self, _3dcartapi_api_key):
        """Sets the _3dcartapi_api_key of this AccountCartAdd.

        3DCart API Key  # noqa: E501

        :param _3dcartapi_api_key: The _3dcartapi_api_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self.__3dcartapi_api_key = _3dcartapi_api_key

    @property
    def amazon_sp_client_id(self):
        """Gets the amazon_sp_client_id of this AccountCartAdd.  # noqa: E501

        Amazon SP API app client id  # noqa: E501

        :return: The amazon_sp_client_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_sp_client_id

    @amazon_sp_client_id.setter
    def amazon_sp_client_id(self, amazon_sp_client_id):
        """Sets the amazon_sp_client_id of this AccountCartAdd.

        Amazon SP API app client id  # noqa: E501

        :param amazon_sp_client_id: The amazon_sp_client_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """
        if amazon_sp_client_id is None:
            raise ValueError("Invalid value for `amazon_sp_client_id`, must not be `None`")  # noqa: E501

        self._amazon_sp_client_id = amazon_sp_client_id

    @property
    def amazon_sp_client_secret(self):
        """Gets the amazon_sp_client_secret of this AccountCartAdd.  # noqa: E501

        Amazon SP API app client secret  # noqa: E501

        :return: The amazon_sp_client_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_sp_client_secret

    @amazon_sp_client_secret.setter
    def amazon_sp_client_secret(self, amazon_sp_client_secret):
        """Sets the amazon_sp_client_secret of this AccountCartAdd.

        Amazon SP API app client secret  # noqa: E501

        :param amazon_sp_client_secret: The amazon_sp_client_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """
        if amazon_sp_client_secret is None:
            raise ValueError("Invalid value for `amazon_sp_client_secret`, must not be `None`")  # noqa: E501

        self._amazon_sp_client_secret = amazon_sp_client_secret

    @property
    def amazon_sp_aws_user_key_id(self):
        """Gets the amazon_sp_aws_user_key_id of this AccountCartAdd.  # noqa: E501

        Amazon AWS user access key ID  # noqa: E501

        :return: The amazon_sp_aws_user_key_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_sp_aws_user_key_id

    @amazon_sp_aws_user_key_id.setter
    def amazon_sp_aws_user_key_id(self, amazon_sp_aws_user_key_id):
        """Sets the amazon_sp_aws_user_key_id of this AccountCartAdd.

        Amazon AWS user access key ID  # noqa: E501

        :param amazon_sp_aws_user_key_id: The amazon_sp_aws_user_key_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """
        if amazon_sp_aws_user_key_id is None:
            raise ValueError("Invalid value for `amazon_sp_aws_user_key_id`, must not be `None`")  # noqa: E501

        self._amazon_sp_aws_user_key_id = amazon_sp_aws_user_key_id

    @property
    def amazon_sp_aws_user_secret(self):
        """Gets the amazon_sp_aws_user_secret of this AccountCartAdd.  # noqa: E501

        Amazon AWS user secret access key  # noqa: E501

        :return: The amazon_sp_aws_user_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_sp_aws_user_secret

    @amazon_sp_aws_user_secret.setter
    def amazon_sp_aws_user_secret(self, amazon_sp_aws_user_secret):
        """Sets the amazon_sp_aws_user_secret of this AccountCartAdd.

        Amazon AWS user secret access key  # noqa: E501

        :param amazon_sp_aws_user_secret: The amazon_sp_aws_user_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """
        if amazon_sp_aws_user_secret is None:
            raise ValueError("Invalid value for `amazon_sp_aws_user_secret`, must not be `None`")  # noqa: E501

        self._amazon_sp_aws_user_secret = amazon_sp_aws_user_secret

    @property
    def amazon_sp_aws_region(self):
        """Gets the amazon_sp_aws_region of this AccountCartAdd.  # noqa: E501

        Amazon AWS Region  # noqa: E501

        :return: The amazon_sp_aws_region of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_sp_aws_region

    @amazon_sp_aws_region.setter
    def amazon_sp_aws_region(self, amazon_sp_aws_region):
        """Sets the amazon_sp_aws_region of this AccountCartAdd.

        Amazon AWS Region  # noqa: E501

        :param amazon_sp_aws_region: The amazon_sp_aws_region of this AccountCartAdd.  # noqa: E501
        :type: str
        """
        if amazon_sp_aws_region is None:
            raise ValueError("Invalid value for `amazon_sp_aws_region`, must not be `None`")  # noqa: E501
        allowed_values = ["eu-west-1", "us-east-1", "us-west-2"]  # noqa: E501
        if amazon_sp_aws_region not in allowed_values:
            raise ValueError(
                "Invalid value for `amazon_sp_aws_region` ({0}), must be one of {1}"  # noqa: E501
                .format(amazon_sp_aws_region, allowed_values)
            )

        self._amazon_sp_aws_region = amazon_sp_aws_region

    @property
    def amazon_sp_aws_role_arn(self):
        """Gets the amazon_sp_aws_role_arn of this AccountCartAdd.  # noqa: E501

        Amazon AWS Role ARN  # noqa: E501

        :return: The amazon_sp_aws_role_arn of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_sp_aws_role_arn

    @amazon_sp_aws_role_arn.setter
    def amazon_sp_aws_role_arn(self, amazon_sp_aws_role_arn):
        """Sets the amazon_sp_aws_role_arn of this AccountCartAdd.

        Amazon AWS Role ARN  # noqa: E501

        :param amazon_sp_aws_role_arn: The amazon_sp_aws_role_arn of this AccountCartAdd.  # noqa: E501
        :type: str
        """
        if amazon_sp_aws_role_arn is None:
            raise ValueError("Invalid value for `amazon_sp_aws_role_arn`, must not be `None`")  # noqa: E501

        self._amazon_sp_aws_role_arn = amazon_sp_aws_role_arn

    @property
    def amazon_sp_refresh_token(self):
        """Gets the amazon_sp_refresh_token of this AccountCartAdd.  # noqa: E501

        Amazon SP API OAuth refresh token  # noqa: E501

        :return: The amazon_sp_refresh_token of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_sp_refresh_token

    @amazon_sp_refresh_token.setter
    def amazon_sp_refresh_token(self, amazon_sp_refresh_token):
        """Sets the amazon_sp_refresh_token of this AccountCartAdd.

        Amazon SP API OAuth refresh token  # noqa: E501

        :param amazon_sp_refresh_token: The amazon_sp_refresh_token of this AccountCartAdd.  # noqa: E501
        :type: str
        """
        if amazon_sp_refresh_token is None:
            raise ValueError("Invalid value for `amazon_sp_refresh_token`, must not be `None`")  # noqa: E501

        self._amazon_sp_refresh_token = amazon_sp_refresh_token

    @property
    def amazon_sp_api_environment(self):
        """Gets the amazon_sp_api_environment of this AccountCartAdd.  # noqa: E501

        Amazon SP API environment  # noqa: E501

        :return: The amazon_sp_api_environment of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_sp_api_environment

    @amazon_sp_api_environment.setter
    def amazon_sp_api_environment(self, amazon_sp_api_environment):
        """Sets the amazon_sp_api_environment of this AccountCartAdd.

        Amazon SP API environment  # noqa: E501

        :param amazon_sp_api_environment: The amazon_sp_api_environment of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._amazon_sp_api_environment = amazon_sp_api_environment

    @property
    def amazon_access_token(self):
        """Gets the amazon_access_token of this AccountCartAdd.  # noqa: E501

        MWS Auth Token. Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :return: The amazon_access_token of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_access_token

    @amazon_access_token.setter
    def amazon_access_token(self, amazon_access_token):
        """Sets the amazon_access_token of this AccountCartAdd.

        MWS Auth Token. Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :param amazon_access_token: The amazon_access_token of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._amazon_access_token = amazon_access_token

    @property
    def amazon_seller_id(self):
        """Gets the amazon_seller_id of this AccountCartAdd.  # noqa: E501

        Amazon Seller ID (Merchant token)  # noqa: E501

        :return: The amazon_seller_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_seller_id

    @amazon_seller_id.setter
    def amazon_seller_id(self, amazon_seller_id):
        """Sets the amazon_seller_id of this AccountCartAdd.

        Amazon Seller ID (Merchant token)  # noqa: E501

        :param amazon_seller_id: The amazon_seller_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._amazon_seller_id = amazon_seller_id

    @property
    def amazon_marketplaces_ids(self):
        """Gets the amazon_marketplaces_ids of this AccountCartAdd.  # noqa: E501

        Amazon Marketplace IDs comma separated string  # noqa: E501

        :return: The amazon_marketplaces_ids of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_marketplaces_ids

    @amazon_marketplaces_ids.setter
    def amazon_marketplaces_ids(self, amazon_marketplaces_ids):
        """Sets the amazon_marketplaces_ids of this AccountCartAdd.

        Amazon Marketplace IDs comma separated string  # noqa: E501

        :param amazon_marketplaces_ids: The amazon_marketplaces_ids of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._amazon_marketplaces_ids = amazon_marketplaces_ids

    @property
    def amazon_secret_key(self):
        """Gets the amazon_secret_key of this AccountCartAdd.  # noqa: E501

        Amazon Secret Key  # noqa: E501

        :return: The amazon_secret_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_secret_key

    @amazon_secret_key.setter
    def amazon_secret_key(self, amazon_secret_key):
        """Sets the amazon_secret_key of this AccountCartAdd.

        Amazon Secret Key  # noqa: E501

        :param amazon_secret_key: The amazon_secret_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._amazon_secret_key = amazon_secret_key

    @property
    def amazon_access_key_id(self):
        """Gets the amazon_access_key_id of this AccountCartAdd.  # noqa: E501

        Amazon Secret Key Id  # noqa: E501

        :return: The amazon_access_key_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._amazon_access_key_id

    @amazon_access_key_id.setter
    def amazon_access_key_id(self, amazon_access_key_id):
        """Sets the amazon_access_key_id of this AccountCartAdd.

        Amazon Secret Key Id  # noqa: E501

        :param amazon_access_key_id: The amazon_access_key_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._amazon_access_key_id = amazon_access_key_id

    @property
    def aspdotnetstorefront_api_user(self):
        """Gets the aspdotnetstorefront_api_user of this AccountCartAdd.  # noqa: E501

        It's a AspDotNetStorefront account for which API is available  # noqa: E501

        :return: The aspdotnetstorefront_api_user of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._aspdotnetstorefront_api_user

    @aspdotnetstorefront_api_user.setter
    def aspdotnetstorefront_api_user(self, aspdotnetstorefront_api_user):
        """Sets the aspdotnetstorefront_api_user of this AccountCartAdd.

        It's a AspDotNetStorefront account for which API is available  # noqa: E501

        :param aspdotnetstorefront_api_user: The aspdotnetstorefront_api_user of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._aspdotnetstorefront_api_user = aspdotnetstorefront_api_user

    @property
    def aspdotnetstorefront_api_pass(self):
        """Gets the aspdotnetstorefront_api_pass of this AccountCartAdd.  # noqa: E501

        AspDotNetStorefront API Password  # noqa: E501

        :return: The aspdotnetstorefront_api_pass of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._aspdotnetstorefront_api_pass

    @aspdotnetstorefront_api_pass.setter
    def aspdotnetstorefront_api_pass(self, aspdotnetstorefront_api_pass):
        """Sets the aspdotnetstorefront_api_pass of this AccountCartAdd.

        AspDotNetStorefront API Password  # noqa: E501

        :param aspdotnetstorefront_api_pass: The aspdotnetstorefront_api_pass of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._aspdotnetstorefront_api_pass = aspdotnetstorefront_api_pass

    @property
    def bigcommerceapi_admin_account(self):
        """Gets the bigcommerceapi_admin_account of this AccountCartAdd.  # noqa: E501

        It's a BigCommerce account for which API is enabled  # noqa: E501

        :return: The bigcommerceapi_admin_account of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._bigcommerceapi_admin_account

    @bigcommerceapi_admin_account.setter
    def bigcommerceapi_admin_account(self, bigcommerceapi_admin_account):
        """Sets the bigcommerceapi_admin_account of this AccountCartAdd.

        It's a BigCommerce account for which API is enabled  # noqa: E501

        :param bigcommerceapi_admin_account: The bigcommerceapi_admin_account of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._bigcommerceapi_admin_account = bigcommerceapi_admin_account

    @property
    def bigcommerceapi_api_path(self):
        """Gets the bigcommerceapi_api_path of this AccountCartAdd.  # noqa: E501

        BigCommerce API URL  # noqa: E501

        :return: The bigcommerceapi_api_path of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._bigcommerceapi_api_path

    @bigcommerceapi_api_path.setter
    def bigcommerceapi_api_path(self, bigcommerceapi_api_path):
        """Sets the bigcommerceapi_api_path of this AccountCartAdd.

        BigCommerce API URL  # noqa: E501

        :param bigcommerceapi_api_path: The bigcommerceapi_api_path of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._bigcommerceapi_api_path = bigcommerceapi_api_path

    @property
    def bigcommerceapi_api_key(self):
        """Gets the bigcommerceapi_api_key of this AccountCartAdd.  # noqa: E501

        Bigcommerce API Key  # noqa: E501

        :return: The bigcommerceapi_api_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._bigcommerceapi_api_key

    @bigcommerceapi_api_key.setter
    def bigcommerceapi_api_key(self, bigcommerceapi_api_key):
        """Sets the bigcommerceapi_api_key of this AccountCartAdd.

        Bigcommerce API Key  # noqa: E501

        :param bigcommerceapi_api_key: The bigcommerceapi_api_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._bigcommerceapi_api_key = bigcommerceapi_api_key

    @property
    def bigcommerceapi_client_id(self):
        """Gets the bigcommerceapi_client_id of this AccountCartAdd.  # noqa: E501

        Client ID of the requesting app  # noqa: E501

        :return: The bigcommerceapi_client_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._bigcommerceapi_client_id

    @bigcommerceapi_client_id.setter
    def bigcommerceapi_client_id(self, bigcommerceapi_client_id):
        """Sets the bigcommerceapi_client_id of this AccountCartAdd.

        Client ID of the requesting app  # noqa: E501

        :param bigcommerceapi_client_id: The bigcommerceapi_client_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._bigcommerceapi_client_id = bigcommerceapi_client_id

    @property
    def bigcommerceapi_access_token(self):
        """Gets the bigcommerceapi_access_token of this AccountCartAdd.  # noqa: E501

        Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :return: The bigcommerceapi_access_token of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._bigcommerceapi_access_token

    @bigcommerceapi_access_token.setter
    def bigcommerceapi_access_token(self, bigcommerceapi_access_token):
        """Sets the bigcommerceapi_access_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :param bigcommerceapi_access_token: The bigcommerceapi_access_token of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._bigcommerceapi_access_token = bigcommerceapi_access_token

    @property
    def bigcommerceapi_context(self):
        """Gets the bigcommerceapi_context of this AccountCartAdd.  # noqa: E501

        API Path section unique to the store  # noqa: E501

        :return: The bigcommerceapi_context of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._bigcommerceapi_context

    @bigcommerceapi_context.setter
    def bigcommerceapi_context(self, bigcommerceapi_context):
        """Sets the bigcommerceapi_context of this AccountCartAdd.

        API Path section unique to the store  # noqa: E501

        :param bigcommerceapi_context: The bigcommerceapi_context of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._bigcommerceapi_context = bigcommerceapi_context

    @property
    def demandware_client_id(self):
        """Gets the demandware_client_id of this AccountCartAdd.  # noqa: E501

        Demandware client id  # noqa: E501

        :return: The demandware_client_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._demandware_client_id

    @demandware_client_id.setter
    def demandware_client_id(self, demandware_client_id):
        """Sets the demandware_client_id of this AccountCartAdd.

        Demandware client id  # noqa: E501

        :param demandware_client_id: The demandware_client_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._demandware_client_id = demandware_client_id

    @property
    def demandware_api_password(self):
        """Gets the demandware_api_password of this AccountCartAdd.  # noqa: E501

        Demandware api password  # noqa: E501

        :return: The demandware_api_password of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._demandware_api_password

    @demandware_api_password.setter
    def demandware_api_password(self, demandware_api_password):
        """Sets the demandware_api_password of this AccountCartAdd.

        Demandware api password  # noqa: E501

        :param demandware_api_password: The demandware_api_password of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._demandware_api_password = demandware_api_password

    @property
    def demandware_user_name(self):
        """Gets the demandware_user_name of this AccountCartAdd.  # noqa: E501

        Demandware user name  # noqa: E501

        :return: The demandware_user_name of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._demandware_user_name

    @demandware_user_name.setter
    def demandware_user_name(self, demandware_user_name):
        """Sets the demandware_user_name of this AccountCartAdd.

        Demandware user name  # noqa: E501

        :param demandware_user_name: The demandware_user_name of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._demandware_user_name = demandware_user_name

    @property
    def demandware_user_password(self):
        """Gets the demandware_user_password of this AccountCartAdd.  # noqa: E501

        Demandware user password  # noqa: E501

        :return: The demandware_user_password of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._demandware_user_password

    @demandware_user_password.setter
    def demandware_user_password(self, demandware_user_password):
        """Sets the demandware_user_password of this AccountCartAdd.

        Demandware user password  # noqa: E501

        :param demandware_user_password: The demandware_user_password of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._demandware_user_password = demandware_user_password

    @property
    def demandware_env_type(self):
        """Gets the demandware_env_type of this AccountCartAdd.  # noqa: E501

        Demandware environment  # noqa: E501

        :return: The demandware_env_type of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._demandware_env_type

    @demandware_env_type.setter
    def demandware_env_type(self, demandware_env_type):
        """Sets the demandware_env_type of this AccountCartAdd.

        Demandware environment  # noqa: E501

        :param demandware_env_type: The demandware_env_type of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._demandware_env_type = demandware_env_type

    @property
    def ebay_client_id(self):
        """Gets the ebay_client_id of this AccountCartAdd.  # noqa: E501

        Application ID (AppID).  # noqa: E501

        :return: The ebay_client_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ebay_client_id

    @ebay_client_id.setter
    def ebay_client_id(self, ebay_client_id):
        """Sets the ebay_client_id of this AccountCartAdd.

        Application ID (AppID).  # noqa: E501

        :param ebay_client_id: The ebay_client_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ebay_client_id = ebay_client_id

    @property
    def ebay_client_secret(self):
        """Gets the ebay_client_secret of this AccountCartAdd.  # noqa: E501

        Shared Secret from eBay application  # noqa: E501

        :return: The ebay_client_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ebay_client_secret

    @ebay_client_secret.setter
    def ebay_client_secret(self, ebay_client_secret):
        """Sets the ebay_client_secret of this AccountCartAdd.

        Shared Secret from eBay application  # noqa: E501

        :param ebay_client_secret: The ebay_client_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ebay_client_secret = ebay_client_secret

    @property
    def ebay_runame(self):
        """Gets the ebay_runame of this AccountCartAdd.  # noqa: E501

        The RuName value that eBay assigns to your application.  # noqa: E501

        :return: The ebay_runame of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ebay_runame

    @ebay_runame.setter
    def ebay_runame(self, ebay_runame):
        """Sets the ebay_runame of this AccountCartAdd.

        The RuName value that eBay assigns to your application.  # noqa: E501

        :param ebay_runame: The ebay_runame of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ebay_runame = ebay_runame

    @property
    def ebay_access_token(self):
        """Gets the ebay_access_token of this AccountCartAdd.  # noqa: E501

        Used to authenticate API requests.  # noqa: E501

        :return: The ebay_access_token of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ebay_access_token

    @ebay_access_token.setter
    def ebay_access_token(self, ebay_access_token):
        """Sets the ebay_access_token of this AccountCartAdd.

        Used to authenticate API requests.  # noqa: E501

        :param ebay_access_token: The ebay_access_token of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ebay_access_token = ebay_access_token

    @property
    def ebay_refresh_token(self):
        """Gets the ebay_refresh_token of this AccountCartAdd.  # noqa: E501

        Used to renew the access token.  # noqa: E501

        :return: The ebay_refresh_token of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ebay_refresh_token

    @ebay_refresh_token.setter
    def ebay_refresh_token(self, ebay_refresh_token):
        """Sets the ebay_refresh_token of this AccountCartAdd.

        Used to renew the access token.  # noqa: E501

        :param ebay_refresh_token: The ebay_refresh_token of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ebay_refresh_token = ebay_refresh_token

    @property
    def ebay_environment(self):
        """Gets the ebay_environment of this AccountCartAdd.  # noqa: E501

        eBay environment  # noqa: E501

        :return: The ebay_environment of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ebay_environment

    @ebay_environment.setter
    def ebay_environment(self, ebay_environment):
        """Sets the ebay_environment of this AccountCartAdd.

        eBay environment  # noqa: E501

        :param ebay_environment: The ebay_environment of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ebay_environment = ebay_environment

    @property
    def ebay_site_id(self):
        """Gets the ebay_site_id of this AccountCartAdd.  # noqa: E501

        eBay global ID  # noqa: E501

        :return: The ebay_site_id of this AccountCartAdd.  # noqa: E501
        :rtype: int
        """
        return self._ebay_site_id

    @ebay_site_id.setter
    def ebay_site_id(self, ebay_site_id):
        """Sets the ebay_site_id of this AccountCartAdd.

        eBay global ID  # noqa: E501

        :param ebay_site_id: The ebay_site_id of this AccountCartAdd.  # noqa: E501
        :type: int
        """

        self._ebay_site_id = ebay_site_id

    @property
    def walmart_client_id(self):
        """Gets the walmart_client_id of this AccountCartAdd.  # noqa: E501

        Walmart client ID  # noqa: E501

        :return: The walmart_client_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._walmart_client_id

    @walmart_client_id.setter
    def walmart_client_id(self, walmart_client_id):
        """Sets the walmart_client_id of this AccountCartAdd.

        Walmart client ID  # noqa: E501

        :param walmart_client_id: The walmart_client_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._walmart_client_id = walmart_client_id

    @property
    def walmart_client_secret(self):
        """Gets the walmart_client_secret of this AccountCartAdd.  # noqa: E501

        Walmart client secret  # noqa: E501

        :return: The walmart_client_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._walmart_client_secret

    @walmart_client_secret.setter
    def walmart_client_secret(self, walmart_client_secret):
        """Sets the walmart_client_secret of this AccountCartAdd.

        Walmart client secret  # noqa: E501

        :param walmart_client_secret: The walmart_client_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._walmart_client_secret = walmart_client_secret

    @property
    def walmart_environment(self):
        """Gets the walmart_environment of this AccountCartAdd.  # noqa: E501

        Walmart environment  # noqa: E501

        :return: The walmart_environment of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._walmart_environment

    @walmart_environment.setter
    def walmart_environment(self, walmart_environment):
        """Sets the walmart_environment of this AccountCartAdd.

        Walmart environment  # noqa: E501

        :param walmart_environment: The walmart_environment of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._walmart_environment = walmart_environment

    @property
    def walmart_channel_type(self):
        """Gets the walmart_channel_type of this AccountCartAdd.  # noqa: E501

        Walmart WM_CONSUMER.CHANNEL.TYPE header  # noqa: E501

        :return: The walmart_channel_type of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._walmart_channel_type

    @walmart_channel_type.setter
    def walmart_channel_type(self, walmart_channel_type):
        """Sets the walmart_channel_type of this AccountCartAdd.

        Walmart WM_CONSUMER.CHANNEL.TYPE header  # noqa: E501

        :param walmart_channel_type: The walmart_channel_type of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._walmart_channel_type = walmart_channel_type

    @property
    def ecwid_acess_token(self):
        """Gets the ecwid_acess_token of this AccountCartAdd.  # noqa: E501

        Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :return: The ecwid_acess_token of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ecwid_acess_token

    @ecwid_acess_token.setter
    def ecwid_acess_token(self, ecwid_acess_token):
        """Sets the ecwid_acess_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :param ecwid_acess_token: The ecwid_acess_token of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ecwid_acess_token = ecwid_acess_token

    @property
    def ecwid_store_id(self):
        """Gets the ecwid_store_id of this AccountCartAdd.  # noqa: E501

        Store Id  # noqa: E501

        :return: The ecwid_store_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._ecwid_store_id

    @ecwid_store_id.setter
    def ecwid_store_id(self, ecwid_store_id):
        """Sets the ecwid_store_id of this AccountCartAdd.

        Store Id  # noqa: E501

        :param ecwid_store_id: The ecwid_store_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._ecwid_store_id = ecwid_store_id

    @property
    def lightspeed_api_key(self):
        """Gets the lightspeed_api_key of this AccountCartAdd.  # noqa: E501

        LightSpeed api key  # noqa: E501

        :return: The lightspeed_api_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._lightspeed_api_key

    @lightspeed_api_key.setter
    def lightspeed_api_key(self, lightspeed_api_key):
        """Sets the lightspeed_api_key of this AccountCartAdd.

        LightSpeed api key  # noqa: E501

        :param lightspeed_api_key: The lightspeed_api_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._lightspeed_api_key = lightspeed_api_key

    @property
    def lightspeed_api_secret(self):
        """Gets the lightspeed_api_secret of this AccountCartAdd.  # noqa: E501

        LightSpeed api secret  # noqa: E501

        :return: The lightspeed_api_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._lightspeed_api_secret

    @lightspeed_api_secret.setter
    def lightspeed_api_secret(self, lightspeed_api_secret):
        """Sets the lightspeed_api_secret of this AccountCartAdd.

        LightSpeed api secret  # noqa: E501

        :param lightspeed_api_secret: The lightspeed_api_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._lightspeed_api_secret = lightspeed_api_secret

    @property
    def etsy_keystring(self):
        """Gets the etsy_keystring of this AccountCartAdd.  # noqa: E501

        Etsy keystring  # noqa: E501

        :return: The etsy_keystring of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._etsy_keystring

    @etsy_keystring.setter
    def etsy_keystring(self, etsy_keystring):
        """Sets the etsy_keystring of this AccountCartAdd.

        Etsy keystring  # noqa: E501

        :param etsy_keystring: The etsy_keystring of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._etsy_keystring = etsy_keystring

    @property
    def etsy_shared_secret(self):
        """Gets the etsy_shared_secret of this AccountCartAdd.  # noqa: E501

        Etsy shared secret  # noqa: E501

        :return: The etsy_shared_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._etsy_shared_secret

    @etsy_shared_secret.setter
    def etsy_shared_secret(self, etsy_shared_secret):
        """Sets the etsy_shared_secret of this AccountCartAdd.

        Etsy shared secret  # noqa: E501

        :param etsy_shared_secret: The etsy_shared_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._etsy_shared_secret = etsy_shared_secret

    @property
    def etsy_access_token(self):
        """Gets the etsy_access_token of this AccountCartAdd.  # noqa: E501

        Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :return: The etsy_access_token of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._etsy_access_token

    @etsy_access_token.setter
    def etsy_access_token(self, etsy_access_token):
        """Sets the etsy_access_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :param etsy_access_token: The etsy_access_token of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._etsy_access_token = etsy_access_token

    @property
    def etsy_token_secret(self):
        """Gets the etsy_token_secret of this AccountCartAdd.  # noqa: E501

        Secret token authorizing the app to access resources on behalf of a user  # noqa: E501

        :return: The etsy_token_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._etsy_token_secret

    @etsy_token_secret.setter
    def etsy_token_secret(self, etsy_token_secret):
        """Sets the etsy_token_secret of this AccountCartAdd.

        Secret token authorizing the app to access resources on behalf of a user  # noqa: E501

        :param etsy_token_secret: The etsy_token_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._etsy_token_secret = etsy_token_secret

    @property
    def neto_api_key(self):
        """Gets the neto_api_key of this AccountCartAdd.  # noqa: E501

        Neto API Key  # noqa: E501

        :return: The neto_api_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._neto_api_key

    @neto_api_key.setter
    def neto_api_key(self, neto_api_key):
        """Sets the neto_api_key of this AccountCartAdd.

        Neto API Key  # noqa: E501

        :param neto_api_key: The neto_api_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._neto_api_key = neto_api_key

    @property
    def neto_api_username(self):
        """Gets the neto_api_username of this AccountCartAdd.  # noqa: E501

        Neto User Name  # noqa: E501

        :return: The neto_api_username of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._neto_api_username

    @neto_api_username.setter
    def neto_api_username(self, neto_api_username):
        """Sets the neto_api_username of this AccountCartAdd.

        Neto User Name  # noqa: E501

        :param neto_api_username: The neto_api_username of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._neto_api_username = neto_api_username

    @property
    def shopify_api_key(self):
        """Gets the shopify_api_key of this AccountCartAdd.  # noqa: E501

        Shopify API Key  # noqa: E501

        :return: The shopify_api_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._shopify_api_key

    @shopify_api_key.setter
    def shopify_api_key(self, shopify_api_key):
        """Sets the shopify_api_key of this AccountCartAdd.

        Shopify API Key  # noqa: E501

        :param shopify_api_key: The shopify_api_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._shopify_api_key = shopify_api_key

    @property
    def shopify_api_password(self):
        """Gets the shopify_api_password of this AccountCartAdd.  # noqa: E501

        Shopify API Password  # noqa: E501

        :return: The shopify_api_password of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._shopify_api_password

    @shopify_api_password.setter
    def shopify_api_password(self, shopify_api_password):
        """Sets the shopify_api_password of this AccountCartAdd.

        Shopify API Password  # noqa: E501

        :param shopify_api_password: The shopify_api_password of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._shopify_api_password = shopify_api_password

    @property
    def shopify_shared_secret(self):
        """Gets the shopify_shared_secret of this AccountCartAdd.  # noqa: E501

        Shared secret  # noqa: E501

        :return: The shopify_shared_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._shopify_shared_secret

    @shopify_shared_secret.setter
    def shopify_shared_secret(self, shopify_shared_secret):
        """Sets the shopify_shared_secret of this AccountCartAdd.

        Shared secret  # noqa: E501

        :param shopify_shared_secret: The shopify_shared_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._shopify_shared_secret = shopify_shared_secret

    @property
    def shopify_access_token(self):
        """Gets the shopify_access_token of this AccountCartAdd.  # noqa: E501

        Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :return: The shopify_access_token of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._shopify_access_token

    @shopify_access_token.setter
    def shopify_access_token(self, shopify_access_token):
        """Sets the shopify_access_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user  # noqa: E501

        :param shopify_access_token: The shopify_access_token of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._shopify_access_token = shopify_access_token

    @property
    def shopware_api_key(self):
        """Gets the shopware_api_key of this AccountCartAdd.  # noqa: E501

        Shopware api key  # noqa: E501

        :return: The shopware_api_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._shopware_api_key

    @shopware_api_key.setter
    def shopware_api_key(self, shopware_api_key):
        """Sets the shopware_api_key of this AccountCartAdd.

        Shopware api key  # noqa: E501

        :param shopware_api_key: The shopware_api_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._shopware_api_key = shopware_api_key

    @property
    def shopware_api_secret(self):
        """Gets the shopware_api_secret of this AccountCartAdd.  # noqa: E501

        Shopware client secret access key  # noqa: E501

        :return: The shopware_api_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._shopware_api_secret

    @shopware_api_secret.setter
    def shopware_api_secret(self, shopware_api_secret):
        """Sets the shopware_api_secret of this AccountCartAdd.

        Shopware client secret access key  # noqa: E501

        :param shopware_api_secret: The shopware_api_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._shopware_api_secret = shopware_api_secret

    @property
    def volusion_login(self):
        """Gets the volusion_login of this AccountCartAdd.  # noqa: E501

        It's a Volusion account for which API is enabled  # noqa: E501

        :return: The volusion_login of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._volusion_login

    @volusion_login.setter
    def volusion_login(self, volusion_login):
        """Sets the volusion_login of this AccountCartAdd.

        It's a Volusion account for which API is enabled  # noqa: E501

        :param volusion_login: The volusion_login of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._volusion_login = volusion_login

    @property
    def volusion_password(self):
        """Gets the volusion_password of this AccountCartAdd.  # noqa: E501

        Volusion API Password  # noqa: E501

        :return: The volusion_password of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._volusion_password

    @volusion_password.setter
    def volusion_password(self, volusion_password):
        """Sets the volusion_password of this AccountCartAdd.

        Volusion API Password  # noqa: E501

        :param volusion_password: The volusion_password of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._volusion_password = volusion_password

    @property
    def hybris_client_id(self):
        """Gets the hybris_client_id of this AccountCartAdd.  # noqa: E501

        Omni Commerce Connector Client ID  # noqa: E501

        :return: The hybris_client_id of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._hybris_client_id

    @hybris_client_id.setter
    def hybris_client_id(self, hybris_client_id):
        """Sets the hybris_client_id of this AccountCartAdd.

        Omni Commerce Connector Client ID  # noqa: E501

        :param hybris_client_id: The hybris_client_id of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._hybris_client_id = hybris_client_id

    @property
    def hybris_client_secret(self):
        """Gets the hybris_client_secret of this AccountCartAdd.  # noqa: E501

        Omni Commerce Connector Client Secret  # noqa: E501

        :return: The hybris_client_secret of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._hybris_client_secret

    @hybris_client_secret.setter
    def hybris_client_secret(self, hybris_client_secret):
        """Sets the hybris_client_secret of this AccountCartAdd.

        Omni Commerce Connector Client Secret  # noqa: E501

        :param hybris_client_secret: The hybris_client_secret of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._hybris_client_secret = hybris_client_secret

    @property
    def hybris_username(self):
        """Gets the hybris_username of this AccountCartAdd.  # noqa: E501

        User Name  # noqa: E501

        :return: The hybris_username of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._hybris_username

    @hybris_username.setter
    def hybris_username(self, hybris_username):
        """Sets the hybris_username of this AccountCartAdd.

        User Name  # noqa: E501

        :param hybris_username: The hybris_username of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._hybris_username = hybris_username

    @property
    def hybris_password(self):
        """Gets the hybris_password of this AccountCartAdd.  # noqa: E501

        User password  # noqa: E501

        :return: The hybris_password of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._hybris_password

    @hybris_password.setter
    def hybris_password(self, hybris_password):
        """Sets the hybris_password of this AccountCartAdd.

        User password  # noqa: E501

        :param hybris_password: The hybris_password of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._hybris_password = hybris_password

    @property
    def hybris_websites(self):
        """Gets the hybris_websites of this AccountCartAdd.  # noqa: E501

        Websites to stores mapping data  # noqa: E501

        :return: The hybris_websites of this AccountCartAdd.  # noqa: E501
        :rtype: list[AccountCartAddHybrisWebsites]
        """
        return self._hybris_websites

    @hybris_websites.setter
    def hybris_websites(self, hybris_websites):
        """Sets the hybris_websites of this AccountCartAdd.

        Websites to stores mapping data  # noqa: E501

        :param hybris_websites: The hybris_websites of this AccountCartAdd.  # noqa: E501
        :type: list[AccountCartAddHybrisWebsites]
        """

        self._hybris_websites = hybris_websites

    @property
    def squarespace_api_key(self):
        """Gets the squarespace_api_key of this AccountCartAdd.  # noqa: E501

        Squarespace API Key  # noqa: E501

        :return: The squarespace_api_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._squarespace_api_key

    @squarespace_api_key.setter
    def squarespace_api_key(self, squarespace_api_key):
        """Sets the squarespace_api_key of this AccountCartAdd.

        Squarespace API Key  # noqa: E501

        :param squarespace_api_key: The squarespace_api_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._squarespace_api_key = squarespace_api_key

    @property
    def commercehq_api_key(self):
        """Gets the commercehq_api_key of this AccountCartAdd.  # noqa: E501

        CommerceHQ api key  # noqa: E501

        :return: The commercehq_api_key of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._commercehq_api_key

    @commercehq_api_key.setter
    def commercehq_api_key(self, commercehq_api_key):
        """Sets the commercehq_api_key of this AccountCartAdd.

        CommerceHQ api key  # noqa: E501

        :param commercehq_api_key: The commercehq_api_key of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._commercehq_api_key = commercehq_api_key

    @property
    def commercehq_api_password(self):
        """Gets the commercehq_api_password of this AccountCartAdd.  # noqa: E501

        CommerceHQ api password  # noqa: E501

        :return: The commercehq_api_password of this AccountCartAdd.  # noqa: E501
        :rtype: str
        """
        return self._commercehq_api_password

    @commercehq_api_password.setter
    def commercehq_api_password(self, commercehq_api_password):
        """Sets the commercehq_api_password of this AccountCartAdd.

        CommerceHQ api password  # noqa: E501

        :param commercehq_api_password: The commercehq_api_password of this AccountCartAdd.  # noqa: E501
        :type: str
        """

        self._commercehq_api_password = commercehq_api_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCartAdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCartAdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
