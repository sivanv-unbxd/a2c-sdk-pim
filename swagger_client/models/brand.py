# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Brand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'created_time': 'str',
        'modified_time': 'str',
        'full_description': 'str',
        'short_description': 'str',
        'stores_ids': 'list[str]',
        'active': 'bool',
        'url': 'str',
        'meta_title': 'str',
        'meta_keywords': 'str',
        'meta_description': 'str',
        'images': 'list[Image]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'created_time': 'created_time',
        'modified_time': 'modified_time',
        'full_description': 'full_description',
        'short_description': 'short_description',
        'stores_ids': 'stores_ids',
        'active': 'active',
        'url': 'url',
        'meta_title': 'meta_title',
        'meta_keywords': 'meta_keywords',
        'meta_description': 'meta_description',
        'images': 'images',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, name=None, created_time=None, modified_time=None, full_description=None, short_description=None, stores_ids=None, active=None, url=None, meta_title=None, meta_keywords=None, meta_description=None, images=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """Brand - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._created_time = None
        self._modified_time = None
        self._full_description = None
        self._short_description = None
        self._stores_ids = None
        self._active = None
        self._url = None
        self._meta_title = None
        self._meta_keywords = None
        self._meta_description = None
        self._images = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if created_time is not None:
            self.created_time = created_time
        if modified_time is not None:
            self.modified_time = modified_time
        if full_description is not None:
            self.full_description = full_description
        if short_description is not None:
            self.short_description = short_description
        if stores_ids is not None:
            self.stores_ids = stores_ids
        if active is not None:
            self.active = active
        if url is not None:
            self.url = url
        if meta_title is not None:
            self.meta_title = meta_title
        if meta_keywords is not None:
            self.meta_keywords = meta_keywords
        if meta_description is not None:
            self.meta_description = meta_description
        if images is not None:
            self.images = images
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Brand.  # noqa: E501


        :return: The id of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Brand.


        :param id: The id of this Brand.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Brand.  # noqa: E501


        :return: The name of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Brand.


        :param name: The name of this Brand.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_time(self):
        """Gets the created_time of this Brand.  # noqa: E501


        :return: The created_time of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Brand.


        :param created_time: The created_time of this Brand.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def modified_time(self):
        """Gets the modified_time of this Brand.  # noqa: E501


        :return: The modified_time of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Brand.


        :param modified_time: The modified_time of this Brand.  # noqa: E501
        :type: str
        """

        self._modified_time = modified_time

    @property
    def full_description(self):
        """Gets the full_description of this Brand.  # noqa: E501


        :return: The full_description of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._full_description

    @full_description.setter
    def full_description(self, full_description):
        """Sets the full_description of this Brand.


        :param full_description: The full_description of this Brand.  # noqa: E501
        :type: str
        """

        self._full_description = full_description

    @property
    def short_description(self):
        """Gets the short_description of this Brand.  # noqa: E501


        :return: The short_description of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Brand.


        :param short_description: The short_description of this Brand.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def stores_ids(self):
        """Gets the stores_ids of this Brand.  # noqa: E501


        :return: The stores_ids of this Brand.  # noqa: E501
        :rtype: list[str]
        """
        return self._stores_ids

    @stores_ids.setter
    def stores_ids(self, stores_ids):
        """Sets the stores_ids of this Brand.


        :param stores_ids: The stores_ids of this Brand.  # noqa: E501
        :type: list[str]
        """

        self._stores_ids = stores_ids

    @property
    def active(self):
        """Gets the active of this Brand.  # noqa: E501


        :return: The active of this Brand.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Brand.


        :param active: The active of this Brand.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def url(self):
        """Gets the url of this Brand.  # noqa: E501


        :return: The url of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Brand.


        :param url: The url of this Brand.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def meta_title(self):
        """Gets the meta_title of this Brand.  # noqa: E501


        :return: The meta_title of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this Brand.


        :param meta_title: The meta_title of this Brand.  # noqa: E501
        :type: str
        """

        self._meta_title = meta_title

    @property
    def meta_keywords(self):
        """Gets the meta_keywords of this Brand.  # noqa: E501


        :return: The meta_keywords of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """Sets the meta_keywords of this Brand.


        :param meta_keywords: The meta_keywords of this Brand.  # noqa: E501
        :type: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_description(self):
        """Gets the meta_description of this Brand.  # noqa: E501


        :return: The meta_description of this Brand.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this Brand.


        :param meta_description: The meta_description of this Brand.  # noqa: E501
        :type: str
        """

        self._meta_description = meta_description

    @property
    def images(self):
        """Gets the images of this Brand.  # noqa: E501


        :return: The images of this Brand.  # noqa: E501
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Brand.


        :param images: The images of this Brand.  # noqa: E501
        :type: list[Image]
        """

        self._images = images

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Brand.  # noqa: E501


        :return: The additional_fields of this Brand.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Brand.


        :param additional_fields: The additional_fields of this Brand.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Brand.  # noqa: E501


        :return: The custom_fields of this Brand.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Brand.


        :param custom_fields: The custom_fields of this Brand.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Brand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Brand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
