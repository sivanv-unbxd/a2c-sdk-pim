# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductAdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'model': 'str',
        'sku': 'str',
        'description': 'str',
        'price': 'float',
        'old_price': 'float',
        'special_price': 'float',
        'cost_price': 'float',
        'sprice_create': 'str',
        'sprice_modified': 'str',
        'sprice_expire': 'str',
        'tier_prices': 'list[ProductAddTierPrices]',
        'group_prices': 'list[ProductAddGroupPrices]',
        'available_for_view': 'bool',
        'available_for_sale': 'bool',
        'weight': 'float',
        'weight_unit': 'str',
        'short_description': 'str',
        'warehouse_id': 'str',
        'backorder_status': 'str',
        'quantity': 'float',
        'downloadable': 'bool',
        'wholesale_price': 'float',
        'created_at': 'str',
        'manufacturer': 'str',
        'categories_ids': 'str',
        'tax_class_id': 'int',
        'type': 'str',
        'meta_title': 'str',
        'meta_keywords': 'str',
        'meta_description': 'str',
        'url': 'str',
        'lang_id': 'str',
        'stores_ids': 'str',
        'viewed_count': 'int',
        'ordered_count': 'int',
        'attribute_set_name': 'str',
        'attribute_name': 'str',
        'shipping_template_id': 'int',
        'condition': 'str',
        'listing_duration': 'str',
        'listing_type': 'str',
        'payment_methods': 'list[str]',
        'return_accepted': 'bool',
        'shipping_details': 'list[ProductAddShippingDetails]',
        'paypal_email': 'str',
        'seller_profiles': 'ProductAddSellerProfiles',
        'package_details': 'list[str]',
        'best_offer': 'list[str]',
        'sales_tax': 'list[str]',
        'barcode': 'str',
        'upc': 'str',
        'ean': 'str',
        'isbn': 'str',
        'specifics': 'list[str]',
        'image_url': 'str',
        'image_name': 'str',
        'avail_from': 'str',
        'tags': 'str',
        'clear_cache': 'bool',
        'gtin': 'str',
        'taxable': 'bool',
        'visible': 'str',
        'status': 'str',
        'product_class': 'str'
    }

    attribute_map = {
        'name': 'name',
        'model': 'model',
        'sku': 'sku',
        'description': 'description',
        'price': 'price',
        'old_price': 'old_price',
        'special_price': 'special_price',
        'cost_price': 'cost_price',
        'sprice_create': 'sprice_create',
        'sprice_modified': 'sprice_modified',
        'sprice_expire': 'sprice_expire',
        'tier_prices': 'tier_prices',
        'group_prices': 'group_prices',
        'available_for_view': 'available_for_view',
        'available_for_sale': 'available_for_sale',
        'weight': 'weight',
        'weight_unit': 'weight_unit',
        'short_description': 'short_description',
        'warehouse_id': 'warehouse_id',
        'backorder_status': 'backorder_status',
        'quantity': 'quantity',
        'downloadable': 'downloadable',
        'wholesale_price': 'wholesale_price',
        'created_at': 'created_at',
        'manufacturer': 'manufacturer',
        'categories_ids': 'categories_ids',
        'tax_class_id': 'tax_class_id',
        'type': 'type',
        'meta_title': 'meta_title',
        'meta_keywords': 'meta_keywords',
        'meta_description': 'meta_description',
        'url': 'url',
        'lang_id': 'lang_id',
        'stores_ids': 'stores_ids',
        'viewed_count': 'viewed_count',
        'ordered_count': 'ordered_count',
        'attribute_set_name': 'attribute_set_name',
        'attribute_name': 'attribute_name',
        'shipping_template_id': 'shipping_template_id',
        'condition': 'condition',
        'listing_duration': 'listing_duration',
        'listing_type': 'listing_type',
        'payment_methods': 'payment_methods',
        'return_accepted': 'return_accepted',
        'shipping_details': 'shipping_details',
        'paypal_email': 'paypal_email',
        'seller_profiles': 'seller_profiles',
        'package_details': 'package_details',
        'best_offer': 'best_offer',
        'sales_tax': 'sales_tax',
        'barcode': 'barcode',
        'upc': 'upc',
        'ean': 'ean',
        'isbn': 'isbn',
        'specifics': 'specifics',
        'image_url': 'image_url',
        'image_name': 'image_name',
        'avail_from': 'avail_from',
        'tags': 'tags',
        'clear_cache': 'clear_cache',
        'gtin': 'gtin',
        'taxable': 'taxable',
        'visible': 'visible',
        'status': 'status',
        'product_class': 'product_class'
    }

    def __init__(self, name=None, model=None, sku=None, description=None, price=None, old_price=None, special_price=None, cost_price=None, sprice_create=None, sprice_modified=None, sprice_expire=None, tier_prices=None, group_prices=None, available_for_view=True, available_for_sale=True, weight=None, weight_unit=None, short_description=None, warehouse_id=None, backorder_status=None, quantity=None, downloadable=False, wholesale_price=None, created_at=None, manufacturer=None, categories_ids=None, tax_class_id=None, type='simple', meta_title=None, meta_keywords=None, meta_description=None, url=None, lang_id=None, stores_ids='0', viewed_count=None, ordered_count=None, attribute_set_name='Default', attribute_name=None, shipping_template_id=None, condition=None, listing_duration=None, listing_type='FixedPrice', payment_methods=None, return_accepted=None, shipping_details=None, paypal_email=None, seller_profiles=None, package_details=None, best_offer=None, sales_tax=None, barcode=None, upc=None, ean=None, isbn=None, specifics=None, image_url=None, image_name=None, avail_from=None, tags=None, clear_cache=True, gtin=None, taxable=True, visible=None, status=None, product_class=None):  # noqa: E501
        """ProductAdd - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._model = None
        self._sku = None
        self._description = None
        self._price = None
        self._old_price = None
        self._special_price = None
        self._cost_price = None
        self._sprice_create = None
        self._sprice_modified = None
        self._sprice_expire = None
        self._tier_prices = None
        self._group_prices = None
        self._available_for_view = None
        self._available_for_sale = None
        self._weight = None
        self._weight_unit = None
        self._short_description = None
        self._warehouse_id = None
        self._backorder_status = None
        self._quantity = None
        self._downloadable = None
        self._wholesale_price = None
        self._created_at = None
        self._manufacturer = None
        self._categories_ids = None
        self._tax_class_id = None
        self._type = None
        self._meta_title = None
        self._meta_keywords = None
        self._meta_description = None
        self._url = None
        self._lang_id = None
        self._stores_ids = None
        self._viewed_count = None
        self._ordered_count = None
        self._attribute_set_name = None
        self._attribute_name = None
        self._shipping_template_id = None
        self._condition = None
        self._listing_duration = None
        self._listing_type = None
        self._payment_methods = None
        self._return_accepted = None
        self._shipping_details = None
        self._paypal_email = None
        self._seller_profiles = None
        self._package_details = None
        self._best_offer = None
        self._sales_tax = None
        self._barcode = None
        self._upc = None
        self._ean = None
        self._isbn = None
        self._specifics = None
        self._image_url = None
        self._image_name = None
        self._avail_from = None
        self._tags = None
        self._clear_cache = None
        self._gtin = None
        self._taxable = None
        self._visible = None
        self._status = None
        self._product_class = None
        self.discriminator = None

        self.name = name
        self.model = model
        if sku is not None:
            self.sku = sku
        self.description = description
        self.price = price
        if old_price is not None:
            self.old_price = old_price
        if special_price is not None:
            self.special_price = special_price
        if cost_price is not None:
            self.cost_price = cost_price
        if sprice_create is not None:
            self.sprice_create = sprice_create
        if sprice_modified is not None:
            self.sprice_modified = sprice_modified
        if sprice_expire is not None:
            self.sprice_expire = sprice_expire
        if tier_prices is not None:
            self.tier_prices = tier_prices
        if group_prices is not None:
            self.group_prices = group_prices
        if available_for_view is not None:
            self.available_for_view = available_for_view
        if available_for_sale is not None:
            self.available_for_sale = available_for_sale
        if weight is not None:
            self.weight = weight
        if weight_unit is not None:
            self.weight_unit = weight_unit
        if short_description is not None:
            self.short_description = short_description
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if backorder_status is not None:
            self.backorder_status = backorder_status
        if quantity is not None:
            self.quantity = quantity
        if downloadable is not None:
            self.downloadable = downloadable
        if wholesale_price is not None:
            self.wholesale_price = wholesale_price
        if created_at is not None:
            self.created_at = created_at
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if categories_ids is not None:
            self.categories_ids = categories_ids
        if tax_class_id is not None:
            self.tax_class_id = tax_class_id
        if type is not None:
            self.type = type
        if meta_title is not None:
            self.meta_title = meta_title
        if meta_keywords is not None:
            self.meta_keywords = meta_keywords
        if meta_description is not None:
            self.meta_description = meta_description
        if url is not None:
            self.url = url
        if lang_id is not None:
            self.lang_id = lang_id
        if stores_ids is not None:
            self.stores_ids = stores_ids
        if viewed_count is not None:
            self.viewed_count = viewed_count
        if ordered_count is not None:
            self.ordered_count = ordered_count
        if attribute_set_name is not None:
            self.attribute_set_name = attribute_set_name
        if attribute_name is not None:
            self.attribute_name = attribute_name
        if shipping_template_id is not None:
            self.shipping_template_id = shipping_template_id
        if condition is not None:
            self.condition = condition
        if listing_duration is not None:
            self.listing_duration = listing_duration
        if listing_type is not None:
            self.listing_type = listing_type
        if payment_methods is not None:
            self.payment_methods = payment_methods
        if return_accepted is not None:
            self.return_accepted = return_accepted
        if shipping_details is not None:
            self.shipping_details = shipping_details
        if paypal_email is not None:
            self.paypal_email = paypal_email
        if seller_profiles is not None:
            self.seller_profiles = seller_profiles
        if package_details is not None:
            self.package_details = package_details
        if best_offer is not None:
            self.best_offer = best_offer
        if sales_tax is not None:
            self.sales_tax = sales_tax
        if barcode is not None:
            self.barcode = barcode
        if upc is not None:
            self.upc = upc
        if ean is not None:
            self.ean = ean
        if isbn is not None:
            self.isbn = isbn
        if specifics is not None:
            self.specifics = specifics
        if image_url is not None:
            self.image_url = image_url
        if image_name is not None:
            self.image_name = image_name
        if avail_from is not None:
            self.avail_from = avail_from
        if tags is not None:
            self.tags = tags
        if clear_cache is not None:
            self.clear_cache = clear_cache
        if gtin is not None:
            self.gtin = gtin
        if taxable is not None:
            self.taxable = taxable
        if visible is not None:
            self.visible = visible
        if status is not None:
            self.status = status
        if product_class is not None:
            self.product_class = product_class

    @property
    def name(self):
        """Gets the name of this ProductAdd.  # noqa: E501

        Defines product's name that has to be added  # noqa: E501

        :return: The name of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductAdd.

        Defines product's name that has to be added  # noqa: E501

        :param name: The name of this ProductAdd.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def model(self):
        """Gets the model of this ProductAdd.  # noqa: E501

        Defines product's model that has to be added  # noqa: E501

        :return: The model of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ProductAdd.

        Defines product's model that has to be added  # noqa: E501

        :param model: The model of this ProductAdd.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def sku(self):
        """Gets the sku of this ProductAdd.  # noqa: E501

        Defines product's sku that has to be added  # noqa: E501

        :return: The sku of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductAdd.

        Defines product's sku that has to be added  # noqa: E501

        :param sku: The sku of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def description(self):
        """Gets the description of this ProductAdd.  # noqa: E501

        Defines product's description that has to be added  # noqa: E501

        :return: The description of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductAdd.

        Defines product's description that has to be added  # noqa: E501

        :param description: The description of this ProductAdd.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def price(self):
        """Gets the price of this ProductAdd.  # noqa: E501

        Defines product's price that has to be added  # noqa: E501

        :return: The price of this ProductAdd.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductAdd.

        Defines product's price that has to be added  # noqa: E501

        :param price: The price of this ProductAdd.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def old_price(self):
        """Gets the old_price of this ProductAdd.  # noqa: E501

        Defines product's old price  # noqa: E501

        :return: The old_price of this ProductAdd.  # noqa: E501
        :rtype: float
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this ProductAdd.

        Defines product's old price  # noqa: E501

        :param old_price: The old_price of this ProductAdd.  # noqa: E501
        :type: float
        """

        self._old_price = old_price

    @property
    def special_price(self):
        """Gets the special_price of this ProductAdd.  # noqa: E501

        Defines product's model that has to be added  # noqa: E501

        :return: The special_price of this ProductAdd.  # noqa: E501
        :rtype: float
        """
        return self._special_price

    @special_price.setter
    def special_price(self, special_price):
        """Sets the special_price of this ProductAdd.

        Defines product's model that has to be added  # noqa: E501

        :param special_price: The special_price of this ProductAdd.  # noqa: E501
        :type: float
        """

        self._special_price = special_price

    @property
    def cost_price(self):
        """Gets the cost_price of this ProductAdd.  # noqa: E501

        Defines new product's cost price  # noqa: E501

        :return: The cost_price of this ProductAdd.  # noqa: E501
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this ProductAdd.

        Defines new product's cost price  # noqa: E501

        :param cost_price: The cost_price of this ProductAdd.  # noqa: E501
        :type: float
        """

        self._cost_price = cost_price

    @property
    def sprice_create(self):
        """Gets the sprice_create of this ProductAdd.  # noqa: E501

        Defines the date of special price creation  # noqa: E501

        :return: The sprice_create of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._sprice_create

    @sprice_create.setter
    def sprice_create(self, sprice_create):
        """Sets the sprice_create of this ProductAdd.

        Defines the date of special price creation  # noqa: E501

        :param sprice_create: The sprice_create of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._sprice_create = sprice_create

    @property
    def sprice_modified(self):
        """Gets the sprice_modified of this ProductAdd.  # noqa: E501

        Defines the date of special price modification  # noqa: E501

        :return: The sprice_modified of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._sprice_modified

    @sprice_modified.setter
    def sprice_modified(self, sprice_modified):
        """Sets the sprice_modified of this ProductAdd.

        Defines the date of special price modification  # noqa: E501

        :param sprice_modified: The sprice_modified of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._sprice_modified = sprice_modified

    @property
    def sprice_expire(self):
        """Gets the sprice_expire of this ProductAdd.  # noqa: E501

        Defines the term of special price offer duration  # noqa: E501

        :return: The sprice_expire of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._sprice_expire

    @sprice_expire.setter
    def sprice_expire(self, sprice_expire):
        """Sets the sprice_expire of this ProductAdd.

        Defines the term of special price offer duration  # noqa: E501

        :param sprice_expire: The sprice_expire of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._sprice_expire = sprice_expire

    @property
    def tier_prices(self):
        """Gets the tier_prices of this ProductAdd.  # noqa: E501

        Defines product's tier prices  # noqa: E501

        :return: The tier_prices of this ProductAdd.  # noqa: E501
        :rtype: list[ProductAddTierPrices]
        """
        return self._tier_prices

    @tier_prices.setter
    def tier_prices(self, tier_prices):
        """Sets the tier_prices of this ProductAdd.

        Defines product's tier prices  # noqa: E501

        :param tier_prices: The tier_prices of this ProductAdd.  # noqa: E501
        :type: list[ProductAddTierPrices]
        """

        self._tier_prices = tier_prices

    @property
    def group_prices(self):
        """Gets the group_prices of this ProductAdd.  # noqa: E501

        Defines product's group prices  # noqa: E501

        :return: The group_prices of this ProductAdd.  # noqa: E501
        :rtype: list[ProductAddGroupPrices]
        """
        return self._group_prices

    @group_prices.setter
    def group_prices(self, group_prices):
        """Sets the group_prices of this ProductAdd.

        Defines product's group prices  # noqa: E501

        :param group_prices: The group_prices of this ProductAdd.  # noqa: E501
        :type: list[ProductAddGroupPrices]
        """

        self._group_prices = group_prices

    @property
    def available_for_view(self):
        """Gets the available_for_view of this ProductAdd.  # noqa: E501

        Specifies the set of visible/invisible products for users  # noqa: E501

        :return: The available_for_view of this ProductAdd.  # noqa: E501
        :rtype: bool
        """
        return self._available_for_view

    @available_for_view.setter
    def available_for_view(self, available_for_view):
        """Sets the available_for_view of this ProductAdd.

        Specifies the set of visible/invisible products for users  # noqa: E501

        :param available_for_view: The available_for_view of this ProductAdd.  # noqa: E501
        :type: bool
        """

        self._available_for_view = available_for_view

    @property
    def available_for_sale(self):
        """Gets the available_for_sale of this ProductAdd.  # noqa: E501

        Specifies the set of visible/invisible products for sale  # noqa: E501

        :return: The available_for_sale of this ProductAdd.  # noqa: E501
        :rtype: bool
        """
        return self._available_for_sale

    @available_for_sale.setter
    def available_for_sale(self, available_for_sale):
        """Sets the available_for_sale of this ProductAdd.

        Specifies the set of visible/invisible products for sale  # noqa: E501

        :param available_for_sale: The available_for_sale of this ProductAdd.  # noqa: E501
        :type: bool
        """

        self._available_for_sale = available_for_sale

    @property
    def weight(self):
        """Gets the weight of this ProductAdd.  # noqa: E501

        Weight  # noqa: E501

        :return: The weight of this ProductAdd.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ProductAdd.

        Weight  # noqa: E501

        :param weight: The weight of this ProductAdd.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this ProductAdd.  # noqa: E501

        Weight Unit  # noqa: E501

        :return: The weight_unit of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this ProductAdd.

        Weight Unit  # noqa: E501

        :param weight_unit: The weight_unit of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._weight_unit = weight_unit

    @property
    def short_description(self):
        """Gets the short_description of this ProductAdd.  # noqa: E501

        Defines short description  # noqa: E501

        :return: The short_description of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ProductAdd.

        Defines short description  # noqa: E501

        :param short_description: The short_description of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ProductAdd.  # noqa: E501

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.  # noqa: E501

        :return: The warehouse_id of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ProductAdd.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.  # noqa: E501

        :param warehouse_id: The warehouse_id of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._warehouse_id = warehouse_id

    @property
    def backorder_status(self):
        """Gets the backorder_status of this ProductAdd.  # noqa: E501

        Set backorder status  # noqa: E501

        :return: The backorder_status of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._backorder_status

    @backorder_status.setter
    def backorder_status(self, backorder_status):
        """Sets the backorder_status of this ProductAdd.

        Set backorder status  # noqa: E501

        :param backorder_status: The backorder_status of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._backorder_status = backorder_status

    @property
    def quantity(self):
        """Gets the quantity of this ProductAdd.  # noqa: E501

        Defines product's quantity that has to be added  # noqa: E501

        :return: The quantity of this ProductAdd.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductAdd.

        Defines product's quantity that has to be added  # noqa: E501

        :param quantity: The quantity of this ProductAdd.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def downloadable(self):
        """Gets the downloadable of this ProductAdd.  # noqa: E501

        Defines whether the product is downloadable  # noqa: E501

        :return: The downloadable of this ProductAdd.  # noqa: E501
        :rtype: bool
        """
        return self._downloadable

    @downloadable.setter
    def downloadable(self, downloadable):
        """Sets the downloadable of this ProductAdd.

        Defines whether the product is downloadable  # noqa: E501

        :param downloadable: The downloadable of this ProductAdd.  # noqa: E501
        :type: bool
        """

        self._downloadable = downloadable

    @property
    def wholesale_price(self):
        """Gets the wholesale_price of this ProductAdd.  # noqa: E501

        Defines product's sale price  # noqa: E501

        :return: The wholesale_price of this ProductAdd.  # noqa: E501
        :rtype: float
        """
        return self._wholesale_price

    @wholesale_price.setter
    def wholesale_price(self, wholesale_price):
        """Sets the wholesale_price of this ProductAdd.

        Defines product's sale price  # noqa: E501

        :param wholesale_price: The wholesale_price of this ProductAdd.  # noqa: E501
        :type: float
        """

        self._wholesale_price = wholesale_price

    @property
    def created_at(self):
        """Gets the created_at of this ProductAdd.  # noqa: E501

        Defines the date of entity creation  # noqa: E501

        :return: The created_at of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProductAdd.

        Defines the date of entity creation  # noqa: E501

        :param created_at: The created_at of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductAdd.  # noqa: E501

        Defines product's manufacturer  # noqa: E501

        :return: The manufacturer of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductAdd.

        Defines product's manufacturer  # noqa: E501

        :param manufacturer: The manufacturer of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def categories_ids(self):
        """Gets the categories_ids of this ProductAdd.  # noqa: E501

        Defines product add that is specified by comma-separated categories id  # noqa: E501

        :return: The categories_ids of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._categories_ids

    @categories_ids.setter
    def categories_ids(self, categories_ids):
        """Sets the categories_ids of this ProductAdd.

        Defines product add that is specified by comma-separated categories id  # noqa: E501

        :param categories_ids: The categories_ids of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._categories_ids = categories_ids

    @property
    def tax_class_id(self):
        """Gets the tax_class_id of this ProductAdd.  # noqa: E501

        Defines tax classes where entity has to be added  # noqa: E501

        :return: The tax_class_id of this ProductAdd.  # noqa: E501
        :rtype: int
        """
        return self._tax_class_id

    @tax_class_id.setter
    def tax_class_id(self, tax_class_id):
        """Sets the tax_class_id of this ProductAdd.

        Defines tax classes where entity has to be added  # noqa: E501

        :param tax_class_id: The tax_class_id of this ProductAdd.  # noqa: E501
        :type: int
        """

        self._tax_class_id = tax_class_id

    @property
    def type(self):
        """Gets the type of this ProductAdd.  # noqa: E501

        Defines product's type  # noqa: E501

        :return: The type of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductAdd.

        Defines product's type  # noqa: E501

        :param type: The type of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def meta_title(self):
        """Gets the meta_title of this ProductAdd.  # noqa: E501

        Defines unique meta title for each entity  # noqa: E501

        :return: The meta_title of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this ProductAdd.

        Defines unique meta title for each entity  # noqa: E501

        :param meta_title: The meta_title of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._meta_title = meta_title

    @property
    def meta_keywords(self):
        """Gets the meta_keywords of this ProductAdd.  # noqa: E501

        Defines unique meta keywords for each entity  # noqa: E501

        :return: The meta_keywords of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """Sets the meta_keywords of this ProductAdd.

        Defines unique meta keywords for each entity  # noqa: E501

        :param meta_keywords: The meta_keywords of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_description(self):
        """Gets the meta_description of this ProductAdd.  # noqa: E501

        Defines unique meta description of a entity  # noqa: E501

        :return: The meta_description of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this ProductAdd.

        Defines unique meta description of a entity  # noqa: E501

        :param meta_description: The meta_description of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._meta_description = meta_description

    @property
    def url(self):
        """Gets the url of this ProductAdd.  # noqa: E501

        Defines unique product's URL  # noqa: E501

        :return: The url of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductAdd.

        Defines unique product's URL  # noqa: E501

        :param url: The url of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def lang_id(self):
        """Gets the lang_id of this ProductAdd.  # noqa: E501

        Language id  # noqa: E501

        :return: The lang_id of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this ProductAdd.

        Language id  # noqa: E501

        :param lang_id: The lang_id of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._lang_id = lang_id

    @property
    def stores_ids(self):
        """Gets the stores_ids of this ProductAdd.  # noqa: E501

        Assign product to the stores that is specified by comma-separated stores' id  # noqa: E501

        :return: The stores_ids of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._stores_ids

    @stores_ids.setter
    def stores_ids(self, stores_ids):
        """Sets the stores_ids of this ProductAdd.

        Assign product to the stores that is specified by comma-separated stores' id  # noqa: E501

        :param stores_ids: The stores_ids of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._stores_ids = stores_ids

    @property
    def viewed_count(self):
        """Gets the viewed_count of this ProductAdd.  # noqa: E501

        Specifies the number of product's reviews  # noqa: E501

        :return: The viewed_count of this ProductAdd.  # noqa: E501
        :rtype: int
        """
        return self._viewed_count

    @viewed_count.setter
    def viewed_count(self, viewed_count):
        """Sets the viewed_count of this ProductAdd.

        Specifies the number of product's reviews  # noqa: E501

        :param viewed_count: The viewed_count of this ProductAdd.  # noqa: E501
        :type: int
        """

        self._viewed_count = viewed_count

    @property
    def ordered_count(self):
        """Gets the ordered_count of this ProductAdd.  # noqa: E501

        Defines how many times the product was ordered  # noqa: E501

        :return: The ordered_count of this ProductAdd.  # noqa: E501
        :rtype: int
        """
        return self._ordered_count

    @ordered_count.setter
    def ordered_count(self, ordered_count):
        """Sets the ordered_count of this ProductAdd.

        Defines how many times the product was ordered  # noqa: E501

        :param ordered_count: The ordered_count of this ProductAdd.  # noqa: E501
        :type: int
        """

        self._ordered_count = ordered_count

    @property
    def attribute_set_name(self):
        """Gets the attribute_set_name of this ProductAdd.  # noqa: E501

        Defines product’s attribute set name in Magento  # noqa: E501

        :return: The attribute_set_name of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._attribute_set_name

    @attribute_set_name.setter
    def attribute_set_name(self, attribute_set_name):
        """Sets the attribute_set_name of this ProductAdd.

        Defines product’s attribute set name in Magento  # noqa: E501

        :param attribute_set_name: The attribute_set_name of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._attribute_set_name = attribute_set_name

    @property
    def attribute_name(self):
        """Gets the attribute_name of this ProductAdd.  # noqa: E501

        Defines product’s attribute name separated with a comma in Magento  # noqa: E501

        :return: The attribute_name of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this ProductAdd.

        Defines product’s attribute name separated with a comma in Magento  # noqa: E501

        :param attribute_name: The attribute_name of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._attribute_name = attribute_name

    @property
    def shipping_template_id(self):
        """Gets the shipping_template_id of this ProductAdd.  # noqa: E501

        The numeric ID of the shipping template associated with the products in Etsy.  # noqa: E501

        :return: The shipping_template_id of this ProductAdd.  # noqa: E501
        :rtype: int
        """
        return self._shipping_template_id

    @shipping_template_id.setter
    def shipping_template_id(self, shipping_template_id):
        """Sets the shipping_template_id of this ProductAdd.

        The numeric ID of the shipping template associated with the products in Etsy.  # noqa: E501

        :param shipping_template_id: The shipping_template_id of this ProductAdd.  # noqa: E501
        :type: int
        """

        self._shipping_template_id = shipping_template_id

    @property
    def condition(self):
        """Gets the condition of this ProductAdd.  # noqa: E501

        The human-readable label for the condition (e.g., \"New\").  # noqa: E501

        :return: The condition of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ProductAdd.

        The human-readable label for the condition (e.g., \"New\").  # noqa: E501

        :param condition: The condition of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def listing_duration(self):
        """Gets the listing_duration of this ProductAdd.  # noqa: E501

        Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.  # noqa: E501

        :return: The listing_duration of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._listing_duration

    @listing_duration.setter
    def listing_duration(self, listing_duration):
        """Sets the listing_duration of this ProductAdd.

        Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.  # noqa: E501

        :param listing_duration: The listing_duration of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._listing_duration = listing_duration

    @property
    def listing_type(self):
        """Gets the listing_type of this ProductAdd.  # noqa: E501

        Indicates the selling format of the eBay listing.  # noqa: E501

        :return: The listing_type of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._listing_type

    @listing_type.setter
    def listing_type(self, listing_type):
        """Sets the listing_type of this ProductAdd.

        Indicates the selling format of the eBay listing.  # noqa: E501

        :param listing_type: The listing_type of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._listing_type = listing_type

    @property
    def payment_methods(self):
        """Gets the payment_methods of this ProductAdd.  # noqa: E501

        Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>  # noqa: E501

        :return: The payment_methods of this ProductAdd.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this ProductAdd.

        Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>  # noqa: E501

        :param payment_methods: The payment_methods of this ProductAdd.  # noqa: E501
        :type: list[str]
        """

        self._payment_methods = payment_methods

    @property
    def return_accepted(self):
        """Gets the return_accepted of this ProductAdd.  # noqa: E501

        Indicates whether the seller allows the buyer to return the item.  # noqa: E501

        :return: The return_accepted of this ProductAdd.  # noqa: E501
        :rtype: bool
        """
        return self._return_accepted

    @return_accepted.setter
    def return_accepted(self, return_accepted):
        """Sets the return_accepted of this ProductAdd.

        Indicates whether the seller allows the buyer to return the item.  # noqa: E501

        :param return_accepted: The return_accepted of this ProductAdd.  # noqa: E501
        :type: bool
        """

        self._return_accepted = return_accepted

    @property
    def shipping_details(self):
        """Gets the shipping_details of this ProductAdd.  # noqa: E501

        The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">shipping_details[0][<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_type</b>] = string </br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>  # noqa: E501

        :return: The shipping_details of this ProductAdd.  # noqa: E501
        :rtype: list[ProductAddShippingDetails]
        """
        return self._shipping_details

    @shipping_details.setter
    def shipping_details(self, shipping_details):
        """Sets the shipping_details of this ProductAdd.

        The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">shipping_details[0][<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_type</b>] = string </br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>  # noqa: E501

        :param shipping_details: The shipping_details of this ProductAdd.  # noqa: E501
        :type: list[ProductAddShippingDetails]
        """

        self._shipping_details = shipping_details

    @property
    def paypal_email(self):
        """Gets the paypal_email of this ProductAdd.  # noqa: E501

        Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.  # noqa: E501

        :return: The paypal_email of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._paypal_email

    @paypal_email.setter
    def paypal_email(self, paypal_email):
        """Sets the paypal_email of this ProductAdd.

        Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.  # noqa: E501

        :param paypal_email: The paypal_email of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._paypal_email = paypal_email

    @property
    def seller_profiles(self):
        """Gets the seller_profiles of this ProductAdd.  # noqa: E501


        :return: The seller_profiles of this ProductAdd.  # noqa: E501
        :rtype: ProductAddSellerProfiles
        """
        return self._seller_profiles

    @seller_profiles.setter
    def seller_profiles(self, seller_profiles):
        """Sets the seller_profiles of this ProductAdd.


        :param seller_profiles: The seller_profiles of this ProductAdd.  # noqa: E501
        :type: ProductAddSellerProfiles
        """

        self._seller_profiles = seller_profiles

    @property
    def package_details(self):
        """Gets the package_details of this ProductAdd.  # noqa: E501

        If the seller is subscribed to \"Business Policies\", use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">package_details[<b>measure_unit</b>] = string</br> Allowed measure_unit values: [English or Metric] </br> Default: Metric</br>package_details[<b>weigh_unit</b>] = string</br> Allowed weigh_unit values: [kg, g, lbs, oz]</br>package_details[<b>package_depth</b>] = decimal</br>package_details[<b>package_length</b>] = decimal</br>package_details[<b>package_width</b>] = decimal</br>package_details[<b>weight_major</b>] = decimal</br>package_details[<b>weight_minor</b>] = decimal</br>package_details[<b>shipping_package</b>] = string</br> See cart.info method, param `eBay_shipping_package_details`</code></div></div>  # noqa: E501

        :return: The package_details of this ProductAdd.  # noqa: E501
        :rtype: list[str]
        """
        return self._package_details

    @package_details.setter
    def package_details(self, package_details):
        """Sets the package_details of this ProductAdd.

        If the seller is subscribed to \"Business Policies\", use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">package_details[<b>measure_unit</b>] = string</br> Allowed measure_unit values: [English or Metric] </br> Default: Metric</br>package_details[<b>weigh_unit</b>] = string</br> Allowed weigh_unit values: [kg, g, lbs, oz]</br>package_details[<b>package_depth</b>] = decimal</br>package_details[<b>package_length</b>] = decimal</br>package_details[<b>package_width</b>] = decimal</br>package_details[<b>weight_major</b>] = decimal</br>package_details[<b>weight_minor</b>] = decimal</br>package_details[<b>shipping_package</b>] = string</br> See cart.info method, param `eBay_shipping_package_details`</code></div></div>  # noqa: E501

        :param package_details: The package_details of this ProductAdd.  # noqa: E501
        :type: list[str]
        """

        self._package_details = package_details

    @property
    def best_offer(self):
        """Gets the best_offer of this ProductAdd.  # noqa: E501

        The price at which Best Offers are automatically accepted.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">best_offer[<b>minimum_offer_price</b>] = decimal</br>best_offer[<b>auto_accept_price</b>] = decimal</br></code></div></div>  # noqa: E501

        :return: The best_offer of this ProductAdd.  # noqa: E501
        :rtype: list[str]
        """
        return self._best_offer

    @best_offer.setter
    def best_offer(self, best_offer):
        """Sets the best_offer of this ProductAdd.

        The price at which Best Offers are automatically accepted.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">best_offer[<b>minimum_offer_price</b>] = decimal</br>best_offer[<b>auto_accept_price</b>] = decimal</br></code></div></div>  # noqa: E501

        :param best_offer: The best_offer of this ProductAdd.  # noqa: E501
        :type: list[str]
        """

        self._best_offer = best_offer

    @property
    def sales_tax(self):
        """Gets the sales_tax of this ProductAdd.  # noqa: E501

        Percent of an item's price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">sales_tax[<b>tax_percent</b>] = decimal (##.###)</br>sales_tax[<b>tax_state</b>] = string</br>sales_tax[<b>shipping_inc_in_tax</b>] = bool</br></code></div></div>  # noqa: E501

        :return: The sales_tax of this ProductAdd.  # noqa: E501
        :rtype: list[str]
        """
        return self._sales_tax

    @sales_tax.setter
    def sales_tax(self, sales_tax):
        """Sets the sales_tax of this ProductAdd.

        Percent of an item's price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">sales_tax[<b>tax_percent</b>] = decimal (##.###)</br>sales_tax[<b>tax_state</b>] = string</br>sales_tax[<b>shipping_inc_in_tax</b>] = bool</br></code></div></div>  # noqa: E501

        :param sales_tax: The sales_tax of this ProductAdd.  # noqa: E501
        :type: list[str]
        """

        self._sales_tax = sales_tax

    @property
    def barcode(self):
        """Gets the barcode of this ProductAdd.  # noqa: E501

        A barcode is a unique code composed of numbers used as a product identifier.  # noqa: E501

        :return: The barcode of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ProductAdd.

        A barcode is a unique code composed of numbers used as a product identifier.  # noqa: E501

        :param barcode: The barcode of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def upc(self):
        """Gets the upc of this ProductAdd.  # noqa: E501

        Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.  # noqa: E501

        :return: The upc of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this ProductAdd.

        Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.  # noqa: E501

        :param upc: The upc of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._upc = upc

    @property
    def ean(self):
        """Gets the ean of this ProductAdd.  # noqa: E501

        European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.  # noqa: E501

        :return: The ean of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this ProductAdd.

        European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.  # noqa: E501

        :param ean: The ean of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._ean = ean

    @property
    def isbn(self):
        """Gets the isbn of this ProductAdd.  # noqa: E501

        International Standard Book Number. An ISBN is a unique identifier for books.  # noqa: E501

        :return: The isbn of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn):
        """Sets the isbn of this ProductAdd.

        International Standard Book Number. An ISBN is a unique identifier for books.  # noqa: E501

        :param isbn: The isbn of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._isbn = isbn

    @property
    def specifics(self):
        """Gets the specifics of this ProductAdd.  # noqa: E501

        An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         <hr>         <div style=\"font-style:normal\">Param structure:           <div style=\"margin-left: 2%;\">             <code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">               specifics[int][<b>name</b>] = string</br>               specifics[int][<b>value</b>] = string</br>             </code>           </div>         </div>  # noqa: E501

        :return: The specifics of this ProductAdd.  # noqa: E501
        :rtype: list[str]
        """
        return self._specifics

    @specifics.setter
    def specifics(self, specifics):
        """Sets the specifics of this ProductAdd.

        An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         <hr>         <div style=\"font-style:normal\">Param structure:           <div style=\"margin-left: 2%;\">             <code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">               specifics[int][<b>name</b>] = string</br>               specifics[int][<b>value</b>] = string</br>             </code>           </div>         </div>  # noqa: E501

        :param specifics: The specifics of this ProductAdd.  # noqa: E501
        :type: list[str]
        """

        self._specifics = specifics

    @property
    def image_url(self):
        """Gets the image_url of this ProductAdd.  # noqa: E501

        Image Url  # noqa: E501

        :return: The image_url of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ProductAdd.

        Image Url  # noqa: E501

        :param image_url: The image_url of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def image_name(self):
        """Gets the image_name of this ProductAdd.  # noqa: E501

        Defines image's name  # noqa: E501

        :return: The image_name of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ProductAdd.

        Defines image's name  # noqa: E501

        :param image_name: The image_name of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._image_name = image_name

    @property
    def avail_from(self):
        """Gets the avail_from of this ProductAdd.  # noqa: E501

        Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.  # noqa: E501

        :return: The avail_from of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._avail_from

    @avail_from.setter
    def avail_from(self, avail_from):
        """Sets the avail_from of this ProductAdd.

        Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.  # noqa: E501

        :param avail_from: The avail_from of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._avail_from = avail_from

    @property
    def tags(self):
        """Gets the tags of this ProductAdd.  # noqa: E501

        Product tags  # noqa: E501

        :return: The tags of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProductAdd.

        Product tags  # noqa: E501

        :param tags: The tags of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def clear_cache(self):
        """Gets the clear_cache of this ProductAdd.  # noqa: E501

        Is cache clear required  # noqa: E501

        :return: The clear_cache of this ProductAdd.  # noqa: E501
        :rtype: bool
        """
        return self._clear_cache

    @clear_cache.setter
    def clear_cache(self, clear_cache):
        """Sets the clear_cache of this ProductAdd.

        Is cache clear required  # noqa: E501

        :param clear_cache: The clear_cache of this ProductAdd.  # noqa: E501
        :type: bool
        """

        self._clear_cache = clear_cache

    @property
    def gtin(self):
        """Gets the gtin of this ProductAdd.  # noqa: E501

        Global Trade Item Number. An GTIN is an identifier for trade items.  # noqa: E501

        :return: The gtin of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ProductAdd.

        Global Trade Item Number. An GTIN is an identifier for trade items.  # noqa: E501

        :param gtin: The gtin of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._gtin = gtin

    @property
    def taxable(self):
        """Gets the taxable of this ProductAdd.  # noqa: E501

        Specifies whether a tax is charged  # noqa: E501

        :return: The taxable of this ProductAdd.  # noqa: E501
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this ProductAdd.

        Specifies whether a tax is charged  # noqa: E501

        :param taxable: The taxable of this ProductAdd.  # noqa: E501
        :type: bool
        """

        self._taxable = taxable

    @property
    def visible(self):
        """Gets the visible of this ProductAdd.  # noqa: E501

        Set visibility status  # noqa: E501

        :return: The visible of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ProductAdd.

        Set visibility status  # noqa: E501

        :param visible: The visible of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._visible = visible

    @property
    def status(self):
        """Gets the status of this ProductAdd.  # noqa: E501

        Defines product's status  # noqa: E501

        :return: The status of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductAdd.

        Defines product's status  # noqa: E501

        :param status: The status of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def product_class(self):
        """Gets the product_class of this ProductAdd.  # noqa: E501

        A categorization for the product  # noqa: E501

        :return: The product_class of this ProductAdd.  # noqa: E501
        :rtype: str
        """
        return self._product_class

    @product_class.setter
    def product_class(self, product_class):
        """Sets the product_class of this ProductAdd.

        A categorization for the product  # noqa: E501

        :param product_class: The product_class of this ProductAdd.  # noqa: E501
        :type: str
        """

        self._product_class = product_class

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductAdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductAdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
