# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'http_path': 'str',
        'file_name': 'str',
        'mime_type': 'str',
        'size': 'int',
        'create_at': 'A2CDateTime',
        'modified_at': 'A2CDateTime',
        'alt': 'str',
        'avail': 'bool',
        'sort_order': 'int',
        'type': 'str',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'http_path': 'http_path',
        'file_name': 'file_name',
        'mime_type': 'mime-type',
        'size': 'size',
        'create_at': 'create_at',
        'modified_at': 'modified_at',
        'alt': 'alt',
        'avail': 'avail',
        'sort_order': 'sort_order',
        'type': 'type',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, http_path=None, file_name=None, mime_type=None, size=None, create_at=None, modified_at=None, alt=None, avail=None, sort_order=None, type=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._http_path = None
        self._file_name = None
        self._mime_type = None
        self._size = None
        self._create_at = None
        self._modified_at = None
        self._alt = None
        self._avail = None
        self._sort_order = None
        self._type = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if http_path is not None:
            self.http_path = http_path
        if file_name is not None:
            self.file_name = file_name
        if mime_type is not None:
            self.mime_type = mime_type
        if size is not None:
            self.size = size
        if create_at is not None:
            self.create_at = create_at
        if modified_at is not None:
            self.modified_at = modified_at
        if alt is not None:
            self.alt = alt
        if avail is not None:
            self.avail = avail
        if sort_order is not None:
            self.sort_order = sort_order
        if type is not None:
            self.type = type
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Image.  # noqa: E501


        :return: The id of this Image.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Image.


        :param id: The id of this Image.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def http_path(self):
        """Gets the http_path of this Image.  # noqa: E501


        :return: The http_path of this Image.  # noqa: E501
        :rtype: str
        """
        return self._http_path

    @http_path.setter
    def http_path(self, http_path):
        """Sets the http_path of this Image.


        :param http_path: The http_path of this Image.  # noqa: E501
        :type: str
        """

        self._http_path = http_path

    @property
    def file_name(self):
        """Gets the file_name of this Image.  # noqa: E501


        :return: The file_name of this Image.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Image.


        :param file_name: The file_name of this Image.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def mime_type(self):
        """Gets the mime_type of this Image.  # noqa: E501


        :return: The mime_type of this Image.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Image.


        :param mime_type: The mime_type of this Image.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def size(self):
        """Gets the size of this Image.  # noqa: E501


        :return: The size of this Image.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Image.


        :param size: The size of this Image.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def create_at(self):
        """Gets the create_at of this Image.  # noqa: E501


        :return: The create_at of this Image.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this Image.


        :param create_at: The create_at of this Image.  # noqa: E501
        :type: A2CDateTime
        """

        self._create_at = create_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Image.  # noqa: E501


        :return: The modified_at of this Image.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Image.


        :param modified_at: The modified_at of this Image.  # noqa: E501
        :type: A2CDateTime
        """

        self._modified_at = modified_at

    @property
    def alt(self):
        """Gets the alt of this Image.  # noqa: E501


        :return: The alt of this Image.  # noqa: E501
        :rtype: str
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this Image.


        :param alt: The alt of this Image.  # noqa: E501
        :type: str
        """

        self._alt = alt

    @property
    def avail(self):
        """Gets the avail of this Image.  # noqa: E501


        :return: The avail of this Image.  # noqa: E501
        :rtype: bool
        """
        return self._avail

    @avail.setter
    def avail(self, avail):
        """Sets the avail of this Image.


        :param avail: The avail of this Image.  # noqa: E501
        :type: bool
        """

        self._avail = avail

    @property
    def sort_order(self):
        """Gets the sort_order of this Image.  # noqa: E501


        :return: The sort_order of this Image.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Image.


        :param sort_order: The sort_order of this Image.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def type(self):
        """Gets the type of this Image.  # noqa: E501


        :return: The type of this Image.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Image.


        :param type: The type of this Image.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Image.  # noqa: E501


        :return: The additional_fields of this Image.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Image.


        :param additional_fields: The additional_fields of this Image.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Image.  # noqa: E501


        :return: The custom_fields of this Image.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Image.


        :param custom_fields: The custom_fields of this Image.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Image, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
