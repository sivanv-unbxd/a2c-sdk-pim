# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderStatusRefund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping': 'float',
        'fee': 'float',
        'tax': 'float',
        'total_refunded': 'float',
        'time': 'A2CDateTime',
        'comment': 'str',
        'refunded_items': 'list[OrderStatusRefundItem]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'shipping': 'shipping',
        'fee': 'fee',
        'tax': 'tax',
        'total_refunded': 'total_refunded',
        'time': 'time',
        'comment': 'comment',
        'refunded_items': 'refunded_items',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, shipping=None, fee=None, tax=None, total_refunded=None, time=None, comment=None, refunded_items=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """OrderStatusRefund - a model defined in Swagger"""  # noqa: E501

        self._shipping = None
        self._fee = None
        self._tax = None
        self._total_refunded = None
        self._time = None
        self._comment = None
        self._refunded_items = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if shipping is not None:
            self.shipping = shipping
        if fee is not None:
            self.fee = fee
        if tax is not None:
            self.tax = tax
        if total_refunded is not None:
            self.total_refunded = total_refunded
        if time is not None:
            self.time = time
        if comment is not None:
            self.comment = comment
        if refunded_items is not None:
            self.refunded_items = refunded_items
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def shipping(self):
        """Gets the shipping of this OrderStatusRefund.  # noqa: E501


        :return: The shipping of this OrderStatusRefund.  # noqa: E501
        :rtype: float
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this OrderStatusRefund.


        :param shipping: The shipping of this OrderStatusRefund.  # noqa: E501
        :type: float
        """

        self._shipping = shipping

    @property
    def fee(self):
        """Gets the fee of this OrderStatusRefund.  # noqa: E501


        :return: The fee of this OrderStatusRefund.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this OrderStatusRefund.


        :param fee: The fee of this OrderStatusRefund.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def tax(self):
        """Gets the tax of this OrderStatusRefund.  # noqa: E501


        :return: The tax of this OrderStatusRefund.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this OrderStatusRefund.


        :param tax: The tax of this OrderStatusRefund.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def total_refunded(self):
        """Gets the total_refunded of this OrderStatusRefund.  # noqa: E501


        :return: The total_refunded of this OrderStatusRefund.  # noqa: E501
        :rtype: float
        """
        return self._total_refunded

    @total_refunded.setter
    def total_refunded(self, total_refunded):
        """Sets the total_refunded of this OrderStatusRefund.


        :param total_refunded: The total_refunded of this OrderStatusRefund.  # noqa: E501
        :type: float
        """

        self._total_refunded = total_refunded

    @property
    def time(self):
        """Gets the time of this OrderStatusRefund.  # noqa: E501


        :return: The time of this OrderStatusRefund.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this OrderStatusRefund.


        :param time: The time of this OrderStatusRefund.  # noqa: E501
        :type: A2CDateTime
        """

        self._time = time

    @property
    def comment(self):
        """Gets the comment of this OrderStatusRefund.  # noqa: E501


        :return: The comment of this OrderStatusRefund.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this OrderStatusRefund.


        :param comment: The comment of this OrderStatusRefund.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def refunded_items(self):
        """Gets the refunded_items of this OrderStatusRefund.  # noqa: E501


        :return: The refunded_items of this OrderStatusRefund.  # noqa: E501
        :rtype: list[OrderStatusRefundItem]
        """
        return self._refunded_items

    @refunded_items.setter
    def refunded_items(self, refunded_items):
        """Sets the refunded_items of this OrderStatusRefund.


        :param refunded_items: The refunded_items of this OrderStatusRefund.  # noqa: E501
        :type: list[OrderStatusRefundItem]
        """

        self._refunded_items = refunded_items

    @property
    def additional_fields(self):
        """Gets the additional_fields of this OrderStatusRefund.  # noqa: E501


        :return: The additional_fields of this OrderStatusRefund.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this OrderStatusRefund.


        :param additional_fields: The additional_fields of this OrderStatusRefund.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderStatusRefund.  # noqa: E501


        :return: The custom_fields of this OrderStatusRefund.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderStatusRefund.


        :param custom_fields: The custom_fields of this OrderStatusRefund.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderStatusRefund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderStatusRefund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
