# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CartShippingZone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'name': 'str',
        'country': 'str',
        'country_iso2_codes': 'list[str]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'name': 'name',
        'country': 'country',
        'country_iso2_codes': 'country_iso2_codes',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, code=None, name=None, country=None, country_iso2_codes=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """CartShippingZone - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._code = None
        self._name = None
        self._country = None
        self._country_iso2_codes = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if country is not None:
            self.country = country
        if country_iso2_codes is not None:
            self.country_iso2_codes = country_iso2_codes
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this CartShippingZone.  # noqa: E501


        :return: The id of this CartShippingZone.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CartShippingZone.


        :param id: The id of this CartShippingZone.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this CartShippingZone.  # noqa: E501


        :return: The code of this CartShippingZone.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CartShippingZone.


        :param code: The code of this CartShippingZone.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this CartShippingZone.  # noqa: E501


        :return: The name of this CartShippingZone.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CartShippingZone.


        :param name: The name of this CartShippingZone.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def country(self):
        """Gets the country of this CartShippingZone.  # noqa: E501


        :return: The country of this CartShippingZone.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CartShippingZone.


        :param country: The country of this CartShippingZone.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_iso2_codes(self):
        """Gets the country_iso2_codes of this CartShippingZone.  # noqa: E501


        :return: The country_iso2_codes of this CartShippingZone.  # noqa: E501
        :rtype: list[str]
        """
        return self._country_iso2_codes

    @country_iso2_codes.setter
    def country_iso2_codes(self, country_iso2_codes):
        """Sets the country_iso2_codes of this CartShippingZone.


        :param country_iso2_codes: The country_iso2_codes of this CartShippingZone.  # noqa: E501
        :type: list[str]
        """

        self._country_iso2_codes = country_iso2_codes

    @property
    def additional_fields(self):
        """Gets the additional_fields of this CartShippingZone.  # noqa: E501


        :return: The additional_fields of this CartShippingZone.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this CartShippingZone.


        :param additional_fields: The additional_fields of this CartShippingZone.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CartShippingZone.  # noqa: E501


        :return: The custom_fields of this CartShippingZone.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CartShippingZone.


        :param custom_fields: The custom_fields of this CartShippingZone.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CartShippingZone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CartShippingZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
