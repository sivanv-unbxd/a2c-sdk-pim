# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Category(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'parent_id': 'str',
        'created_at': 'A2CDateTime',
        'modified_at': 'A2CDateTime',
        'name': 'str',
        'short_description': 'str',
        'description': 'str',
        'stores_ids': 'list[str]',
        'keywords': 'str',
        'meta_description': 'str',
        'meta_title': 'str',
        'avail': 'bool',
        'path': 'str',
        'seo_url': 'str',
        'sort_order': 'int',
        'images': 'list[Image]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'parent_id': 'parent_id',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'name': 'name',
        'short_description': 'short_description',
        'description': 'description',
        'stores_ids': 'stores_ids',
        'keywords': 'keywords',
        'meta_description': 'meta_description',
        'meta_title': 'meta_title',
        'avail': 'avail',
        'path': 'path',
        'seo_url': 'seo_url',
        'sort_order': 'sort_order',
        'images': 'images',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, parent_id=None, created_at=None, modified_at=None, name=None, short_description=None, description=None, stores_ids=None, keywords=None, meta_description=None, meta_title=None, avail=None, path=None, seo_url=None, sort_order=None, images=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """Category - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._parent_id = None
        self._created_at = None
        self._modified_at = None
        self._name = None
        self._short_description = None
        self._description = None
        self._stores_ids = None
        self._keywords = None
        self._meta_description = None
        self._meta_title = None
        self._avail = None
        self._path = None
        self._seo_url = None
        self._sort_order = None
        self._images = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if parent_id is not None:
            self.parent_id = parent_id
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if name is not None:
            self.name = name
        if short_description is not None:
            self.short_description = short_description
        if description is not None:
            self.description = description
        if stores_ids is not None:
            self.stores_ids = stores_ids
        if keywords is not None:
            self.keywords = keywords
        if meta_description is not None:
            self.meta_description = meta_description
        if meta_title is not None:
            self.meta_title = meta_title
        if avail is not None:
            self.avail = avail
        if path is not None:
            self.path = path
        if seo_url is not None:
            self.seo_url = seo_url
        if sort_order is not None:
            self.sort_order = sort_order
        if images is not None:
            self.images = images
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Category.  # noqa: E501


        :return: The id of this Category.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.


        :param id: The id of this Category.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this Category.  # noqa: E501


        :return: The parent_id of this Category.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Category.


        :param parent_id: The parent_id of this Category.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def created_at(self):
        """Gets the created_at of this Category.  # noqa: E501


        :return: The created_at of this Category.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Category.


        :param created_at: The created_at of this Category.  # noqa: E501
        :type: A2CDateTime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Category.  # noqa: E501


        :return: The modified_at of this Category.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Category.


        :param modified_at: The modified_at of this Category.  # noqa: E501
        :type: A2CDateTime
        """

        self._modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this Category.  # noqa: E501


        :return: The name of this Category.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.


        :param name: The name of this Category.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_description(self):
        """Gets the short_description of this Category.  # noqa: E501


        :return: The short_description of this Category.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Category.


        :param short_description: The short_description of this Category.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def description(self):
        """Gets the description of this Category.  # noqa: E501


        :return: The description of this Category.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Category.


        :param description: The description of this Category.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def stores_ids(self):
        """Gets the stores_ids of this Category.  # noqa: E501


        :return: The stores_ids of this Category.  # noqa: E501
        :rtype: list[str]
        """
        return self._stores_ids

    @stores_ids.setter
    def stores_ids(self, stores_ids):
        """Sets the stores_ids of this Category.


        :param stores_ids: The stores_ids of this Category.  # noqa: E501
        :type: list[str]
        """

        self._stores_ids = stores_ids

    @property
    def keywords(self):
        """Gets the keywords of this Category.  # noqa: E501


        :return: The keywords of this Category.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Category.


        :param keywords: The keywords of this Category.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def meta_description(self):
        """Gets the meta_description of this Category.  # noqa: E501


        :return: The meta_description of this Category.  # noqa: E501
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this Category.


        :param meta_description: The meta_description of this Category.  # noqa: E501
        :type: str
        """

        self._meta_description = meta_description

    @property
    def meta_title(self):
        """Gets the meta_title of this Category.  # noqa: E501


        :return: The meta_title of this Category.  # noqa: E501
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this Category.


        :param meta_title: The meta_title of this Category.  # noqa: E501
        :type: str
        """

        self._meta_title = meta_title

    @property
    def avail(self):
        """Gets the avail of this Category.  # noqa: E501


        :return: The avail of this Category.  # noqa: E501
        :rtype: bool
        """
        return self._avail

    @avail.setter
    def avail(self, avail):
        """Sets the avail of this Category.


        :param avail: The avail of this Category.  # noqa: E501
        :type: bool
        """

        self._avail = avail

    @property
    def path(self):
        """Gets the path of this Category.  # noqa: E501


        :return: The path of this Category.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Category.


        :param path: The path of this Category.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def seo_url(self):
        """Gets the seo_url of this Category.  # noqa: E501


        :return: The seo_url of this Category.  # noqa: E501
        :rtype: str
        """
        return self._seo_url

    @seo_url.setter
    def seo_url(self, seo_url):
        """Sets the seo_url of this Category.


        :param seo_url: The seo_url of this Category.  # noqa: E501
        :type: str
        """

        self._seo_url = seo_url

    @property
    def sort_order(self):
        """Gets the sort_order of this Category.  # noqa: E501


        :return: The sort_order of this Category.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Category.


        :param sort_order: The sort_order of this Category.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def images(self):
        """Gets the images of this Category.  # noqa: E501


        :return: The images of this Category.  # noqa: E501
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Category.


        :param images: The images of this Category.  # noqa: E501
        :type: list[Image]
        """

        self._images = images

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Category.  # noqa: E501


        :return: The additional_fields of this Category.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Category.


        :param additional_fields: The additional_fields of this Category.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Category.  # noqa: E501


        :return: The custom_fields of this Category.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Category.


        :param custom_fields: The custom_fields of this Category.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Category, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
