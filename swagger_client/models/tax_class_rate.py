# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaxClassRate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'tax': 'float',
        'tax_type': 'int',
        'tax_based_on': 'str',
        'countries': 'list[str]',
        'cities': 'list[str]',
        'address': 'list[str]',
        'zip_codes': 'list[str]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'tax': 'tax',
        'tax_type': 'tax_type',
        'tax_based_on': 'tax_based_on',
        'countries': 'countries',
        'cities': 'cities',
        'address': 'address',
        'zip_codes': 'zip_codes',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, name=None, tax=None, tax_type=None, tax_based_on=None, countries=None, cities=None, address=None, zip_codes=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """TaxClassRate - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._tax = None
        self._tax_type = None
        self._tax_based_on = None
        self._countries = None
        self._cities = None
        self._address = None
        self._zip_codes = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if tax is not None:
            self.tax = tax
        if tax_type is not None:
            self.tax_type = tax_type
        if tax_based_on is not None:
            self.tax_based_on = tax_based_on
        if countries is not None:
            self.countries = countries
        if cities is not None:
            self.cities = cities
        if address is not None:
            self.address = address
        if zip_codes is not None:
            self.zip_codes = zip_codes
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this TaxClassRate.  # noqa: E501


        :return: The id of this TaxClassRate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxClassRate.


        :param id: The id of this TaxClassRate.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TaxClassRate.  # noqa: E501


        :return: The name of this TaxClassRate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxClassRate.


        :param name: The name of this TaxClassRate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tax(self):
        """Gets the tax of this TaxClassRate.  # noqa: E501


        :return: The tax of this TaxClassRate.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this TaxClassRate.


        :param tax: The tax of this TaxClassRate.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def tax_type(self):
        """Gets the tax_type of this TaxClassRate.  # noqa: E501


        :return: The tax_type of this TaxClassRate.  # noqa: E501
        :rtype: int
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this TaxClassRate.


        :param tax_type: The tax_type of this TaxClassRate.  # noqa: E501
        :type: int
        """

        self._tax_type = tax_type

    @property
    def tax_based_on(self):
        """Gets the tax_based_on of this TaxClassRate.  # noqa: E501


        :return: The tax_based_on of this TaxClassRate.  # noqa: E501
        :rtype: str
        """
        return self._tax_based_on

    @tax_based_on.setter
    def tax_based_on(self, tax_based_on):
        """Sets the tax_based_on of this TaxClassRate.


        :param tax_based_on: The tax_based_on of this TaxClassRate.  # noqa: E501
        :type: str
        """

        self._tax_based_on = tax_based_on

    @property
    def countries(self):
        """Gets the countries of this TaxClassRate.  # noqa: E501


        :return: The countries of this TaxClassRate.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this TaxClassRate.


        :param countries: The countries of this TaxClassRate.  # noqa: E501
        :type: list[str]
        """

        self._countries = countries

    @property
    def cities(self):
        """Gets the cities of this TaxClassRate.  # noqa: E501


        :return: The cities of this TaxClassRate.  # noqa: E501
        :rtype: list[str]
        """
        return self._cities

    @cities.setter
    def cities(self, cities):
        """Sets the cities of this TaxClassRate.


        :param cities: The cities of this TaxClassRate.  # noqa: E501
        :type: list[str]
        """

        self._cities = cities

    @property
    def address(self):
        """Gets the address of this TaxClassRate.  # noqa: E501


        :return: The address of this TaxClassRate.  # noqa: E501
        :rtype: list[str]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TaxClassRate.


        :param address: The address of this TaxClassRate.  # noqa: E501
        :type: list[str]
        """

        self._address = address

    @property
    def zip_codes(self):
        """Gets the zip_codes of this TaxClassRate.  # noqa: E501


        :return: The zip_codes of this TaxClassRate.  # noqa: E501
        :rtype: list[str]
        """
        return self._zip_codes

    @zip_codes.setter
    def zip_codes(self, zip_codes):
        """Sets the zip_codes of this TaxClassRate.


        :param zip_codes: The zip_codes of this TaxClassRate.  # noqa: E501
        :type: list[str]
        """

        self._zip_codes = zip_codes

    @property
    def additional_fields(self):
        """Gets the additional_fields of this TaxClassRate.  # noqa: E501


        :return: The additional_fields of this TaxClassRate.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this TaxClassRate.


        :param additional_fields: The additional_fields of this TaxClassRate.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this TaxClassRate.  # noqa: E501


        :return: The custom_fields of this TaxClassRate.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this TaxClassRate.


        :param custom_fields: The custom_fields of this TaxClassRate.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxClassRate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxClassRate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
