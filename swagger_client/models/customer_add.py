# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CustomerAdd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'password': 'str',
        'group': 'str',
        'created_time': 'str',
        'modified_time': 'str',
        'login': 'str',
        'last_login': 'str',
        'birth_day': 'str',
        'status': 'str',
        'news_letter_subscription': 'bool',
        'gender': 'str',
        'website': 'str',
        'fax': 'str',
        'company': 'str',
        'phone': 'str',
        'address': 'list[CustomerAddAddress]'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'password': 'password',
        'group': 'group',
        'created_time': 'created_time',
        'modified_time': 'modified_time',
        'login': 'login',
        'last_login': 'last_login',
        'birth_day': 'birth_day',
        'status': 'status',
        'news_letter_subscription': 'news_letter_subscription',
        'gender': 'gender',
        'website': 'website',
        'fax': 'fax',
        'company': 'company',
        'phone': 'phone',
        'address': 'address'
    }

    def __init__(self, email=None, first_name=None, last_name=None, password=None, group=None, created_time=None, modified_time=None, login=None, last_login=None, birth_day=None, status='enabled', news_letter_subscription=False, gender=None, website=None, fax=None, company=None, phone=None, address=None):  # noqa: E501
        """CustomerAdd - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._first_name = None
        self._last_name = None
        self._password = None
        self._group = None
        self._created_time = None
        self._modified_time = None
        self._login = None
        self._last_login = None
        self._birth_day = None
        self._status = None
        self._news_letter_subscription = None
        self._gender = None
        self._website = None
        self._fax = None
        self._company = None
        self._phone = None
        self._address = None
        self.discriminator = None

        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        if password is not None:
            self.password = password
        if group is not None:
            self.group = group
        if created_time is not None:
            self.created_time = created_time
        if modified_time is not None:
            self.modified_time = modified_time
        if login is not None:
            self.login = login
        if last_login is not None:
            self.last_login = last_login
        if birth_day is not None:
            self.birth_day = birth_day
        if status is not None:
            self.status = status
        if news_letter_subscription is not None:
            self.news_letter_subscription = news_letter_subscription
        if gender is not None:
            self.gender = gender
        if website is not None:
            self.website = website
        if fax is not None:
            self.fax = fax
        if company is not None:
            self.company = company
        if phone is not None:
            self.phone = phone
        if address is not None:
            self.address = address

    @property
    def email(self):
        """Gets the email of this CustomerAdd.  # noqa: E501

        Defines customer's email  # noqa: E501

        :return: The email of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerAdd.

        Defines customer's email  # noqa: E501

        :param email: The email of this CustomerAdd.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this CustomerAdd.  # noqa: E501

        Defines customer's first name  # noqa: E501

        :return: The first_name of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CustomerAdd.

        Defines customer's first name  # noqa: E501

        :param first_name: The first_name of this CustomerAdd.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CustomerAdd.  # noqa: E501

        Defines customer's last name  # noqa: E501

        :return: The last_name of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CustomerAdd.

        Defines customer's last name  # noqa: E501

        :param last_name: The last_name of this CustomerAdd.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def password(self):
        """Gets the password of this CustomerAdd.  # noqa: E501

        Defines customer's unique password  # noqa: E501

        :return: The password of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CustomerAdd.

        Defines customer's unique password  # noqa: E501

        :param password: The password of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def group(self):
        """Gets the group of this CustomerAdd.  # noqa: E501

        Defines the group where the customer  # noqa: E501

        :return: The group of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CustomerAdd.

        Defines the group where the customer  # noqa: E501

        :param group: The group of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def created_time(self):
        """Gets the created_time of this CustomerAdd.  # noqa: E501

        Entity's date creation  # noqa: E501

        :return: The created_time of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CustomerAdd.

        Entity's date creation  # noqa: E501

        :param created_time: The created_time of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def modified_time(self):
        """Gets the modified_time of this CustomerAdd.  # noqa: E501

        Entity's date modification  # noqa: E501

        :return: The modified_time of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this CustomerAdd.

        Entity's date modification  # noqa: E501

        :param modified_time: The modified_time of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._modified_time = modified_time

    @property
    def login(self):
        """Gets the login of this CustomerAdd.  # noqa: E501

        Specifies customer's login name  # noqa: E501

        :return: The login of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this CustomerAdd.

        Specifies customer's login name  # noqa: E501

        :param login: The login of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def last_login(self):
        """Gets the last_login of this CustomerAdd.  # noqa: E501

        Defines customer's last login time  # noqa: E501

        :return: The last_login of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this CustomerAdd.

        Defines customer's last login time  # noqa: E501

        :param last_login: The last_login of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._last_login = last_login

    @property
    def birth_day(self):
        """Gets the birth_day of this CustomerAdd.  # noqa: E501

        Defines customer's birthday  # noqa: E501

        :return: The birth_day of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._birth_day

    @birth_day.setter
    def birth_day(self, birth_day):
        """Sets the birth_day of this CustomerAdd.

        Defines customer's birthday  # noqa: E501

        :param birth_day: The birth_day of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._birth_day = birth_day

    @property
    def status(self):
        """Gets the status of this CustomerAdd.  # noqa: E501

        Defines customer's status  # noqa: E501

        :return: The status of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomerAdd.

        Defines customer's status  # noqa: E501

        :param status: The status of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def news_letter_subscription(self):
        """Gets the news_letter_subscription of this CustomerAdd.  # noqa: E501

        Defines whether the newsletter subscription is available for the user  # noqa: E501

        :return: The news_letter_subscription of this CustomerAdd.  # noqa: E501
        :rtype: bool
        """
        return self._news_letter_subscription

    @news_letter_subscription.setter
    def news_letter_subscription(self, news_letter_subscription):
        """Sets the news_letter_subscription of this CustomerAdd.

        Defines whether the newsletter subscription is available for the user  # noqa: E501

        :param news_letter_subscription: The news_letter_subscription of this CustomerAdd.  # noqa: E501
        :type: bool
        """

        self._news_letter_subscription = news_letter_subscription

    @property
    def gender(self):
        """Gets the gender of this CustomerAdd.  # noqa: E501

        Defines customer's gender  # noqa: E501

        :return: The gender of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CustomerAdd.

        Defines customer's gender  # noqa: E501

        :param gender: The gender of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def website(self):
        """Gets the website of this CustomerAdd.  # noqa: E501

        Link to customer website  # noqa: E501

        :return: The website of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CustomerAdd.

        Link to customer website  # noqa: E501

        :param website: The website of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def fax(self):
        """Gets the fax of this CustomerAdd.  # noqa: E501

        Defines customer's fax  # noqa: E501

        :return: The fax of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this CustomerAdd.

        Defines customer's fax  # noqa: E501

        :param fax: The fax of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def company(self):
        """Gets the company of this CustomerAdd.  # noqa: E501

        Defines customer's company  # noqa: E501

        :return: The company of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CustomerAdd.

        Defines customer's company  # noqa: E501

        :param company: The company of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def phone(self):
        """Gets the phone of this CustomerAdd.  # noqa: E501

        Defines customer's phone number  # noqa: E501

        :return: The phone of this CustomerAdd.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerAdd.

        Defines customer's phone number  # noqa: E501

        :param phone: The phone of this CustomerAdd.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def address(self):
        """Gets the address of this CustomerAdd.  # noqa: E501


        :return: The address of this CustomerAdd.  # noqa: E501
        :rtype: list[CustomerAddAddress]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CustomerAdd.


        :param address: The address of this CustomerAdd.  # noqa: E501
        :type: list[CustomerAddAddress]
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerAdd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerAdd):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
