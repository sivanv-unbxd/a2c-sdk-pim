# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Customer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'created_time': 'A2CDateTime',
        'modified_time': 'A2CDateTime',
        'group': 'list[CustomerGroup]',
        'login': 'str',
        'last_login': 'A2CDateTime',
        'birth_day': 'A2CDateTime',
        'status': 'str',
        'news_letter_subscription': 'bool',
        'gender': 'str',
        'stores_ids': 'list[str]',
        'website': 'str',
        'fax': 'str',
        'company': 'str',
        'ip_address': 'str',
        'address_book': 'list[CustomerAddress]',
        'orders_count': 'int',
        'last_order_id': 'str',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'phone': 'phone',
        'created_time': 'created_time',
        'modified_time': 'modified_time',
        'group': 'group',
        'login': 'login',
        'last_login': 'last_login',
        'birth_day': 'birth_day',
        'status': 'status',
        'news_letter_subscription': 'news_letter_subscription',
        'gender': 'gender',
        'stores_ids': 'stores_ids',
        'website': 'website',
        'fax': 'fax',
        'company': 'company',
        'ip_address': 'ip_address',
        'address_book': 'address_book',
        'orders_count': 'orders_count',
        'last_order_id': 'last_order_id',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, email=None, first_name=None, last_name=None, phone=None, created_time=None, modified_time=None, group=None, login=None, last_login=None, birth_day=None, status=None, news_letter_subscription=None, gender=None, stores_ids=None, website=None, fax=None, company=None, ip_address=None, address_book=None, orders_count=None, last_order_id=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """Customer - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._created_time = None
        self._modified_time = None
        self._group = None
        self._login = None
        self._last_login = None
        self._birth_day = None
        self._status = None
        self._news_letter_subscription = None
        self._gender = None
        self._stores_ids = None
        self._website = None
        self._fax = None
        self._company = None
        self._ip_address = None
        self._address_book = None
        self._orders_count = None
        self._last_order_id = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone
        if created_time is not None:
            self.created_time = created_time
        if modified_time is not None:
            self.modified_time = modified_time
        if group is not None:
            self.group = group
        if login is not None:
            self.login = login
        if last_login is not None:
            self.last_login = last_login
        if birth_day is not None:
            self.birth_day = birth_day
        if status is not None:
            self.status = status
        if news_letter_subscription is not None:
            self.news_letter_subscription = news_letter_subscription
        if gender is not None:
            self.gender = gender
        if stores_ids is not None:
            self.stores_ids = stores_ids
        if website is not None:
            self.website = website
        if fax is not None:
            self.fax = fax
        if company is not None:
            self.company = company
        if ip_address is not None:
            self.ip_address = ip_address
        if address_book is not None:
            self.address_book = address_book
        if orders_count is not None:
            self.orders_count = orders_count
        if last_order_id is not None:
            self.last_order_id = last_order_id
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Customer.  # noqa: E501


        :return: The id of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.


        :param id: The id of this Customer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this Customer.  # noqa: E501


        :return: The email of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Customer.


        :param email: The email of this Customer.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Customer.  # noqa: E501


        :return: The first_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Customer.


        :param first_name: The first_name of this Customer.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Customer.  # noqa: E501


        :return: The last_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Customer.


        :param last_name: The last_name of this Customer.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this Customer.  # noqa: E501


        :return: The phone of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Customer.


        :param phone: The phone of this Customer.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def created_time(self):
        """Gets the created_time of this Customer.  # noqa: E501


        :return: The created_time of this Customer.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Customer.


        :param created_time: The created_time of this Customer.  # noqa: E501
        :type: A2CDateTime
        """

        self._created_time = created_time

    @property
    def modified_time(self):
        """Gets the modified_time of this Customer.  # noqa: E501


        :return: The modified_time of this Customer.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Customer.


        :param modified_time: The modified_time of this Customer.  # noqa: E501
        :type: A2CDateTime
        """

        self._modified_time = modified_time

    @property
    def group(self):
        """Gets the group of this Customer.  # noqa: E501


        :return: The group of this Customer.  # noqa: E501
        :rtype: list[CustomerGroup]
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Customer.


        :param group: The group of this Customer.  # noqa: E501
        :type: list[CustomerGroup]
        """

        self._group = group

    @property
    def login(self):
        """Gets the login of this Customer.  # noqa: E501


        :return: The login of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this Customer.


        :param login: The login of this Customer.  # noqa: E501
        :type: str
        """

        self._login = login

    @property
    def last_login(self):
        """Gets the last_login of this Customer.  # noqa: E501


        :return: The last_login of this Customer.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Customer.


        :param last_login: The last_login of this Customer.  # noqa: E501
        :type: A2CDateTime
        """

        self._last_login = last_login

    @property
    def birth_day(self):
        """Gets the birth_day of this Customer.  # noqa: E501


        :return: The birth_day of this Customer.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._birth_day

    @birth_day.setter
    def birth_day(self, birth_day):
        """Sets the birth_day of this Customer.


        :param birth_day: The birth_day of this Customer.  # noqa: E501
        :type: A2CDateTime
        """

        self._birth_day = birth_day

    @property
    def status(self):
        """Gets the status of this Customer.  # noqa: E501


        :return: The status of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Customer.


        :param status: The status of this Customer.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def news_letter_subscription(self):
        """Gets the news_letter_subscription of this Customer.  # noqa: E501


        :return: The news_letter_subscription of this Customer.  # noqa: E501
        :rtype: bool
        """
        return self._news_letter_subscription

    @news_letter_subscription.setter
    def news_letter_subscription(self, news_letter_subscription):
        """Sets the news_letter_subscription of this Customer.


        :param news_letter_subscription: The news_letter_subscription of this Customer.  # noqa: E501
        :type: bool
        """

        self._news_letter_subscription = news_letter_subscription

    @property
    def gender(self):
        """Gets the gender of this Customer.  # noqa: E501


        :return: The gender of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Customer.


        :param gender: The gender of this Customer.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def stores_ids(self):
        """Gets the stores_ids of this Customer.  # noqa: E501


        :return: The stores_ids of this Customer.  # noqa: E501
        :rtype: list[str]
        """
        return self._stores_ids

    @stores_ids.setter
    def stores_ids(self, stores_ids):
        """Sets the stores_ids of this Customer.


        :param stores_ids: The stores_ids of this Customer.  # noqa: E501
        :type: list[str]
        """

        self._stores_ids = stores_ids

    @property
    def website(self):
        """Gets the website of this Customer.  # noqa: E501


        :return: The website of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Customer.


        :param website: The website of this Customer.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def fax(self):
        """Gets the fax of this Customer.  # noqa: E501


        :return: The fax of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Customer.


        :param fax: The fax of this Customer.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def company(self):
        """Gets the company of this Customer.  # noqa: E501


        :return: The company of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Customer.


        :param company: The company of this Customer.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def ip_address(self):
        """Gets the ip_address of this Customer.  # noqa: E501


        :return: The ip_address of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Customer.


        :param ip_address: The ip_address of this Customer.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def address_book(self):
        """Gets the address_book of this Customer.  # noqa: E501


        :return: The address_book of this Customer.  # noqa: E501
        :rtype: list[CustomerAddress]
        """
        return self._address_book

    @address_book.setter
    def address_book(self, address_book):
        """Sets the address_book of this Customer.


        :param address_book: The address_book of this Customer.  # noqa: E501
        :type: list[CustomerAddress]
        """

        self._address_book = address_book

    @property
    def orders_count(self):
        """Gets the orders_count of this Customer.  # noqa: E501


        :return: The orders_count of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._orders_count

    @orders_count.setter
    def orders_count(self, orders_count):
        """Sets the orders_count of this Customer.


        :param orders_count: The orders_count of this Customer.  # noqa: E501
        :type: int
        """

        self._orders_count = orders_count

    @property
    def last_order_id(self):
        """Gets the last_order_id of this Customer.  # noqa: E501


        :return: The last_order_id of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._last_order_id

    @last_order_id.setter
    def last_order_id(self, last_order_id):
        """Sets the last_order_id of this Customer.


        :param last_order_id: The last_order_id of this Customer.  # noqa: E501
        :type: str
        """

        self._last_order_id = last_order_id

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Customer.  # noqa: E501


        :return: The additional_fields of this Customer.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Customer.


        :param additional_fields: The additional_fields of this Customer.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Customer.  # noqa: E501


        :return: The custom_fields of this Customer.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Customer.


        :param custom_fields: The custom_fields of this Customer.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Customer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
