# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Coupon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'codes': 'list[CouponCode]',
        'name': 'str',
        'description': 'str',
        'actions': 'list[CouponAction]',
        'date_start': 'A2CDateTime',
        'date_end': 'A2CDateTime',
        'avail': 'bool',
        'priority': 'int',
        'used_times': 'int',
        'usage_limit': 'int',
        'usage_limit_per_customer': 'int',
        'logic_operator': 'str',
        'conditions': 'list[CouponCondition]',
        'usage_history': 'list[CouponHistory]',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'codes': 'codes',
        'name': 'name',
        'description': 'description',
        'actions': 'actions',
        'date_start': 'date_start',
        'date_end': 'date_end',
        'avail': 'avail',
        'priority': 'priority',
        'used_times': 'used_times',
        'usage_limit': 'usage_limit',
        'usage_limit_per_customer': 'usage_limit_per_customer',
        'logic_operator': 'logic_operator',
        'conditions': 'conditions',
        'usage_history': 'usage_history',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, id=None, code=None, codes=None, name=None, description=None, actions=None, date_start=None, date_end=None, avail=None, priority=None, used_times=None, usage_limit=None, usage_limit_per_customer=None, logic_operator=None, conditions=None, usage_history=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """Coupon - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._code = None
        self._codes = None
        self._name = None
        self._description = None
        self._actions = None
        self._date_start = None
        self._date_end = None
        self._avail = None
        self._priority = None
        self._used_times = None
        self._usage_limit = None
        self._usage_limit_per_customer = None
        self._logic_operator = None
        self._conditions = None
        self._usage_history = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if code is not None:
            self.code = code
        if codes is not None:
            self.codes = codes
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if actions is not None:
            self.actions = actions
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if avail is not None:
            self.avail = avail
        if priority is not None:
            self.priority = priority
        if used_times is not None:
            self.used_times = used_times
        if usage_limit is not None:
            self.usage_limit = usage_limit
        if usage_limit_per_customer is not None:
            self.usage_limit_per_customer = usage_limit_per_customer
        if logic_operator is not None:
            self.logic_operator = logic_operator
        if conditions is not None:
            self.conditions = conditions
        if usage_history is not None:
            self.usage_history = usage_history
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Coupon.  # noqa: E501


        :return: The id of this Coupon.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Coupon.


        :param id: The id of this Coupon.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this Coupon.  # noqa: E501


        :return: The code of this Coupon.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Coupon.


        :param code: The code of this Coupon.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def codes(self):
        """Gets the codes of this Coupon.  # noqa: E501


        :return: The codes of this Coupon.  # noqa: E501
        :rtype: list[CouponCode]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this Coupon.


        :param codes: The codes of this Coupon.  # noqa: E501
        :type: list[CouponCode]
        """

        self._codes = codes

    @property
    def name(self):
        """Gets the name of this Coupon.  # noqa: E501


        :return: The name of this Coupon.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Coupon.


        :param name: The name of this Coupon.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Coupon.  # noqa: E501


        :return: The description of this Coupon.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Coupon.


        :param description: The description of this Coupon.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def actions(self):
        """Gets the actions of this Coupon.  # noqa: E501


        :return: The actions of this Coupon.  # noqa: E501
        :rtype: list[CouponAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Coupon.


        :param actions: The actions of this Coupon.  # noqa: E501
        :type: list[CouponAction]
        """

        self._actions = actions

    @property
    def date_start(self):
        """Gets the date_start of this Coupon.  # noqa: E501


        :return: The date_start of this Coupon.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this Coupon.


        :param date_start: The date_start of this Coupon.  # noqa: E501
        :type: A2CDateTime
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this Coupon.  # noqa: E501


        :return: The date_end of this Coupon.  # noqa: E501
        :rtype: A2CDateTime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this Coupon.


        :param date_end: The date_end of this Coupon.  # noqa: E501
        :type: A2CDateTime
        """

        self._date_end = date_end

    @property
    def avail(self):
        """Gets the avail of this Coupon.  # noqa: E501


        :return: The avail of this Coupon.  # noqa: E501
        :rtype: bool
        """
        return self._avail

    @avail.setter
    def avail(self, avail):
        """Sets the avail of this Coupon.


        :param avail: The avail of this Coupon.  # noqa: E501
        :type: bool
        """

        self._avail = avail

    @property
    def priority(self):
        """Gets the priority of this Coupon.  # noqa: E501


        :return: The priority of this Coupon.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Coupon.


        :param priority: The priority of this Coupon.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def used_times(self):
        """Gets the used_times of this Coupon.  # noqa: E501


        :return: The used_times of this Coupon.  # noqa: E501
        :rtype: int
        """
        return self._used_times

    @used_times.setter
    def used_times(self, used_times):
        """Sets the used_times of this Coupon.


        :param used_times: The used_times of this Coupon.  # noqa: E501
        :type: int
        """

        self._used_times = used_times

    @property
    def usage_limit(self):
        """Gets the usage_limit of this Coupon.  # noqa: E501


        :return: The usage_limit of this Coupon.  # noqa: E501
        :rtype: int
        """
        return self._usage_limit

    @usage_limit.setter
    def usage_limit(self, usage_limit):
        """Sets the usage_limit of this Coupon.


        :param usage_limit: The usage_limit of this Coupon.  # noqa: E501
        :type: int
        """

        self._usage_limit = usage_limit

    @property
    def usage_limit_per_customer(self):
        """Gets the usage_limit_per_customer of this Coupon.  # noqa: E501


        :return: The usage_limit_per_customer of this Coupon.  # noqa: E501
        :rtype: int
        """
        return self._usage_limit_per_customer

    @usage_limit_per_customer.setter
    def usage_limit_per_customer(self, usage_limit_per_customer):
        """Sets the usage_limit_per_customer of this Coupon.


        :param usage_limit_per_customer: The usage_limit_per_customer of this Coupon.  # noqa: E501
        :type: int
        """

        self._usage_limit_per_customer = usage_limit_per_customer

    @property
    def logic_operator(self):
        """Gets the logic_operator of this Coupon.  # noqa: E501


        :return: The logic_operator of this Coupon.  # noqa: E501
        :rtype: str
        """
        return self._logic_operator

    @logic_operator.setter
    def logic_operator(self, logic_operator):
        """Sets the logic_operator of this Coupon.


        :param logic_operator: The logic_operator of this Coupon.  # noqa: E501
        :type: str
        """

        self._logic_operator = logic_operator

    @property
    def conditions(self):
        """Gets the conditions of this Coupon.  # noqa: E501


        :return: The conditions of this Coupon.  # noqa: E501
        :rtype: list[CouponCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Coupon.


        :param conditions: The conditions of this Coupon.  # noqa: E501
        :type: list[CouponCondition]
        """

        self._conditions = conditions

    @property
    def usage_history(self):
        """Gets the usage_history of this Coupon.  # noqa: E501


        :return: The usage_history of this Coupon.  # noqa: E501
        :rtype: list[CouponHistory]
        """
        return self._usage_history

    @usage_history.setter
    def usage_history(self, usage_history):
        """Sets the usage_history of this Coupon.


        :param usage_history: The usage_history of this Coupon.  # noqa: E501
        :type: list[CouponHistory]
        """

        self._usage_history = usage_history

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Coupon.  # noqa: E501


        :return: The additional_fields of this Coupon.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Coupon.


        :param additional_fields: The additional_fields of this Coupon.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Coupon.  # noqa: E501


        :return: The custom_fields of this Coupon.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Coupon.


        :param custom_fields: The custom_fields of this Coupon.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Coupon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Coupon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
