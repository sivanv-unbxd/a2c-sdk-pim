# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductAddSellerProfiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipping_profile_id': 'str',
        'payment_profile_id': 'str',
        'return_profile_id': 'str'
    }

    attribute_map = {
        'shipping_profile_id': 'shipping_profile_id',
        'payment_profile_id': 'payment_profile_id',
        'return_profile_id': 'return_profile_id'
    }

    def __init__(self, shipping_profile_id=None, payment_profile_id=None, return_profile_id=None):  # noqa: E501
        """ProductAddSellerProfiles - a model defined in Swagger"""  # noqa: E501

        self._shipping_profile_id = None
        self._payment_profile_id = None
        self._return_profile_id = None
        self.discriminator = None

        if shipping_profile_id is not None:
            self.shipping_profile_id = shipping_profile_id
        if payment_profile_id is not None:
            self.payment_profile_id = payment_profile_id
        if return_profile_id is not None:
            self.return_profile_id = return_profile_id

    @property
    def shipping_profile_id(self):
        """Gets the shipping_profile_id of this ProductAddSellerProfiles.  # noqa: E501


        :return: The shipping_profile_id of this ProductAddSellerProfiles.  # noqa: E501
        :rtype: str
        """
        return self._shipping_profile_id

    @shipping_profile_id.setter
    def shipping_profile_id(self, shipping_profile_id):
        """Sets the shipping_profile_id of this ProductAddSellerProfiles.


        :param shipping_profile_id: The shipping_profile_id of this ProductAddSellerProfiles.  # noqa: E501
        :type: str
        """

        self._shipping_profile_id = shipping_profile_id

    @property
    def payment_profile_id(self):
        """Gets the payment_profile_id of this ProductAddSellerProfiles.  # noqa: E501


        :return: The payment_profile_id of this ProductAddSellerProfiles.  # noqa: E501
        :rtype: str
        """
        return self._payment_profile_id

    @payment_profile_id.setter
    def payment_profile_id(self, payment_profile_id):
        """Sets the payment_profile_id of this ProductAddSellerProfiles.


        :param payment_profile_id: The payment_profile_id of this ProductAddSellerProfiles.  # noqa: E501
        :type: str
        """

        self._payment_profile_id = payment_profile_id

    @property
    def return_profile_id(self):
        """Gets the return_profile_id of this ProductAddSellerProfiles.  # noqa: E501


        :return: The return_profile_id of this ProductAddSellerProfiles.  # noqa: E501
        :rtype: str
        """
        return self._return_profile_id

    @return_profile_id.setter
    def return_profile_id(self, return_profile_id):
        """Sets the return_profile_id of this ProductAddSellerProfiles.


        :param return_profile_id: The return_profile_id of this ProductAddSellerProfiles.  # noqa: E501
        :type: str
        """

        self._return_profile_id = return_profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductAddSellerProfiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductAddSellerProfiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
