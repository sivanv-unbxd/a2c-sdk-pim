# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderTotal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subtotal_ex_tax': 'float',
        'wrapping_ex_tax': 'float',
        'shipping_ex_tax': 'float',
        'total_discount': 'float',
        'total_tax': 'float',
        'total': 'float',
        'total_paid': 'float',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'subtotal_ex_tax': 'subtotal_ex_tax',
        'wrapping_ex_tax': 'wrapping_ex_tax',
        'shipping_ex_tax': 'shipping_ex_tax',
        'total_discount': 'total_discount',
        'total_tax': 'total_tax',
        'total': 'total',
        'total_paid': 'total_paid',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, subtotal_ex_tax=None, wrapping_ex_tax=None, shipping_ex_tax=None, total_discount=None, total_tax=None, total=None, total_paid=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """OrderTotal - a model defined in Swagger"""  # noqa: E501

        self._subtotal_ex_tax = None
        self._wrapping_ex_tax = None
        self._shipping_ex_tax = None
        self._total_discount = None
        self._total_tax = None
        self._total = None
        self._total_paid = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if subtotal_ex_tax is not None:
            self.subtotal_ex_tax = subtotal_ex_tax
        if wrapping_ex_tax is not None:
            self.wrapping_ex_tax = wrapping_ex_tax
        if shipping_ex_tax is not None:
            self.shipping_ex_tax = shipping_ex_tax
        if total_discount is not None:
            self.total_discount = total_discount
        if total_tax is not None:
            self.total_tax = total_tax
        if total is not None:
            self.total = total
        if total_paid is not None:
            self.total_paid = total_paid
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def subtotal_ex_tax(self):
        """Gets the subtotal_ex_tax of this OrderTotal.  # noqa: E501


        :return: The subtotal_ex_tax of this OrderTotal.  # noqa: E501
        :rtype: float
        """
        return self._subtotal_ex_tax

    @subtotal_ex_tax.setter
    def subtotal_ex_tax(self, subtotal_ex_tax):
        """Sets the subtotal_ex_tax of this OrderTotal.


        :param subtotal_ex_tax: The subtotal_ex_tax of this OrderTotal.  # noqa: E501
        :type: float
        """

        self._subtotal_ex_tax = subtotal_ex_tax

    @property
    def wrapping_ex_tax(self):
        """Gets the wrapping_ex_tax of this OrderTotal.  # noqa: E501


        :return: The wrapping_ex_tax of this OrderTotal.  # noqa: E501
        :rtype: float
        """
        return self._wrapping_ex_tax

    @wrapping_ex_tax.setter
    def wrapping_ex_tax(self, wrapping_ex_tax):
        """Sets the wrapping_ex_tax of this OrderTotal.


        :param wrapping_ex_tax: The wrapping_ex_tax of this OrderTotal.  # noqa: E501
        :type: float
        """

        self._wrapping_ex_tax = wrapping_ex_tax

    @property
    def shipping_ex_tax(self):
        """Gets the shipping_ex_tax of this OrderTotal.  # noqa: E501


        :return: The shipping_ex_tax of this OrderTotal.  # noqa: E501
        :rtype: float
        """
        return self._shipping_ex_tax

    @shipping_ex_tax.setter
    def shipping_ex_tax(self, shipping_ex_tax):
        """Sets the shipping_ex_tax of this OrderTotal.


        :param shipping_ex_tax: The shipping_ex_tax of this OrderTotal.  # noqa: E501
        :type: float
        """

        self._shipping_ex_tax = shipping_ex_tax

    @property
    def total_discount(self):
        """Gets the total_discount of this OrderTotal.  # noqa: E501


        :return: The total_discount of this OrderTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this OrderTotal.


        :param total_discount: The total_discount of this OrderTotal.  # noqa: E501
        :type: float
        """

        self._total_discount = total_discount

    @property
    def total_tax(self):
        """Gets the total_tax of this OrderTotal.  # noqa: E501


        :return: The total_tax of this OrderTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this OrderTotal.


        :param total_tax: The total_tax of this OrderTotal.  # noqa: E501
        :type: float
        """

        self._total_tax = total_tax

    @property
    def total(self):
        """Gets the total of this OrderTotal.  # noqa: E501


        :return: The total of this OrderTotal.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderTotal.


        :param total: The total of this OrderTotal.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def total_paid(self):
        """Gets the total_paid of this OrderTotal.  # noqa: E501


        :return: The total_paid of this OrderTotal.  # noqa: E501
        :rtype: float
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this OrderTotal.


        :param total_paid: The total_paid of this OrderTotal.  # noqa: E501
        :type: float
        """

        self._total_paid = total_paid

    @property
    def additional_fields(self):
        """Gets the additional_fields of this OrderTotal.  # noqa: E501


        :return: The additional_fields of this OrderTotal.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this OrderTotal.


        :param additional_fields: The additional_fields of this OrderTotal.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderTotal.  # noqa: E501


        :return: The custom_fields of this OrderTotal.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderTotal.


        :param custom_fields: The custom_fields of this OrderTotal.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderTotal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderTotal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
