# coding: utf-8

"""
    Swagger API2Cart

    API2Cart  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: contact@api2cart.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderTotals(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'float',
        'subtotal': 'float',
        'shipping': 'float',
        'tax': 'float',
        'discount': 'float',
        'additional_fields': 'object',
        'custom_fields': 'object'
    }

    attribute_map = {
        'total': 'total',
        'subtotal': 'subtotal',
        'shipping': 'shipping',
        'tax': 'tax',
        'discount': 'discount',
        'additional_fields': 'additional_fields',
        'custom_fields': 'custom_fields'
    }

    def __init__(self, total=None, subtotal=None, shipping=None, tax=None, discount=None, additional_fields=None, custom_fields=None):  # noqa: E501
        """OrderTotals - a model defined in Swagger"""  # noqa: E501

        self._total = None
        self._subtotal = None
        self._shipping = None
        self._tax = None
        self._discount = None
        self._additional_fields = None
        self._custom_fields = None
        self.discriminator = None

        if total is not None:
            self.total = total
        if subtotal is not None:
            self.subtotal = subtotal
        if shipping is not None:
            self.shipping = shipping
        if tax is not None:
            self.tax = tax
        if discount is not None:
            self.discount = discount
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if custom_fields is not None:
            self.custom_fields = custom_fields

    @property
    def total(self):
        """Gets the total of this OrderTotals.  # noqa: E501


        :return: The total of this OrderTotals.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderTotals.


        :param total: The total of this OrderTotals.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def subtotal(self):
        """Gets the subtotal of this OrderTotals.  # noqa: E501


        :return: The subtotal of this OrderTotals.  # noqa: E501
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this OrderTotals.


        :param subtotal: The subtotal of this OrderTotals.  # noqa: E501
        :type: float
        """

        self._subtotal = subtotal

    @property
    def shipping(self):
        """Gets the shipping of this OrderTotals.  # noqa: E501


        :return: The shipping of this OrderTotals.  # noqa: E501
        :rtype: float
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this OrderTotals.


        :param shipping: The shipping of this OrderTotals.  # noqa: E501
        :type: float
        """

        self._shipping = shipping

    @property
    def tax(self):
        """Gets the tax of this OrderTotals.  # noqa: E501


        :return: The tax of this OrderTotals.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this OrderTotals.


        :param tax: The tax of this OrderTotals.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def discount(self):
        """Gets the discount of this OrderTotals.  # noqa: E501


        :return: The discount of this OrderTotals.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OrderTotals.


        :param discount: The discount of this OrderTotals.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def additional_fields(self):
        """Gets the additional_fields of this OrderTotals.  # noqa: E501


        :return: The additional_fields of this OrderTotals.  # noqa: E501
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this OrderTotals.


        :param additional_fields: The additional_fields of this OrderTotals.  # noqa: E501
        :type: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderTotals.  # noqa: E501


        :return: The custom_fields of this OrderTotals.  # noqa: E501
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderTotals.


        :param custom_fields: The custom_fields of this OrderTotals.  # noqa: E501
        :type: object
        """

        self._custom_fields = custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderTotals, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderTotals):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
